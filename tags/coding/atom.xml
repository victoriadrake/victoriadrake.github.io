<feed xmlns="http://www.w3.org/2005/Atom"><title>Coding on victoria.dev</title><link href="https://victoria.dev/tags/coding/feed.xml" rel="self"/><link href="https://victoria.dev/tags/coding/"/><updated>2023-09-26T04:46:36-05:00</updated><id>https://victoria.dev/tags/coding/</id><author><name>Victoria Drake</name><email>hello@victoria.dev</email></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">How to send long text input to ChatGPT using the OpenAI API</title><link href="https://victoria.dev/posts/how-to-send-long-text-input-to-chatgpt-using-the-openai-api/"/><id>https://victoria.dev/posts/how-to-send-long-text-input-to-chatgpt-using-the-openai-api/</id><author><name>Victoria Drake</name></author><published>2023-09-26T04:46:36-05:00</published><updated>2023-09-26T04:46:36-05:00</updated><content type="html"><![CDATA[<p>In a previous post, I showed how you can apply text preprocessing techniques to shorten your input length for ChatGPT. Today in the web interface (<a href="https://chat.openai.com/">chat.openai.com</a>), ChatGPT allows you to send a message with a maximum token length of 4,096.</p>
<p>There are bound to be situations in which this isn&rsquo;t enough, such as when you want to read in a large amount of text from a file. Using the OpenAI API allows you to send many more tokens in a messages array, with the maximum number depending on your chosen model. This lets you provide large amounts of text to ChatGPT using chunking. Here&rsquo;s how.</p>
<h2 id="chunking-your-input">Chunking your input</h2>
<p>The <code>gpt-4</code> model currently has a maximum content length token limit of 8,192 tokens. (<a href="https://platform.openai.com/docs/models">Here are the docs containing current limits for all the models</a>.) Remember that you can first apply text preprocessing techniques to reduce your input size &ndash; in my <a href="/posts/optimizing-text-for-chatgpt-nlp-and-text-pre-processing-techniques/">previous post</a> I achieved a 28% size reduction without losing meaning with just a little tokenization and pruning.</p>
<p>When this isn&rsquo;t enough to fit your message within the maximum message token limit, you can take a general programmatic approach that sends your input in message chunks. The goal is to divide your text into sections that each fit within the model&rsquo;s token limit. The general idea is to:</p>
<ol>
<li><strong>Tokenize and split text into chunks</strong> based on the model&rsquo;s token limit. It&rsquo;s better to keep message chunks slightly below the token limit since the token limit is shared between your message and ChatGPT&rsquo;s response.</li>
<li><strong>Maintain context</strong> between chunks, e.g. avoid splitting a sentence in the middle.</li>
</ol>
<p>Each chunk is sent as a separate message in the conversation thread.</p>
<h2 id="handling-responses">Handling responses</h2>
<p>You send your chunks to ChatGPT using the OpenAI library&rsquo;s <code>ChatCompletion</code>. ChatGPT returns individual responses for each message, so you may want to process these by:</p>
<ol>
<li><strong>Concatenating responses</strong> in the order you sent them to get a coherent answer.</li>
<li><strong>Manage conversation flow</strong> by keeping track of which response refers to which chunk.</li>
<li><strong>Formatting the response</strong> to suit your desired output, e.g. replacing <code>\n</code> with line breaks.</li>
</ol>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>Using the OpenAI API, you can send multiple messages to ChatGPT and ask it to wait for you to provide all of the data before answering your prompt. Being a language model, you can provide these instructions to ChatGPT in plain language. Here&rsquo;s a suggested script:</p>
<blockquote>
<p>Prompt: Summarize the following text for me</p>
<p>To provide the context for the above prompt, I will send you text in parts. When I am finished, I will tell you &ldquo;ALL PARTS SENT&rdquo;. Do not answer until you have received all the parts.</p></blockquote>
<p>I created <a href="https://github.com/victoriadrake/chatgptmax">a Python module, <code>chatgptmax</code></a>, that puts all this together. It breaks up a large amount of text by a given maximum token length and sends it in chunks to ChatGPT.</p>
<p>You can install it with <code>pip install chatgptmax</code>, but here&rsquo;s the juicy part:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> openai
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> tiktoken
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set up your OpenAI API key</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Load your API key from an environment variable or secret management service</span>
</span></span><span style="display:flex;"><span>openai<span style="color:#f92672">.</span>api_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>getenv(<span style="color:#e6db74">&#34;OPENAI_API_KEY&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send</span>(
</span></span><span style="display:flex;"><span>    prompt<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,
</span></span><span style="display:flex;"><span>    text_data<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,
</span></span><span style="display:flex;"><span>    chat_model<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;gpt-3.5-turbo&#34;</span>,
</span></span><span style="display:flex;"><span>    model_token_limit<span style="color:#f92672">=</span><span style="color:#ae81ff">8192</span>,
</span></span><span style="display:flex;"><span>    max_tokens<span style="color:#f92672">=</span><span style="color:#ae81ff">2500</span>,
</span></span><span style="display:flex;"><span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Send the prompt at the start of the conversation and then send chunks of text_data to ChatGPT via the OpenAI API.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    If the text_data is too long, it splits it into chunks and sends each chunk separately.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    - prompt (str, optional): The prompt to guide the model&#39;s response.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    - text_data (str, optional): Additional text data to be included.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    - max_tokens (int, optional): Maximum tokens for each API call. Default is 2500.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    - list or str: A list of model&#39;s responses for each chunk or an error message.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Check if the necessary arguments are provided</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> prompt:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Prompt is missing. Please provide a prompt.&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> text_data:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Text data is missing. Please provide some text data.&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Initialize the tokenizer</span>
</span></span><span style="display:flex;"><span>    tokenizer <span style="color:#f92672">=</span> tiktoken<span style="color:#f92672">.</span>encoding_for_model(chat_model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Encode the text_data into token integers</span>
</span></span><span style="display:flex;"><span>    token_integers <span style="color:#f92672">=</span> tokenizer<span style="color:#f92672">.</span>encode(text_data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Split the token integers into chunks based on max_tokens</span>
</span></span><span style="display:flex;"><span>    chunk_size <span style="color:#f92672">=</span> max_tokens <span style="color:#f92672">-</span> len(tokenizer<span style="color:#f92672">.</span>encode(prompt))
</span></span><span style="display:flex;"><span>    chunks <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        token_integers[i : i <span style="color:#f92672">+</span> chunk_size]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(token_integers), chunk_size)
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Decode token chunks back to strings</span>
</span></span><span style="display:flex;"><span>    chunks <span style="color:#f92672">=</span> [tokenizer<span style="color:#f92672">.</span>decode(chunk) <span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> chunks]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    responses <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    messages <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        {<span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>, <span style="color:#e6db74">&#34;content&#34;</span>: prompt},
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;content&#34;</span>: <span style="color:#e6db74">&#34;To provide the context for the above prompt, I will send you text in parts. When I am finished, I will tell you &#39;ALL PARTS SENT&#39;. Do not answer until you have received all the parts.&#34;</span>,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> chunks:
</span></span><span style="display:flex;"><span>        messages<span style="color:#f92672">.</span>append({<span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>, <span style="color:#e6db74">&#34;content&#34;</span>: chunk})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Check if total tokens exceed the model&#39;s limit and remove oldest chunks if necessary</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> (
</span></span><span style="display:flex;"><span>            sum(len(tokenizer<span style="color:#f92672">.</span>encode(msg[<span style="color:#e6db74">&#34;content&#34;</span>])) <span style="color:#66d9ef">for</span> msg <span style="color:#f92672">in</span> messages)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&gt;</span> model_token_limit
</span></span><span style="display:flex;"><span>        ):
</span></span><span style="display:flex;"><span>            messages<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># Remove the oldest chunk</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        response <span style="color:#f92672">=</span> openai<span style="color:#f92672">.</span>ChatCompletion<span style="color:#f92672">.</span>create(model<span style="color:#f92672">=</span>chat_model, messages<span style="color:#f92672">=</span>messages)
</span></span><span style="display:flex;"><span>        chatgpt_response <span style="color:#f92672">=</span> response<span style="color:#f92672">.</span>choices[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>message[<span style="color:#e6db74">&#34;content&#34;</span>]<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>        responses<span style="color:#f92672">.</span>append(chatgpt_response)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add the final &#34;ALL PARTS SENT&#34; message</span>
</span></span><span style="display:flex;"><span>    messages<span style="color:#f92672">.</span>append({<span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>, <span style="color:#e6db74">&#34;content&#34;</span>: <span style="color:#e6db74">&#34;ALL PARTS SENT&#34;</span>})
</span></span><span style="display:flex;"><span>    response <span style="color:#f92672">=</span> openai<span style="color:#f92672">.</span>ChatCompletion<span style="color:#f92672">.</span>create(model<span style="color:#f92672">=</span>chat_model, messages<span style="color:#f92672">=</span>messages)
</span></span><span style="display:flex;"><span>    final_response <span style="color:#f92672">=</span> response<span style="color:#f92672">.</span>choices[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>message[<span style="color:#e6db74">&#34;content&#34;</span>]<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>    responses<span style="color:#f92672">.</span>append(final_response)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> responses
</span></span></code></pre></div><p>Here&rsquo;s an example of how you can use this module with text data read from a file. (<code>chatgptmax</code> also provides a <a href="https://github.com/victoriadrake/chatgptmax/blob/4431af468435cd51d07779c6d721c8e0016d6bd6/chatgptmax.py#L68">convenience method</a> for getting text from a file.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># First, import the necessary modules and the function</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> chatgptmax <span style="color:#f92672">import</span> send
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Define a function to read the content of a file</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_file_content</span>(file_path):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(file_path, <span style="color:#e6db74">&#39;r&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf-8&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Use the function</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Specify the path to your file</span>
</span></span><span style="display:flex;"><span>    file_path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;path_to_your_file.txt&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Read the content of the file</span>
</span></span><span style="display:flex;"><span>    file_content <span style="color:#f92672">=</span> read_file_content(file_path)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Define your prompt</span>
</span></span><span style="display:flex;"><span>    prompt_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Summarize the following text for me:&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Send the file content to ChatGPT</span>
</span></span><span style="display:flex;"><span>    responses <span style="color:#f92672">=</span> send(prompt<span style="color:#f92672">=</span>prompt_text, text_data<span style="color:#f92672">=</span>file_content)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Print the responses</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> response <span style="color:#f92672">in</span> responses:
</span></span><span style="display:flex;"><span>        print(response)
</span></span></code></pre></div><h3 id="error-handling">Error handling</h3>
<p>While the module is designed to handle most standard use cases, there are potential pitfalls to be aware of:</p>
<ul>
<li><strong>Incomplete sentences</strong>: If a chunk ends in the middle of a sentence, it might alter the meaning or context. To mitigate this, consider ensuring that chunks end at full stops or natural breaks in the text. You could do this by separating the text-chunking task into a separate function that:
<ol>
<li>Splits the text into sentences.</li>
<li>Iterates over the sentences and adds them to a chunk until the chunk reaches the maximum size.</li>
<li>Starts a new chunk when the current chunk reaches the maximum size or when adding another sentence would exceed the maximum size.</li>
</ol>
</li>
<li><strong>API connectivity issues</strong>: There&rsquo;s always a possibility of timeouts or connectivity problems during API calls. If this is a significant issue for your application, you can include retry logic in your code. If an API call fails, the script could wait for a few seconds and then try again, ensuring that all chunks are processed.</li>
<li><strong>Rate limits</strong>: Be mindful of <a href="https://platform.openai.com/docs/guides/rate-limits/overview">OpenAI API&rsquo;s rate limits</a>. If you&rsquo;re sending many chunks in rapid succession, you might hit these limits. Introducing a slight delay between calls or spreading out requests can help avoid this.</li>
</ul>
<h3 id="optimization">Optimization</h3>
<p>As with any process, there&rsquo;s always room for improvement. Here are a couple of ways you might optimize the module&rsquo;s chunking and sending process further:</p>
<ul>
<li><strong>Parallelizing API calls</strong>: If <a href="https://platform.openai.com/docs/guides/rate-limits/overview">OpenAI API&rsquo;s rate limits</a> and your infrastructure allow, you could send multiple chunks simultaneously. This parallel processing can speed up the overall time it takes to get responses for all chunks. Unless you have access to OpenAI&rsquo;s <code>32k</code> models or need to use small chunk sizes, however, parallelism gains are likely to be minimal.</li>
<li><strong>Caching mechanisms</strong>: If you find yourself sending the same or similar chunks frequently, consider implementing a caching system. By storing ChatGPT&rsquo;s responses for specific chunks, you can retrieve them instantly from the cache the next time, saving both time and API calls.</li>
</ul>
<h2 id="now-what">Now what</h2>
<p>If you found your way here via search, you probably already have a use case in mind. Here are some other (startup) ideas:</p>
<ul>
<li><strong>You&rsquo;re a researcher</strong> who wants to save time by getting short summaries of many lengthy articles.</li>
<li><strong>You&rsquo;re a legal professional</strong> who wants to analyze long contracts by extracting key points or clauses.</li>
<li><strong>You&rsquo;re a financial analyst</strong> who wants to pull a quick overview of trends from a long report.</li>
<li><strong>You&rsquo;re a writer</strong> who wants feedback on a new article or chapter&hellip; without having to actually show it to anyone yet.</li>
</ul>
<p>Do you have a use case I didn&rsquo;t list? <a href="/contact">Let me know about it!</a> In the meantime, have fun sending lots of text to ChatGPT.</p>
]]></content></entry><entry><title type="html">Optimizing text for ChatGPT: NLP and text pre-processing techniques</title><link href="https://victoria.dev/posts/optimizing-text-for-chatgpt-nlp-and-text-pre-processing-techniques/"/><id>https://victoria.dev/posts/optimizing-text-for-chatgpt-nlp-and-text-pre-processing-techniques/</id><author><name>Victoria Drake</name></author><published>2023-09-19T04:46:36-05:00</published><updated>2023-09-19T04:46:36-05:00</updated><content type="html"><![CDATA[<p>In order for chatbots and voice assistants to be helpful, they need to be able to take in and understand our instructions in plain language using Natural Language Processing (NLP). ChatGPT relies on a blend of advanced algorithms and text preprocessing methods to make sense of our words. But just throwing a wall of text at it can be inefficient &ndash; you might be dumping in a lot of noise with that signal and hitting the text input limit.</p>
<p>Text preprocessing can help shorten and refine your input, ensuring that ChatGPT can grasp the essence without getting overwhelmed. In this article, we&rsquo;ll explore these techniques, understand their importance, and see how they make your interactions with tools like ChatGPT more reliable and productive.</p>
<h2 id="text-preprocessing">Text preprocessing</h2>
<p>Text preprocessing prepares raw text data for analysis by NLP models. Generally, it distills everyday text (like full sentences) to make it more manageable or concise and meaningful. Techniques include:</p>
<ul>
<li><strong>Tokenization:</strong> splitting up text by sentences or paragraphs. For example, you could break down a lengthy legal document into individual clauses or sentences.</li>
<li><strong>Extractive summarization:</strong> selecting key sentences from the text and discarding the rest. Instead of reading an entire 10-page document, extractive summarization could pinpoint the most crucial sentences and give you a concise overview without delving into the details.</li>
<li><strong>Abstractive summarization:</strong> generating a concise representation of the text content, for example, turning a 10-page document into a brief paragraph that captures the document&rsquo;s essence in new wording.</li>
<li><strong>Pruning:</strong> removing redundant or less relevant parts. For example, in a verbose email thread, pruning can help remove all the greetings, sign-offs, and other repetitive elements, leaving only the core content for analysis.</li>
</ul>
<p>While all these techniques can help reduce the size of raw text data, some of these techniques are easier to apply to general use cases than others. Let&rsquo;s examine how text preprocessing can help us send a large amount of text to ChatGPT.</p>
<h2 id="tokenization-and-chatgpt-input-limits">Tokenization and ChatGPT input limits</h2>
<p>In the realm of Natural Language Processing (NLP), a token is the basic unit of text that a system reads. At its simplest, you can think of a token as a word, but depending on the language and the specific tokenization method used, a token can represent a word, part of a word, or even multiple words.</p>
<p>While in English we often equate tokens with words, in NLP, the concept is broader. A token can be as short as a single character or as long as a word. For example, with word tokenization, the sentence &ldquo;Unicode characters such as emojis are not indivisible. ✂️&rdquo; can be broken down into tokens like this: [&ldquo;Unicode&rdquo;, &ldquo;characters&rdquo;, &ldquo;such&rdquo;, &ldquo;as&rdquo;, &ldquo;emojis&rdquo;, &ldquo;are&rdquo;, &ldquo;not&rdquo;, &ldquo;indivisible&rdquo;, &ldquo;.&rdquo;, &ldquo;✂️&rdquo;]</p>
<p>In another form called Byte-Pair Encoding (BPE), the same sentence is tokenized as: [&ldquo;Un&rdquo;, &ldquo;ic&rdquo;, &ldquo;ode&rdquo;, &quot; characters&quot;, &quot; such&quot;, &quot; as&quot;, &quot; em, &ldquo;oj&rdquo;, &ldquo;is&rdquo;, &quot; are&quot;, &quot; not&quot;, &quot; ind&quot;, &ldquo;iv&rdquo;, &ldquo;isible&rdquo;, &ldquo;.&rdquo;, &quot; �&quot;, &ldquo;�️&rdquo;]. The emoji itself is split into tokens containing its underlying bytes.</p>
<p>Depending on the ChatGPT model chosen, your text input size is restricted by tokens. <a href="https://platform.openai.com/docs/models">Here are the docs containing current limits</a>. BPE is used by ChatGPT to determine token count, and we&rsquo;ll discuss it more thoroughly later. First, we can programmatically apply some preprocessing techniques to reduce our text input size and use fewer tokens.</p>
<h2 id="a-general-programmatic-approach">A general programmatic approach</h2>
<p>For a general approach that can be applied programmatically, pruning is a suitable preprocessing technique. One form is <strong>stop word removal,</strong> or removing common words that might not add significant meaning in certain contexts. For example, consider the sentence:</p>
<p>&ldquo;I always enjoy having pizza with my friends on weekends.&rdquo;</p>
<p>Stop words are often words that don&rsquo;t carry significant meaning on their own in a given context. In this sentence, words like &ldquo;I&rdquo;, &ldquo;always&rdquo;, &ldquo;enjoy&rdquo;, &ldquo;having&rdquo;, &ldquo;with&rdquo;, &ldquo;my&rdquo;, &ldquo;on&rdquo; are considered stop words.</p>
<p>After removing the stop words, the sentence becomes:</p>
<p>&ldquo;pizza friends weekends.&rdquo;</p>
<p>Now, the sentence is distilled to its key components, highlighting the main subject (pizza) and the associated context (friends and weekends). If you find yourself wishing you could convince people to do this in real life (<em>cough</em>meetings<em>cough</em>)&hellip; you aren&rsquo;t alone.</p>
<p>Stop word removal is straightforward to apply programmatically: given a list of stop words, examine some text input to see if it contains any of the stop words on your list. If it does, remove them, then return the altered text.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">clean_stopwords</span>(text: str) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    stopwords <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;an&#34;</span>, <span style="color:#e6db74">&#34;and&#34;</span>, <span style="color:#e6db74">&#34;at&#34;</span>, <span style="color:#e6db74">&#34;but&#34;</span>, <span style="color:#e6db74">&#34;how&#34;</span>, <span style="color:#e6db74">&#34;in&#34;</span>, <span style="color:#e6db74">&#34;is&#34;</span>, <span style="color:#e6db74">&#34;on&#34;</span>, <span style="color:#e6db74">&#34;or&#34;</span>, <span style="color:#e6db74">&#34;the&#34;</span>, <span style="color:#e6db74">&#34;to&#34;</span>, <span style="color:#e6db74">&#34;what&#34;</span>, <span style="color:#e6db74">&#34;will&#34;</span>]
</span></span><span style="display:flex;"><span>    tokens <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>    clean_tokens <span style="color:#f92672">=</span> [t <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> tokens <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> t <span style="color:#f92672">in</span> stopwords]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(clean_tokens)
</span></span></code></pre></div><p>To see how effective stop word removal can be, I took the entire text of my <a href="https://techleaderdocs.com">Tech Leader Docs newsletter</a> (17,230 words consisting of 104,892 characters) and processed it using the above function. How effective was it? The resulting text contained 89,337 characters, which is about a 15% reduction in size.</p>
<p>Other pruning techniques can also be applied programmatically. Removing punctuation, numbers, HTML tags, URLs and email addresses, or non-alphabetical characters are all valid pruning techniques that can be straightforward to apply. Here is a function that does just that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">clean_text</span>(text):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Remove URLs</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;http\S+&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, text)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Remove email addresses</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\S+@\S+&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, text)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Remove everything that&#39;s not a letter (a-z, A-Z)</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;[^a-zA-Z\s]&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, text)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Remove whitespace, tabs, and new lines</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(text<span style="color:#f92672">.</span>split())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> text
</span></span></code></pre></div><p>What measure of length reduction might we be able to get from this additional processing? Applying these techniques to the remaining characters of Tech Leader Docs results in just 75,217 characters; an overall reduction of about 28% from the original text.</p>
<p>More opinionated pruning, such as removing short words or specific words or phrases, can be tailored to a specific use case. These don&rsquo;t lend themselves well to general functions, however.</p>
<p>Now that you have some text processing techniques in your toolkit, let&rsquo;s look at how a reduction in characters translates to fewer tokens used when it comes to ChatGPT. To understand this, we&rsquo;ll examine Byte-Pair Encoding.</p>
<h2 id="byte-pair-encoding-bpe">Byte-Pair Encoding (BPE)</h2>
<p>Byte-Pair Encoding (BPE) is a subword tokenization method. It was originally introduced for data compression but has since been adapted for tokenization in NLP tasks. It allows representing common words as tokens and splits more rare words into subword units. This enables a balance between character-level and word-level tokenization.</p>
<p>Let&rsquo;s make that more concrete. Imagine you have a big box of LEGO bricks, and each brick represents a single letter or character. You&rsquo;re tasked with building words using these LEGO bricks. At first, you might start by connecting individual bricks to form words. But over time, you notice that certain combinations of bricks (or characters) keep appearing together frequently, like &ldquo;th&rdquo; in &ldquo;the&rdquo; or &ldquo;ing&rdquo; in &ldquo;running.&rdquo;</p>
<p>BPE is like a smart LEGO-building buddy who suggests, &ldquo;Hey, since &rsquo;th&rsquo; and &lsquo;ing&rsquo; keep appearing together a lot, why don&rsquo;t we glue them together and treat them as a single piece?&rdquo; This way, the next time you want to build a word with &ldquo;the&rdquo; or &ldquo;running,&rdquo; you can use these glued-together pieces, making the process faster and more efficient.</p>
<p>Colloquially, the BPE algorithm looks like this:</p>
<ol>
<li>Start with single characters.</li>
<li>Observe which pairs of characters frequently appear together.</li>
<li>Merge those frequent pairs together to treat them as one unit.</li>
<li>Repeat this process until you have a mix of single characters and frequently occurring character combinations.</li>
</ol>
<p>BPE is a particularly powerful tokenization method, especially when dealing with diverse and extensive vocabularies. Here&rsquo;s why:</p>
<ul>
<li>Handling rare words: Traditional tokenization methods might stumble upon rare or out-of-vocabulary words. BPE, with its ability to break words down into frequent subword units, can represent these words without needing to have seen them before.</li>
<li>Efficiency: By representing frequent word parts as single tokens, BPE can compress text more effectively. This is especially useful for models like ChatGPT, where token limits apply.</li>
<li>Adaptability: BPE is language-agnostic. It doesn&rsquo;t rely on predefined dictionaries or vocabularies. Instead, it learns from the data, making it adaptable to various languages and contexts.</li>
</ul>
<p>In essence, BPE strikes a balance, offering the granularity of character-level tokenization and the context-awareness of word-level tokenization. This hybrid approach ensures that NLP models like ChatGPT can understand a wide range of texts while maintaining computational efficiency.</p>
<h2 id="sending-lots-of-text-to-chatgpt">Sending lots of text to ChatGPT</h2>
<p>At time of writing, a message to ChatGPT via its web interface has a maximum token length of 4,096 tokens. If we assume the prior mentioned percent reduction as an average, this means you could reduce text of up to 5,712 tokens down to the appropriate size with just text preprocessing.</p>
<p>What about when this isn&rsquo;t enough? Beyond text preprocessing, larger input can be sent in chunks using the OpenAI API. In my next post, I&rsquo;ll show you how to build a Python module that does exactly that.</p>
]]></content></entry><entry><title type="html">Leading with a cybersecurity mindset</title><link href="https://victoria.dev/posts/leading-with-a-cybersecurity-mindset/"/><id>https://victoria.dev/posts/leading-with-a-cybersecurity-mindset/</id><author><name>Victoria Drake</name></author><published>2021-07-27T04:26:26-04:00</published><updated>2021-07-27T04:26:26-04:00</updated><content type="html"><![CDATA[<p>Times and technologies change, but a few good ideas are still the same. With consistent application, a handful of wise practices can help deter a slew of cybersecurity attacks. While implementation differs across applications, learning to lead development teams with a cybersecurity mindset boils down to a few fundamental concepts:</p>
<ul>
<li>Be a bad guy</li>
<li>Fail secure</li>
<li>Practice software minimalism</li>
</ul>
<p>A slight change in thinking can create a sea change in security. Let&rsquo;s examine how.</p>
<h2 id="lets-be-bad-guys">Let&rsquo;s be bad guys</h2>
<p>When it comes to cybersecurity, I take a pragmatic approach. There aren&rsquo;t enough sheaves of NIST recommendations in the world to help you if you aren&rsquo;t accustomed to thinking like the bad guy. To best lead your team to defend against hacking, first know how to hack yourself.</p>
<p>A perusal of the resources linked at the end of this article can help you with a starting point, as will general consideration of your application through the lens of an outsider. Are there potentially vulnerable forms or endpoints you might examine first? Is there someone at your company you could call on the phone and surreptitiously get helpful information from? Defense is a difficult position to hold in any battle. If you aren&rsquo;t the first person to consider how your application might be attacked, you&rsquo;ve already lost.</p>
<p>Develop your sense of how to be the bad guy. Every component of software, every interaction, every bit of data, can be useful to the bad guy. The more you hone your ability to consider how a thing can be used for ill, the better able you&rsquo;ll be to protect it.</p>
<p>When looking at information, ask, &ldquo;How can I use this information to gain access to more important information?&rdquo; When considering a user story, ask, &ldquo;What happens if I do something unexpected?&rdquo;</p>
<p>In all things, channel your inner four-year-old. Push all the buttons.</p>
<p>Playing offense on your own application lets you fix vulnerabilities before they happen. That&rsquo;s a luxury you won&rsquo;t get from the real bad guys.</p>
<h2 id="fail-secure">Fail secure</h2>
<p>Every part of a system will fail with 100% certainty on a long enough timescale. Thinking a step ahead can help to ensure that when it does, the one failure doesn&rsquo;t leave your application wide open to others.</p>
<p>To fail secure means that when a system or code fails to perform or does something unexpected, any follow-on effects are halted rather than permitted. This likely takes many forms in many areas of your application, so here are the more common ones I see.</p>
<h3 id="permissions">Permissions</h3>
<p>When gating access, deny by default. This most often takes the form of whitelisting, or colloquially, &ldquo;no one is allowed, except for the people on this list.&rdquo; In terms of code flow, everything should be denied first. Only allow any particular action after proper credentials are verified.</p>
<h3 id="automation">Automation</h3>
<p>For automated workflows such as deployments, ensure each step is dependent on the last. Don&rsquo;t make the (rather common) mistake of connecting actions to triggers that can kick off a workflow before all the necessary pieces are in place. With the smorgasbord of cloud and CI tools available, failure events may not be obvious or noisy.</p>
<p>Be careful to avoid running flows on timed triggers unless they are completely self-contained. Workflows that unpredictably run faster or slower than expected can throw a whole series of events into disarray, leaving processes half-run and states insecure.</p>
<h3 id="exception-handling">Exception handling</h3>
<p>Errors are a frequent gold mine for attackers. Ensure your team&rsquo;s code returns &ldquo;pretty&rdquo; errors with content that you can control. &ldquo;Ugly&rdquo; errors, returned by default by databases, frameworks, etc, try to be helpful by providing lots of debugging information that can be extremely helpful to a hacker.</p>
<h2 id="software-minimalism">Software minimalism</h2>
<p>If your development team doesn&rsquo;t currently have one central source of information when it comes to keeping track of all your application components, here&rsquo;s a tip you really need. In software security, less is more (secure).</p>
<p>The more modular an application is, the better its various components can be isolated, protected, or changed out. With a central source of truth for what all those components are (and preferably one that doesn&rsquo;t rely on manual updates), it&rsquo;s easier to ensure that your application is appropriately minimalist. Dependency managers, such as Pipenv, are a great example.</p>
<p>Few industries besides technology seem to have produced as many acronyms. Philosophies like Don&rsquo;t Repeat Yourself (DRY), Keep It Simple Stupid (KISS), You Aren&rsquo;t Going to Need It (YAGNI), and countless other methodologies all build upon one very basic principle: minimalism. It&rsquo;s a principle that warrants incorporation in every aspect of an application.</p>
<p>There&rsquo;s a reason it takes little skill to shoot the broad side of a barn: barns are rather large, and there&rsquo;s quite a lot of one to hit. Applications bloated by excessive third-party components, repeated code, and unnecessary assets make similarly large targets. The more there is to maintain and protect, the easier it is to hit.</p>
<p>Like Marie Kondo&rsquo;s method for dispatching the inevitable creep of household clutter, you can reduce your application&rsquo;s attack surface by considering each component and asking whether it brings you joy. Do all of this component&rsquo;s functions benefit your application? Is there unnecessary redundancy here? Assess each component and decide how integral it is to the application. Every component is a risk; your job is to decide if it&rsquo;s a worthwhile risk.</p>
<h2 id="bonus-your-personal-yodas">Bonus: your personal Yodas</h2>
<p>With the basic principles of learning to think like the bad guy, failing securely, and practicing software minimalism, you&rsquo;re now ready to steep in the specifics. Keeping the fundamentals in mind can help you lead your team to focus your cybersecurity efforts where it matters most.</p>
<p>No Jedi succeeds without a little help from friends. Whether you&rsquo;re a beginner in the battle against the dark side or a twice-returned-home Jedi Master, these resources provide continuing training and guidance.</p>
<ul>
<li><a href="https://owasp.org/www-project-web-security-testing-guide/">Open Web Application Security Project</a></li>
<li><a href="https://www.nist.gov/cybersecurity">National Institute of Standards and Technology (NIST): Cybersecurity</a></li>
<li><a href="https://owasp.org/www-project-proactive-controls/">OWASP Proactive Controls</a></li>
<li><a href="https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/">OWASP Secure Coding Practices</a></li>
<li><a href="https://owasp.org/www-project-web-security-testing-guide/">OWASP Web Security Testing Guide</a></li>
<li><a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-30r1.pdf">NIST Special Publication 800-30: Guide for conducting risk assessments</a></li>
<li><a href="https://www.nsa.gov/Press-Room/Cybersecurity-Advisories-Guidance/">NSA’S Cybersecurity Advisories &amp; Technical Guidance</a></li>
</ul>
<p>I hope you find these thought systems helpful! If you find your interest piqued as well, you can read more of what <a href="/tags/cybersecurity">I&rsquo;ve written about cybersecurity here</a>.</p>
]]></content></entry><entry><title type="html">Do I raise or return errors in Python?</title><link href="https://victoria.dev/posts/do-i-raise-or-return-errors-in-python/"/><id>https://victoria.dev/posts/do-i-raise-or-return-errors-in-python/</id><author><name>Victoria Drake</name></author><published>2021-02-09T05:34:48-05:00</published><updated>2021-02-09T05:34:48-05:00</updated><content type="html"><![CDATA[<p>I hear this question a lot: &ldquo;Do I raise or return this error in Python?&rdquo;</p>
<p>The right answer will depend on the goals of your application logic. You want to <strong>ensure your Python code doesn&rsquo;t fail silently,</strong> saving you and your teammates from having to hunt down deeply entrenched errors.</p>
<p>Here&rsquo;s the difference between <code>raise</code> and <code>return</code> when handling failures in Python.</p>
<h2 id="when-to-raise">When to raise</h2>
<blockquote>
<p>The <code>raise</code> statement allows the programmer to force a specific exception to occur. (<a href="https://docs.python.org/3/tutorial/errors.html#raising-exceptions">8.4 Raising Exceptions</a>)</p></blockquote>
<p>Use <code>raise</code> when you know you want a specific behavior, such as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">TypeError</span>(<span style="color:#e6db74">&#34;Wanted strawberry, got grape.&#34;</span>)
</span></span></code></pre></div><p>Raising an exception terminates the flow of your program, allowing the exception to bubble up the call stack. In the above example, this would let you explicitly handle <code>TypeError</code> later. If <code>TypeError</code> goes unhandled, code execution stops and you&rsquo;ll get an <em>unhandled exception</em> message.</p>
<p>Raise is useful in cases where you want to define a certain behavior to occur. For example, you may choose to disallow certain words in a text field:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;raisins&#34;</span> <span style="color:#f92672">in</span> text_field:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;That word is not allowed here&#34;</span>)
</span></span></code></pre></div><p>Raise takes an instance of an exception, or a derivative of the <a href="https://docs.python.org/3/library/exceptions.html#Exception">Exception class</a>. Here are all of <a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions">Python&rsquo;s built-in exceptions</a>.</p>
<p>Raise can help you avoid writing functions that fail silently. For example, this code will not raise an exception if <code>JAM</code> doesn&rsquo;t exist:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sandwich_or_bust</span>(bread: str) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    jam <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>getenv(<span style="color:#e6db74">&#34;JAM&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> bread <span style="color:#f92672">+</span> str(jam) <span style="color:#f92672">+</span> bread
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> sandwich_or_bust(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\U0001F35E</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(s)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Prints &#34;🍞None🍞&#34; which is not very tasty.</span>
</span></span></code></pre></div><p>To cause the <code>sandwich_or_bust()</code> function to actually bust, add a <code>raise</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sandwich_or_bust</span>(bread: str) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    jam <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>getenv(<span style="color:#e6db74">&#34;JAM&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> jam:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;There is no jam. Sad bread.&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> bread <span style="color:#f92672">+</span> str(jam) <span style="color:#f92672">+</span> bread
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> sandwich_or_bust(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\U0001F35E</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(s)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ValueError: There is no jam. Sad bread.</span>
</span></span></code></pre></div><p>Any time your code interacts with an external variable, module, or service, there is a possibility of failure. You can use <code>raise</code> in an <code>if</code> statement to help ensure those failures aren&rsquo;t silent.</p>
<h3 id="raise-in-try-and-except">Raise in <code>try</code> and <code>except</code></h3>
<p>To handle a possible failure by taking an action if there is one, use a <code>try</code> &hellip; <code>except</code> statement.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    s <span style="color:#f92672">=</span> sandwich_or_bust(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\U0001F35E</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(s)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>    buy_more_jam()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span>
</span></span></code></pre></div><p>This lets you <code>buy_more_jam()</code> before re-raising the exception. If you want to propagate a caught exception, use <code>raise</code> without arguments to avoid possible loss of the stack trace.</p>
<p>If you don&rsquo;t know that the exception will be a <code>ValueError</code>, you can also use a bare <code>except:</code> or catch any derivative of the <code>Exception</code> class with <code>except Exception:</code>. Whenever possible, it&rsquo;s better to raise and handle exceptions explicitly.</p>
<p>Use <code>else</code> for code to execute if the <code>try</code> does not raise an exception. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    s <span style="color:#f92672">=</span> sandwich_or_bust(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\U0001F35E</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    print(s)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>    buy_more_jam()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Congratulations on your sandwich.&#34;</span>)
</span></span></code></pre></div><p>You could also place the print line within the <code>try</code> block, however, this is less explicit.</p>
<h2 id="when-to-return">When to return</h2>
<p>When you use <code>return</code> in Python, you&rsquo;re giving back a value. A function returns to the location it was called from.</p>
<p>While it&rsquo;s more idiomatic to <code>raise</code> errors in Python, there may be occasions where you find <code>return</code> to be more applicable.</p>
<p>For example, if your Python code is interacting with other components that do not handle exception classes, you may want to return a message instead. Here&rsquo;s an example using a <code>try</code> &hellip; <code>except</code> statement:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Union
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">share_sandwich</span>(sandwich: int) <span style="color:#f92672">-&gt;</span> Union[float, <span style="color:#a6e22e">Exception</span>]:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        bad_math <span style="color:#f92672">=</span> sandwich <span style="color:#f92672">/</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> bad_math
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> e
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> share_sandwich(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>print(s)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Prints &#34;division by zero&#34;</span>
</span></span></code></pre></div><p>Note that when you return an <code>Exception</code> class object, you&rsquo;ll get a representation of its associated value, usually the first item in its list of arguments. In the example above, this is the string explanation of the exception. In some cases, it may be a tuple with other information about the exception.</p>
<p>You may also use <code>return</code> to give a specific error object, such as with <a href="https://docs.djangoproject.com/en/3.1/ref/request-response/#httpresponse-subclasses"><code>HttpResponseNotFound</code> in Django</a>. For example, you may want to return a <code>404</code> instead of a <code>403</code> for security reasons:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> object<span style="color:#f92672">.</span>owner <span style="color:#f92672">!=</span> request<span style="color:#f92672">.</span>user:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> HttpResponseNotFound
</span></span></code></pre></div><p>Using <code>return</code> can help you write appropriately noisy code when your function is expected to give back a certain value, and when interacting with outside elements.</p>
<h2 id="the-most-important-part">The most important part</h2>
<p>Silent failures create some of the most frustrating bugs to find and fix. You can help create a pleasant development experience for yourself and your team by using <code>raise</code> and <code>return</code> to <strong>ensure that errors are handled in your Python code.</strong></p>
<p>I write about good development practices and how to improve productivity as a software developer. You can get these tips right in your inbox by signing up below!</p>
<div class="form-container centered" style="border:none; box-shadow: none; background-color:transparent !important;" id="subscribe">
    <iframe src="https://victoriadrake.substack.com/embed" width="480" height="320" style="border:1px solid #EEE; background-color:transparent !important;" frameborder="0" scrolling="no"></iframe>
</div>
]]></content></entry><entry><title type="html">Add search to Hugo static sites with Lunr</title><link href="https://victoria.dev/posts/add-search-to-hugo-static-sites-with-lunr/"/><id>https://victoria.dev/posts/add-search-to-hugo-static-sites-with-lunr/</id><author><name>Victoria Drake</name></author><published>2021-01-26T09:25:17-05:00</published><updated>2021-01-26T09:25:17-05:00</updated><content type="html"><![CDATA[<p>Yes, you <em>can</em> have an interactive search feature on your static site! No need for servers or paid subscriptions here. Thanks to the open source <a href="https://lunrjs.com/">Lunr</a> and the power of <a href="https://gohugo.io/">Hugo static site generator</a>, you can create a client-side search index with just a template and some JavaScript.</p>
<p>A number of my readers have been kind enough to tell me that you find my blog useful, but there&rsquo;s something that you don&rsquo;t know. Up until I recently implemented a search feature on <a href="/">victoria.dev</a>, I had been my own unhappiest user.</p>
<p>My blog exists for all to read, but it&rsquo;s also my own personal Internet brain. I frequently pull up a post I&rsquo;ve written when trying to re-discover some bit of knowledge that I may have had the foresight to record. Without a search, finding it again took a few clicks and more than a few guesses. Now, all my previous discoveries are conveniently at my fingertips, ready to be rolled into even more future work.</p>
<p>If you&rsquo;d like to make your own personal Internet brain more useful, here&rsquo;s how you can implement your own search feature on your static Hugo site.</p>
<h2 id="get-lunr">Get Lunr</h2>
<p>While you can <a href="https://lunrjs.com/guides/getting_started.html">install lunr.js</a> via npm or include it from a CDN, I chose to vendorize it to minimize network impact. This means I host it from my own site files by placing the library in Hugo&rsquo;s <code>static</code> directory.</p>
<p>You can save your visitors some bandwidth by minifying <code>lunr.js</code>, which I did just by <a href="https://github.com/olivernn/lunr.js">downloading lunr.js from source</a> and using the <a href="https://github.com/olback/es6-css-minify">JS &amp; CSS Minifier Visual Studio Code extension</a> on the file. That brought the size down roughly 60% from 97.5 KB to 39.35 KB.</p>
<p>Save this as <code>static/js/lunr.min.js</code>.</p>
<h2 id="create-a-search-form-partial">Create a search form partial</h2>
<p>To easily place your search form wherever you like on your site, create the form as a partial template at <code>layouts/partials/search-form.html</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">action</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{{ with .GetPage &#34;/search&#34; }}{{.Permalink}}{{end}}&#39;</span> <span style="color:#a6e22e">method</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;get&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">hidden</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-input&#34;</span>&gt;Search site&lt;/<span style="color:#f92672">label</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-input&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;query&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Type here to search&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">form</span>&gt;
</span></span></code></pre></div><p>Include your search form in other templates with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{{ partial &#34;search-form.html&#34; . }}
</span></span></code></pre></div><h2 id="create-a-search-page">Create a search page</h2>
<p>For your search to be useful, you&rsquo;ll need a way to trigger one. You can create a (static!) <code>/search</code> page that responds to a GET request, runs your search, and displays results.</p>
<p>Here&rsquo;s how to create a Hugo template file for a search page and get it to render.</p>
<p>Create <code>layouts/search/list.html</code> with the following minimum markup, assuming you&rsquo;re <a href="https://gohugo.io/templates/base">inheriting from a base template</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{ define &#34;main&#34; }}
</span></span><span style="display:flex;"><span>{{ partial &#34;search-form.html&#34; . }}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;results&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        Enter a keyword above to search this site.
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>{{ end }}
</span></span></code></pre></div><p>In order to get Hugo to render the template, a matching content file must be available. Create <code>content/search/_index.md</code> to satisfy this requirement. The file just needs minimal <a href="https://gohugo.io/content-management/front-matter">front matter</a> to render:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: Search me!
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><p>You can run <code>hugo serve</code> and navigate to <code>/search</code> to see if everything builds as expected.</p>
<p>A few libraries exist to help you build a search index and implement Lunr. You can find them <a href="https://gohugo.io/tools/search/">here on the Hugo site</a>. If you want to fully understand the process, however, you&rsquo;ll find it&rsquo;s not complicated do this without additional dependencies, thanks to the power of Hugo&rsquo;s static site processing.</p>
<h2 id="build-your-search-index">Build your search index</h2>
<p>Here&rsquo;s how to build an index for Lunr to search using Hugo&rsquo;s template rendering power. Use <code>range</code> to loop over the pages you want to make searchable, and capture your desired parameters in an array of documents. One way to do this is to create <code>layouts/partials/search-index.html</code> with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>window.<span style="color:#a6e22e">store</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// You can specify your blog section only:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    {{ <span style="color:#a6e22e">range</span> <span style="color:#a6e22e">where</span> .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Pages</span> <span style="color:#e6db74">&#34;Section&#34;</span> <span style="color:#e6db74">&#34;posts&#34;</span> }}
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// For all pages in your site, use &#34;range .Site.Pages&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// You can use any unique identifier here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#34;{{ .Permalink }}&#34;</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// You can customize your searchable fields using any .Page parameters
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;title&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;{{ .Title  }}&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;tags&#34;</span><span style="color:#f92672">:</span> [{{ <span style="color:#a6e22e">range</span> .<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">Tags</span> }}<span style="color:#e6db74">&#34;{{ . }}&#34;</span>,{{ <span style="color:#a6e22e">end</span> }}],
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;content&#34;</span><span style="color:#f92672">:</span> {{ .<span style="color:#a6e22e">Content</span> <span style="color:#f92672">|</span> <span style="color:#a6e22e">plainify</span> }}, <span style="color:#75715e">// Strip out HTML tags
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;url&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;{{ .Permalink }}&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {{ <span style="color:#a6e22e">end</span> }}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- Include Lunr and code for your search function,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">which you&#39;ll write in the next section --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/lunr.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/search.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><p>When Hugo renders your site, it will build your search index in much the same way as <a href="https://gohugo.io/templates/lists#what-is-a-list-page-template">a List page</a> is built, creating a document for each page with its parameters.</p>
<p>The last piece of the puzzle is the code to handle the search process: taking the search query, getting Lunr to perform the search, and displaying the results.</p>
<h2 id="perform-the-search-and-show-results">Perform the search and show results</h2>
<p>Create <code>static/js/search.js</code> to hold the JavaScript that ties it all together. This file has three main tasks: get the search query, perform the search with Lunr, and display the results.</p>
<h3 id="get-query-parameters-with-javascript">Get query parameters with JavaScript</h3>
<p>This part&rsquo;s straightforward thanks to <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">URLSearchParams</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">params</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URLSearchParams</span>(window.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">search</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">query</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;q&#39;</span>)
</span></span></code></pre></div><h3 id="search-for-the-query-with-lunr">Search for the query with Lunr</h3>
<p>Define and configure an <a href="https://lunrjs.com/guides/getting_started.html#creating-an-index">index for Lunr</a>. This tells Lunr what you&rsquo;d like to search with, and you can optionally <code>boost</code> elements that are more important.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">idx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">lunr</span>(<span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Search these fields
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">ref</span>(<span style="color:#e6db74">&#39;id&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">field</span>(<span style="color:#e6db74">&#39;title&#39;</span>, {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">boost</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">15</span>
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">field</span>(<span style="color:#e6db74">&#39;tags&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">field</span>(<span style="color:#e6db74">&#39;content&#39;</span>, {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">boost</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Add the documents from your search index to
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// provide the data to idx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> window.<span style="color:#a6e22e">store</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">add</span>({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">id</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">key</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> window.<span style="color:#a6e22e">store</span>[<span style="color:#a6e22e">key</span>].<span style="color:#a6e22e">title</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">tags</span><span style="color:#f92672">:</span> window.<span style="color:#a6e22e">store</span>[<span style="color:#a6e22e">key</span>].<span style="color:#a6e22e">category</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">content</span><span style="color:#f92672">:</span> window.<span style="color:#a6e22e">store</span>[<span style="color:#a6e22e">key</span>].<span style="color:#a6e22e">content</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>You can then execute the search and store results with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">results</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">idx</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">query</span>)
</span></span></code></pre></div><h3 id="display-results">Display results</h3>
<p>You&rsquo;ll need a function that builds a list of results and displays them on your search page. Recall the <code>id</code> you gave your <code>ul</code> element in <code>layouts/search/list.html</code> and store it as a variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">searchResults</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;results&#39;</span>)
</span></span></code></pre></div><p>If a search results in some results (🥁), you can iterate over them and build a <code>&lt;li&gt;</code> element for each one.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">results</span>.<span style="color:#a6e22e">length</span>) { <span style="color:#75715e">// Length greater than 0 is truthy
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">resultList</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">results</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// Use the unique ref from the results list to get the full item
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#75715e">// so you can build its &lt;li&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">item</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">store</span>[<span style="color:#a6e22e">results</span>[<span style="color:#a6e22e">n</span>].<span style="color:#a6e22e">ref</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">resultList</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;&lt;li&gt;&lt;p&gt;&lt;a href=&#34;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">url</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;/a&gt;&lt;/p&gt;&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// Add a short clip of the content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#a6e22e">resultList</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;&lt;p&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">content</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">150</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;...&lt;/p&gt;&lt;/li&gt;&#39;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">searchResults</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">resultList</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>For each of your results, this produces a list item similar to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;.../blog/add-search-to-hugo-with-lunr/&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        Add search to Hugo static sites with Lunr
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;Yes, you can have an interactive search feature on your static site!...&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">li</span>&gt;
</span></span></code></pre></div><p>If there are no results, ham-handedly insert a message instead.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">searchResults</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;No results found.&#39;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="full-code-for-searchjs">Full code for search.js</h3>
<p>Here&rsquo;s what <code>static/js/search.js</code> could look like in full.</p>
<details>
<summary>search.js full code</summary>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"></code></pre></div></details>
<h2 id="make-it-go">Make it go</h2>
<p>You now have Lunr, the search index, and the code that displays results. Since these are all included in <code>layouts/partials/search-index.html</code>, add this partial on all pages with a search form. In your page footer, place:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{{ partial &#34;search-index.html&#34; . }}
</span></span></code></pre></div><p>You can see what this looks like when it&rsquo;s all put together by trying it out <a href="/blog">on my blog</a>.</p>
<h2 id="make-it-go-faster">Make it go faster</h2>
<p>Since your site is static, it&rsquo;s possible to <a href="https://lunrjs.com/guides/index_prebuilding.html">pre-build your search index</a> as a JSON data file for Lunr to load. This is where those <a href="https://gohugo.io/tools/search/">aforementioned libraries</a> may be helpful, since a JSON-formatted search index would need to be built outside of running <code>hugo</code> to generate your site.</p>
<p>You can maximize your search speed by minifying assets, and minimizing computationally expensive or blocking JavaScript in your code.</p>
<h2 id="static-sites-get-search-too">Static sites get search, too!</h2>
<p>I hope this helps you make your Internet brain more useful for yourself and others, too! Don&rsquo;t worry if you haven&rsquo;t got the time to implement a search feature today &ndash; you can find this tutorial again when you visit <a href="/blog">victoria.dev</a> and search for this post! 🥁</p>
]]></content></entry><entry><title type="html">How to get hired as a software developer</title><link href="https://victoria.dev/posts/how-to-get-hired-as-a-software-developer/"/><id>https://victoria.dev/posts/how-to-get-hired-as-a-software-developer/</id><author><name>Victoria Drake</name></author><published>2021-01-12T05:50:53-05:00</published><updated>2021-01-12T05:50:53-05:00</updated><content type="html"><![CDATA[<p>I&rsquo;m asked this question a lot, so let me be the first to give you the good news: there&rsquo;s no one right answer. As general tech-literacy increases, the culture of the coding industry is steadily, thankfully, moving away from a checklist approach. Instead of degrees and pre-requisites when it comes to deciding whether you&rsquo;re qualified to be hired as a software developer, companies (including my own) are far more concerned with just one question. <strong>What can you do?</strong></p>
<p>There are some general best practices that will make you a far more attractive hire than the majority of applicants, and I&rsquo;ll discuss those in this post. For the most part, however, demonstrating what you&rsquo;re capable of is the best way to increase your chances of getting to the interview and beyond. Here&rsquo;s how to get hired as a software developer.</p>
<h2 id="first-build-projects">First, build projects</h2>
<p>Companies who are primarily focused on getting products built want to see that you&rsquo;ve built products. They don&rsquo;t need to be flashy or for-profit, but they do need to work. I&rsquo;m far more likely to consider a candidate with a colorful bouquet of working code in their GitHub or GitLab or CodePen portfolio. Here are some basic ideas to get you started:</p>
<ul>
<li>Command line utilities that help with tedious tasks, like <a href="/blog/batch-renaming-images-including-image-resolution-with-awk/">renaming image files</a></li>
<li><a href="/blog/hugo-vs-jekyll-an-epic-battle-of-static-site-generator-themes/">Themes</a> for static site generators like Hugo or Jekyll</li>
<li>Automation tools, such as for <a href="/posts/go-automate-your-github-profile-readme/">GitHub Actions</a></li>
</ul>
<p>The best projects you could showcase are ones directly related to the specialty you want to apply for. Show that you have competency with the fundamentals. For instance, if you see yourself focusing on front end, demonstrate that you can build interactive web pages with no fancier tools than HTML, CSS, and vanilla JS. For back end focused developers, show that you know how to create a fundamental tool like an API for a service on a local server. Want to be well-rounded? Create an API with a web page UI.</p>
<p>Spend some time creating a good README. Use screenshots, highlight code snippets, include well-written instructions for local set up. Show that you care about and fully understand your own work.</p>
<p>Explore specific frameworks and libraries if they interest you, but keep in mind that those won&rsquo;t be interesting to a company unless the company already wants to use that framework.</p>
<p>You maximize your chances of getting hired by demonstrating that you already have the ability to learn on your own, build, and then present projects to the world. Out of everything else in this article, this is the one fundamental trait that a company won&rsquo;t want to have to teach you.</p>
<h2 id="next-stand-out">Next, stand out</h2>
<p>Familiarity with the following topics, along with demonstrating that understanding in your own code, will put you miles ahead of most applicants.</p>
<h3 id="reusable-code">Reusable code</h3>
<p>Companies that build products are concerned with getting the most bang for their buck. This is the same idea as wanting to save yourself time when you&rsquo;re creating something individually. If you put a week of effort into building something, it would be nice if you could keep easily using it for a long time afterwards. How can you maximize the return on your efforts?</p>
<p>Be familiar with DRY code. Avoid creating highly customized pieces that only fit a particular use case, peppered with hard-coded variables and dependent on a particular input structure. Avoid writing code that is hard to update in the future. Recognize when you&rsquo;re writing a script or library that could apply in many different situations, and understand how to turn it into a reusable module.</p>
<h3 id="types-and-mutability">Types and mutability</h3>
<p>Besides building projects, debugging them can be a company&rsquo;s most expensive task. It takes a lot of time to hunt down and fix bugs, but you can help reduce that cost by understanding the subtler ways that a lot of bugs occur. Understanding types and mutability &ndash; whether and how an object can be changed &ndash; can help open the door to even greater technical proficiency.</p>
<p>Get familiar with at least one type system. If there&rsquo;s a linter available for your language, use it. Understand how immutable and mutable objects work in the language you use. Be able to describe specific use cases for either one. Understand at a general level how mutability impacts system resources, the difference between referencing and copying, and what it means to be thread-safe.</p>
<h3 id="follow-on-effects">Follow-on effects</h3>
<p>Keep in mind that organizations are made up of people. When you work together with colleagues, your work has an effect on someone else&rsquo;s. Being aware of these effects and demonstrating conscientiousness in this area will help show potential employers that you&rsquo;d benefit the team as a whole.</p>
<p>Consider the second and third-order effects of code you write. Avoid writing code that will unnecessarily slow down a larger system. Understand what blocking means and how to use concurrency or parallelism in your project. Include your thoughts on follow-on effects in your READMEs. Show that you always have the larger project, effort, costs, or organization in mind.</p>
<h2 id="other-nice-to-haves">Other nice-to-haves</h2>
<p>If you&rsquo;ve fully taken advantage of the points above, you&rsquo;re most of the way to getting hired already. Seal the deal with these easy wins.</p>
<h3 id="be-a-friendly-open-source-participant">Be a friendly open source participant</h3>
<p>There&rsquo;s no better way to show a potential employer you can work well on a team than by providing plenty of examples. Get involved with open source projects, contribute features and fixes, and interact with contributors and maintainers. Create a real-life simulation for your future colleagues that leaves no doubt about what you&rsquo;d be like to work with. The further back this history goes, the better, so start right away.</p>
<h3 id="communicate-with-care">Communicate with care</h3>
<p>If you&rsquo;re participating in open source or working remotely, most of your communication with your colleagues is going to take place online in text. Without facial expressions, tone or inflection, this form of communication leaves a lot to be desired. Some extra care on your part can help make sure your message always comes across as intended.</p>
<p>Get into a habit of drafting most everything you write, especially for long-form communication. Putting yourself in the mindset of creating a draft first lets you take all the time you need to craft your message. You can make sure you&rsquo;re choosing appropriate words and coming across with the emotions you intend to convey. Feeling hurried? Remember the golden rule of online communication: you <em>never</em> need to reply right away. Take a breath, then take your time.</p>
<h2 id="finally-use-your-imagination">Finally, use your imagination</h2>
<p>Software developers are creative people by necessity. Before you can write code, build a project, or design a page, you first have to be able to imagine it! So put that skill to good use.</p>
<p>In every application, every email, every chat message with your potential employer, imagine yourself in their position. What do they care about right now? What current goals does the company have? What information about yourself can you share that would make them feel comfortable hiring you?</p>
<p>Take your best guess, and then ask if you got it right. &ldquo;I think the company is looking for someone to [insert guess here], is that accurate?&rdquo; Show that you have both the capability to anticipate future needs and the desire to identify and solve them.</p>
<h2 id="get-yourself-hired">Get yourself hired</h2>
<p>Admittedly, this post is my own wishlist. Good candidates for software development positions are hard to come by, and people who can rightly say they do everything above are rare. I don&rsquo;t think the discrepancy is due to a lack of ability; perhaps just a lack of information.</p>
<p>I&rsquo;ve seen both sides of the virtual interview table, and this post is a result of me figuring things out the long and circuitous way. I hope this helps you to take a more direct route to getting yourself hired as a software developer.</p>
]]></content></entry><entry><title type="html">How to become a software developer</title><link href="https://victoria.dev/archive/how-to-become-a-software-developer/"/><id>https://victoria.dev/archive/how-to-become-a-software-developer/</id><author><name>Victoria Drake</name></author><published>2021-01-05T04:50:07-06:00</published><updated>2021-01-05T04:50:07-06:00</updated><content type="html"><![CDATA[<p>As a Director of Engineering, I’m a software developer who hires and leads other software developers. It’s not surprising then that I get asked this question a lot, in various forms:</p>
<ul>
<li><em>How do I become a software developer?</em></li>
<li><em>What language or framework should I learn first?</em></li>
<li><em>Where do I start?</em></li>
</ul>
<p>While I’m certain there’s no one right answer for everyone, I’m also certain that the world needs more software developers and systems thinkers.</p>
<p>The best thing I can do to help you lead yourself, learn to code, and become a software developer is to share the most efficient parts of how I did it myself. This is the article I wish I had read when I started coding.</p>
<h2 id="depth-matters">Depth matters</h2>
<p><img src="depth.png" alt="Comic of an iceberg with &ldquo;Enough to build a web app&rdquo; on top and &ldquo;The really interesting stuff&rdquo; on the bottom."></p>
<p>Software is exceedingly complex. Like a good novel that you wish you’d never finish reading, there’s always more to discover and learn. If you don’t want to miss the best parts, don’t be satisfied with surface-level explanations. Always go deeper! Ask why, why, and why again until you get to the fundamentals. Soon enough, you’ll start to see patterns.</p>
<p>By digging deeper, you’ll begin to understand the fundamentals of how things connect, what makes things “fast,” and facets of software operation that you probably can’t even imagine exist. It’s like peeking behind the curtain and seeing a whole world of systems and processes that most people are never aware of.</p>
<p>Going in-depth can expand your mind and your capacity for learning. Keep asking why. Follow every link. Let your curiosity guide you.</p>
<h2 id="hard-stuff-matters">Hard stuff matters</h2>
<p>Giving yourself the chance to be delighted through discovery doesn’t come for free. It takes a lot of hard work to read and compress complicated ideas into your meat brain.</p>
<p><img src="hard-stuff.png" alt="Comic of hammering hard things into your head"></p>
<p>It’s important not to gloss over the hard stuff. In fact, if something seems too hard to understand, you might benefit from doing it first. You might have to get creative to find ways to explain things to yourself, but when you succeed, it makes everything else easier later on.</p>
<p>Analogies are helpful for understanding hard concepts, but they’ll only help you start to understand concepts at a surface level. Remember to go in-depth. Don&rsquo;t stop at the analogy.</p>
<h2 id="writing-matters">Writing matters</h2>
<p>Write right away. Create a habit of explaining everything you learn to yourself in long-form writing. Better than bullet points, writing with a conversational tone engages parts of your brain that help you to process and remember new information. It’s why humans like and remember stories, and it’s a superpower you get for free.</p>
<p>Start by writing for yourself. Write about what interests you. Try something new, even if it seems rudimentary, and write in-depth about what you learn. (<a href="/blog/iteration-in-python-for-list-and-map/">One of my most popular posts</a> is about iteration in Python. When I first wrote it, I considered myself a complete beginner.)</p>
<p>If you want to go a step further, share your writing with the world. Learn in public, <a href="https://victoria.dev">like I do</a>. I often get questions like, &ldquo;how do I choose a theme for my blog?&rdquo; or &ldquo;what platform should I use?&rdquo; or &ldquo;what popular language/framework/topic should I focus on?&rdquo; My answer is: don&rsquo;t worry about it.</p>
<p>Don&rsquo;t fret too much about your blog theme or platform. Pick the easiest option for you to get started with for now. All of that will change and improve as you learn, practice, and find your focus. Just start writing, ideally, yesterday.</p>
<p>Write for yourself by explaining what you’re doing, as if it were past-you teaching future-you — because it is. You will be your first reader, and the first judge of how useful your blog can be. Seek to impress yourself!</p>
<h2 id="the-language-framework-or-version-doesnt-matter">The language, framework, or version doesn’t matter</h2>
<p>Why pigeonhole your abilities before you even start? Pick any software language, framework, or technology that seems to make sense to you when you first read it. Start there.</p>
<p>Remember that it’s important to dig deep and understand the fundamentals. Basic concepts of software transcend languages. Whichever first language you choose, understand functions, variables, return values, iteration, and how immutability works. You’ll find that learning these concepts will make it easier to recognize them in your second language, and learn that too.</p>
<h2 id="your-portfolio-doesnt-matter">Your portfolio doesn’t matter</h2>
<p>If your first objective is to build a portfolio, you may be trying to run before you walk. Building a portfolio to showcase to potential employers is a great goal, but a terrible first step.</p>
<p>If you think of creating a polished portfolio as a first step, you’re liable to spend too much time making it pretty and presentable before focusing on the content. As someone who hires software developers, I can tell you wholeheartedly that I’d rather see clean and well-written code than a flashy front page.</p>
<p><img src="temp-portfolio.png" alt="A comic of an in-progress portfolio, text reads, &ldquo;Portfolio in progress. Watch me build at GitHub.com/me&rdquo;"></p>
<p>Don’t confuse building a portfolio with building projects. Absolutely build projects, right from the beginning. There’s no better way to see the practical application of what you’re learning. Just treat them as first drafts, as training ground, and don’t worry about packaging them up for professional consumption.</p>
<p>By allowing yourself to build some draft projects first, you allow yourself the breathing room to learn from them. Focus on iteration, on making one small thing better each time, and you&rsquo;ll build a portfolio without even realizing it.</p>
<h2 id="focus-on-what-matters">Focus on what matters</h2>
<p>Don’t follow this advice blindly; rather, incorporate it into your own systems. Experiment, make it work better than when you found it, then pay it forward by writing down what you&rsquo;ve learned for someone else to read!</p>
<p>Here are my favorite books for reading or listening to if you want to cultivate a learning mindset. See <a href="/bookshelf/">non-coding books for coders</a>.</p>
<p>If this article benefits you in some way, I encourage you to write about it! The process of learning how to learn is never finished. You can be the next iteration.</p>
]]></content></entry><entry><title type="html">Responsive pages and color themes with minimal CSS</title><link href="https://victoria.dev/archive/responsive-pages-and-color-themes-with-minimal-css/"/><id>https://victoria.dev/archive/responsive-pages-and-color-themes-with-minimal-css/</id><author><name>Victoria Drake</name></author><published>2020-11-17T06:04:58-05:00</published><updated>2020-11-17T06:04:58-05:00</updated><content type="html"><![CDATA[<p>Hello, do come in! If you&rsquo;re reading this on my website, you may notice I&rsquo;ve spruced up a bit. <a href="/">Victoria.dev</a> can now better respond to your devices and preferences!</p>
<p>Most modern devices and web browsers allow users to choose either a light or dark theme for the user interface. With <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">CSS media queries</a>, you can have your own website&rsquo;s styles change to match this user setting!</p>
<p>Media queries are also a common way to have elements on web pages change to suit different screen sizes. This is an especially powerful tool when combined with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">custom properties</a> set on the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:root">root element</a>.</p>
<p>Here&rsquo;s how to use CSS media queries and custom properties to improve your visitor&rsquo;s browsing experience with just a few lines of CSS.</p>
<h2 id="catering-to-color-preferences">Catering to color preferences</h2>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"><code>prefers-color-scheme</code> media feature</a> can be queried to serve up your user&rsquo;s color scheme of choice. The <code>light</code> option is the go-to version if no active preference is set, and it has <a href="https://caniuse.com/mdn-css_at-rules_media_prefers-color-scheme">decent support across modern browsers</a>.</p>
<p>Additionally, users reading on certain devices can also set light and dark color themes based on a schedule. For example, my phone uses light colors throughout its UI during the daytime, and dark colors at night. You can make your website follow suit!</p>
<p>Avoid repeating a lot of CSS by setting custom properties for your color themes on your <code>:root</code> pseudo-class. You can specify the themes available with the <a href="https://drafts.csswg.org/css-color-adjust/#color-scheme-prop"><code>color-scheme</code> property</a> (currently part of a <a href="https://drafts.csswg.org/css-color-adjust-1/">draft specification</a>, but I like to write my articles to age well). Create a version for each theme you wish to support. Here&rsquo;s a quick example you can build on:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>:<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>    color-scheme: light dark;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">prefers-color-scheme</span><span style="color:#f92672">:</span> <span style="color:#f92672">light</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --text-primary: <span style="color:#ae81ff">#24292e</span>;
</span></span><span style="display:flex;"><span>        --background: <span style="color:#66d9ef">white</span>;
</span></span><span style="display:flex;"><span>        --shadow: rgba(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0.15</span>) <span style="color:#ae81ff">0</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">prefers-color-scheme</span><span style="color:#f92672">:</span> <span style="color:#f92672">dark</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --text-primary: <span style="color:#66d9ef">white</span>;
</span></span><span style="display:flex;"><span>        --background: <span style="color:#ae81ff">#24292e</span>;
</span></span><span style="display:flex;"><span>        --shadow: rgba(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0.35</span>) <span style="color:#ae81ff">0</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see, you can use custom properties to set all kinds of values. To use these as variables with other CSS elements, use the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/var()"><code>var()</code> function</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">header</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span><span style="color:#66d9ef">text</span><span style="color:#f92672">-</span>primary);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>background);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">box-shadow</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>shadow);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this quick example, the <code>header</code> element will now display your user&rsquo;s preferred colors according to their browser settings!</p>
<p>Preferred color schemes are set by the user in different ways, depending on the browser. Here are a couple examples.</p>
<h3 id="firefox">Firefox</h3>
<p>You can test out <code>light</code> and <code>dark</code> modes in Firefox by typing <code>about:config</code> into the address bar. Accept the warning if it pops up, then type <code>ui.systemUsesDarkTheme</code> into the search.</p>
<p>Choose a <code>Number</code> value for the setting, then input a <code>1</code> for dark or <code>0</code> for light.</p>
<p><img src="firefox-theme-setting.png" alt="A screenshot of setting the color theme in Firefox"></p>
<h3 id="brave">Brave</h3>
<p>If you&rsquo;re using Brave, find color theme settings in <strong>Settings</strong> &gt; <strong>Appearance</strong> &gt; <strong>Brave colors</strong>.</p>
<p><img src="brave-settings.png" alt="A screenshot of setting the color theme in Brave"></p>
<h2 id="variable-scaling">Variable scaling</h2>
<p>You can also use a custom property to effortlessly adjust the size of text or other elements depending on your user&rsquo;s screen size. The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/width"><code>width</code> media feature</a> tests the width of the viewport. While <code>width: _px</code> will match an exact size, you can also use <code>min</code> and <code>max</code> to create ranges.</p>
<p>Query with <code>min-width: _px</code> to match anything over <code>_</code> pixels, and <code>max-width: _px</code> to match anything up to <code>_</code> pixels.</p>
<p>Use these queries to set a custom property on the <code>:root</code> to create a ratio:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">min-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">360px</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --scale: <span style="color:#ae81ff">0.8</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">min-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">768px</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --scale: <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">min-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">1024px</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --scale: <span style="color:#ae81ff">1.2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then make an element responsive by using the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc()"><code>calc()</code> function</a>. Here are a few examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">h1</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">42</span><span style="color:#66d9ef">px</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">h2</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">26</span><span style="color:#66d9ef">px</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">img</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: calc(<span style="color:#ae81ff">200</span><span style="color:#66d9ef">px</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, multiplying an initial value by your <code>--scale</code> custom property allows the size of headings and images to magically adjust to your user&rsquo;s device width.</p>
<p>The relative unit <code>rem</code> will have a similar effect. You can use it to define sizes for elements relative to the font size declared at the root element.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">h1</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">5</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">h2</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">1.5</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">p</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">1</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Of course, you can also multiply two custom properties. For example, setting the <code>--max-img</code> as a custom property on the <code>:root</code> can help to save you time later on by not having to update a pixel value in multiple places:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">img</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>: calc(<span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>max<span style="color:#f92672">-</span>img) <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="raise-your-responsiveness-game">Raise your responsiveness game</h2>
<p>Try out these easy wins for a website that caters to your visitor&rsquo;s devices and preferences. I&rsquo;ve put them to good use now on <a href="/">victoria.dev</a>. I invite you to <a href="/contact">let me know how you like it!</a></p>
]]></content></entry><entry><title type="html">Build your own serverless subscriber list with Go and AWS</title><link href="https://victoria.dev/archive/build-your-own-serverless-subscriber-list-with-go-and-aws/"/><id>https://victoria.dev/archive/build-your-own-serverless-subscriber-list-with-go-and-aws/</id><author><name>Victoria Drake</name></author><published>2020-11-10T04:52:50-05:00</published><updated>2020-11-10T04:52:50-05:00</updated><content type="html"><![CDATA[<p>You can now subscribe to my email list on <a href="/">victoria.dev</a>! Here&rsquo;s how I lovingly built a subscription sign up flow with email confirmation that doesn&rsquo;t suck. You can too.</p>
<h2 id="introducing-simple-subscribe">Introducing Simple Subscribe</h2>
<p>If you&rsquo;re interested in managing your own mailing list or newsletter, you can set up Simple Subscribe on your own AWS resources to collect email addresses. This open source API is written in Go, and runs on AWS Lambda. Visitors to your site can sign up to your list, which is stored in a DynamoDB table, ready to be queried or exported at your leisure.</p>
<p>When someone signs up, they&rsquo;ll receive an email asking them to confirm their subscription. This is sometimes called &ldquo;double opt-in,&rdquo; although I prefer the term &ldquo;verified.&rdquo; Simple Subscribe works on serverless infrastructure and uses an AWS Lambda to handle subscription, confirmation, and unsubscribe requests.</p>
<p>You can find the <a href="https://github.com/victoriadrake/simple-subscribe">Simple Subscribe project, with its fully open-source code, on GitHub</a>. I encourage you to pull up the code and follow along! In this post I&rsquo;ll share each build step, the thought process behind the API&rsquo;s single-responsibility functions, and security considerations for an AWS project like this one.</p>
<h2 id="building-a-verified-subscription-flow">Building a verified subscription flow</h2>
<p>A non-verified email sign up process is straightforward. Someone puts their email into a box on your website, then that email goes into your database. However, if I&rsquo;ve taught you anything about <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">not trusting user input</a>, the very idea of a non-verified sign up process should raise your hackles. Spam may be great when fried in a sandwich, but no fun when it&rsquo;s running up your AWS bill.</p>
<p>While you can use a strategy like a CAPTCHA or puzzle for is-it-a-human verification, these can create enough friction to turn away your potential subscribers. Instead, a confirmation email can help to ensure both address correctness and user sentience.</p>
<p>To build a subscription flow with email confirmation, create single-responsibility functions that satisfy each logical step. Those are:</p>
<ol>
<li>Accept an email address and record it.</li>
<li>Generate a token associated with that email address and record it.</li>
<li>Send a confirmation email to that email address with the token.</li>
<li>Accept a verification request that has both the email address and token.</li>
</ol>
<p>To achieve each of these goals, Simple Subscribe uses the <a href="https://docs.aws.amazon.com/sdk-for-go/api/">official AWS SDK for Go</a> to interact with DynamoDB and SES.</p>
<p>At each stage, consider what the data looks like and how you store it. This can help to handle conundrums like, &ldquo;What happens if someone tries to subscribe twice?&rdquo; or even <a href="/blog/if-you-want-to-build-a-treehouse-start-at-the-bottom/">threat-modeling</a> such as, &ldquo;What if someone subscribes with an email they don&rsquo;t own?&rdquo;</p>
<p>Ready? Let&rsquo;s break down each step and see how the magic happens.</p>
<h3 id="subscribing">Subscribing</h3>
<p>The subscription process begins with a humble web form, like the one on my site&rsquo;s main page. A form input with attributes <code>type=&quot;email&quot; required</code> helps with validation, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#Validation">thanks to the browser</a>. When submitted, the form sends a GET request to the Simple Subscribe subscription endpoint.</p>
<p>Simple Subscribe receives a GET request to this endpoint with a query string containing the intended subscriber&rsquo;s email. It then generates an <code>id</code> value and adds both <code>email</code> and <code>id</code> to your DynamoDB table.</p>
<p>The table item now looks like:</p>
<table>
  <thead>
      <tr>
          <th>email</th>
          <th>confirm</th>
          <th>id</th>
          <th>timestamp</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>subscriber@example.com</code></td>
          <td><em>false</em></td>
          <td><code>uuid-xxxxx</code></td>
          <td>2020-11-01 00:27:39</td>
      </tr>
  </tbody>
</table>
<p>The <code>confirm</code> column, which holds a boolean, indicates that the item is a subscription request that has not yet been confirmed. To verify an email address in the database, you&rsquo;ll need to find the correct item and change <code>confirm</code> to <code>true</code>.</p>
<p>As you work with your data, consider the goal of each manipulation and how you might compare an incoming request to existing data.</p>
<p>For example, if someone made a subsequent subscription request for the same email address, how would you handle it? You might say, &ldquo;Create a new line item with a new <code>id</code>,&rdquo; however, this might not be best strategy when your serverless application database is paid for by request volume.</p>
<p>Since <a href="https://aws.amazon.com/dynamodb/pricing/">DynamoDB Pricing</a> depends on how much data you read and write to your tables, it&rsquo;s advantageous to avoid piling on excess data.</p>
<p>With that in mind, it would be prudent to handle subscription requests for the same email by performing an update instead of adding a new line. Simple Subscribe actually uses the same function to either add or update a database item. This is typically referred to as, &ldquo;update or insert.&rdquo;</p>
<p>In a database like SQLite this is accomplished with the <a href="https://www.sqlite.org/lang_UPSERT.html">UPSERT syntax</a>. In the case of DynamoDB, you use an update operation. For the <a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/">Go SDK</a>, its syntax is <code>UpdateItem</code>.</p>
<p>When a duplicate subscription request is received, the database item is matched on the <code>email</code> only. If an existing line item is found, its <code>id</code> and <code>timestamp</code> are overridden, which updates the existing database record and avoids flooding your table with duplicate requests.</p>
<h3 id="verifying-email-addresses">Verifying email addresses</h3>
<p>After submitting the form, the intended subscriber then receives an email from SES containing a link. This link is built using the <code>email</code> and <code>id</code> from the table, and takes the format:</p>
<pre tabindex="0"><code class="language-url" data-lang="url">&lt;BASE_URL&gt;&lt;VERIFY_PATH&gt;/?email=subscriber@example.com&amp;id=uuid-xxxxx
</code></pre><p>In this set up, the <code>id</code> is a UUID that acts as a secret token. It provides an identifier that you can match that is sufficiently complex and hard to guess. This approach deters people from subscribing with email addresses they don&rsquo;t control.</p>
<p>Visiting the link sends a request to your verification endpoint with the <code>email</code> and <code>id</code> in the query string. This time, it&rsquo;s important to compare both the incoming <code>email</code> and <code>id</code> values to the database record. This verifies that the recipient of the confirmation email is initiating the request.</p>
<p>The verification endpoint ensures that these values match an item in your database, then performs another update operation to set <code>confirm</code> to <code>true</code>, and update the timestamp. The item now looks like:</p>
<table>
  <thead>
      <tr>
          <th>email</th>
          <th>confirm</th>
          <th>id</th>
          <th>timestamp</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>subscriber@example.com</code></td>
          <td><em>true</em></td>
          <td><code>uuid-xxxxx</code></td>
          <td>2020-11-01 00:37:39</td>
      </tr>
  </tbody>
</table>
<h3 id="querying-for-emails">Querying for emails</h3>
<p>You can now query your table to build your email list. Depending on your email sending solution, you might do this manually, with another Lambda, or even from the command line.</p>
<p>Since data for requested subscriptions (where <code>confirm</code> is <code>false</code>) is stored in the table alongside confirmed subscriptions, it&rsquo;s important to differentiate this data when querying for email addresses to send to. You&rsquo;ll want to ensure you only return emails where <code>confirm</code> is <code>true</code>.</p>
<h2 id="providing-unsubscribe-links">Providing unsubscribe links</h2>
<p>Similar to verifying an email address, Simple Subscribe uses <code>email</code> and <code>id</code> as arguments to the function that deletes an item from your DynamoDB table in order to unsubscribe an email address. To allow people to remove themselves from your list, you&rsquo;ll need to provide a URL in each email you send that includes their <code>email</code> and <code>id</code> as a query string to the unsubscribe endpoint. It would look something like:</p>
<pre tabindex="0"><code class="language-url" data-lang="url">&lt;BASE_URL&gt;&lt;UNSUBSCRIBE_PATH&gt;/?email=subscriber@example.com&amp;id=uuid-xxxxx
</code></pre><p>When the link is clicked, the query string is passed to the unsubscribe endpoint. If the provided <code>email</code> and <code>id</code> match a database item, that item will be deleted.</p>
<p>Proving a method for your subscribers to automatically remove themselves from your list, without any human intervention necessary, is part of an ethical and respectful philosophy towards handling the data that&rsquo;s been entrusted to you.</p>
<h2 id="caring-for-your-data">Caring for your data</h2>
<p>Once you decide to accept other people&rsquo;s data, it becomes your responsibility to care for it. This is applicable to everything you build. For Simple Subscribe, it means maintaining the security of your database, and periodically pruning your table.</p>
<p>In order to avoid retaining email addresses where <code>confirm</code> is <code>false</code> past a certain time frame, it would be a good idea to set up a cleaning function that runs on a regular schedule. This can be achieved manually, with an AWS Lambda function, or using the command line.</p>
<p>To clean up, find database items where <code>confirm</code> is <code>false</code> and <code>timestamp</code> is older than a particular point in time. Depending on your use case and request volumes, the frequency at which you choose to clean up will vary.</p>
<p>Also depending on your use case, you may wish to keep backups of your data. If you are particularly concerned about data integrity, you can explore <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/backuprestore_HowItWorks.html">On-Demand Backup</a> or <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html">Point-in-Time Recovery</a> for DynamoDB.</p>
<h2 id="build-your-independent-subscriber-base">Build your independent subscriber base</h2>
<p>Building your own subscriber list can be an empowering endeavor! Whether you intend to start a newsletter, send out notifications for new content, or want to create a community around your work, there&rsquo;s nothing more personal or direct than an email from me to you.</p>
<p>I encourage you to start building your subscriber base with Simple Subscribe today! Like most of my work, it&rsquo;s open source and free for your personal use. Dive into the code at <a href="https://github.com/victoriadrake/simple-subscribe">the GitHub repository</a> or learn more at <a href="https://simplesubscribe.org">SimpleSubscribe.org</a>.</p>
]]></content></entry><entry><title type="html">Increase developer confidence with a great Django test suite</title><link href="https://victoria.dev/posts/increase-developer-confidence-with-a-great-django-test-suite/"/><id>https://victoria.dev/posts/increase-developer-confidence-with-a-great-django-test-suite/</id><author><name>Victoria Drake</name></author><published>2020-10-01T05:50:37-04:00</published><updated>2020-10-01T05:50:37-04:00</updated><content type="html"><![CDATA[<p>Done correctly, tests are one of your application&rsquo;s most valuable assets.</p>
<p>The Django framework in particular offers your team the opportunity to create an efficient testing practice. Based on the Python standard library <code>unittest</code>, proper tests in Django are fast to write, faster to run, and can offer you a seamless continuous integration solution for taking the pulse of your developing application.</p>
<p>With comprehensive tests, developers have higher confidence when pushing changes. I&rsquo;ve seen firsthand in my own teams that good tests can boost development velocity as a direct result of a better developer experience.</p>
<p>In this article, I&rsquo;ll share my own experiences in building useful tests for Django applications, from the basics to the best possible execution. If you&rsquo;re using Django or building with it in your organization, you might like to read the rest of my <a href="/tags/django/">Django series</a>.</p>
<h2 id="what-to-test">What to test</h2>
<p>Tests are extremely important. Far beyond simply letting you know if a function works, tests can form the basis of your team&rsquo;s understanding of how your application is <em>intended</em> to work.</p>
<p>Here&rsquo;s the main goal: if you hit your head and forgot everything about how your application works tomorrow, you should be able to regain most of your understanding by reading and running the tests you write today.</p>
<p>Here are some questions that may be helpful to ask as you decide what to test:</p>
<ul>
<li>What is our customer supposed to be able to do?</li>
<li>What is our customer <em>not</em> supposed to be able to do?</li>
<li>What should this method, view, or logical flow achieve?</li>
<li>When, how, or where is this feature supposed to execute?</li>
</ul>
<p>Tests that make sense for your application can help build developer confidence. With these sensible safeguards in place, developers make improvements more readily, and feel confident introducing innovative solutions to product needs. The result is an application that comes together faster, and features that are shipped often and with confidence.</p>
<p><img src="pbj-tests.png" alt="A cartoon for peanut butter and jelly sandwich tests"></p>
<h2 id="where-to-put-tests">Where to put tests</h2>
<p>If you only have a few tests, you may organize your test files similarly to <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#startapp">Django&rsquo;s default app template</a> by putting them all in a file called <code>tests.py</code>. This straightforward approach is best for smaller applications.</p>
<p>As your application grows, you may like to split your tests into different files, or test modules. One method is to use a directory to organize your files, such as <code>projectroot/app/tests/</code>. The name of each test file within that directory should begin with <code>test</code>, for example, <code>test_models.py</code>.</p>
<p>Besides being aptly named, Django will find these files using <a href="https://docs.python.org/3/library/unittest.html#unittest-test-discovery">built-in test discovery</a> based on the <code>unittest</code> module. All files in your application with names that begin with <code>test</code> will be collected into a test suite.</p>
<p>This convenient test discovery allows you to place test files anywhere that makes sense for your application. As long as they&rsquo;re correctly named, Django&rsquo;s test utility can find and run them.</p>
<h2 id="how-to-document-a-test">How to document a test</h2>
<p>Use <a href="https://www.python.org/dev/peps/pep-0257/">docstrings</a> to explain what a test is intended to verify at a high level. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_create_user</span>(self):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Creating a new user object should also create an associated profile object&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ...</span>
</span></span></code></pre></div><p>These docstrings help you quickly understand what a test is supposed to be doing. Besides navigating the codebase, this helps to make it obvious when a test doesn&rsquo;t verify what the docstring says it should.</p>
<p>Docstrings are also shown when the tests are being run, which can be helpful for logging and debugging.</p>
<h2 id="what-a-test-needs-to-work">What a test needs to work</h2>
<p>Django tests can be quickly set up using data created in the <a href="https://docs.djangoproject.com/en/3.1/topics/testing/tools/#django.test.TestCase.setUpTestData"><code>setUpTestData()</code> method</a>. You can use various approaches to create your test data, such as utilizing external files, or even hard-coding silly phrases or the names of your staff. Personally, I much prefer to use a fake-data-generation library, such as <a href="https://github.com/joke2k/faker/"><code>faker</code></a>.</p>
<p>The proper set up of arbitrary testing data can help you ensure that you&rsquo;re testing your application functionality instead of accidentally testing test data. Because generators like <code>faker</code> add some degree of unexpectedness to your inputs, it can be more representative of real-world use.</p>
<p>Here is an example set up for a test:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> django.test <span style="color:#f92672">import</span> TestCase
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> faker <span style="color:#f92672">import</span> Faker
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> app.models <span style="color:#f92672">import</span> MyModel, AnotherModel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fake <span style="color:#f92672">=</span> Faker()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyModelTest</span>(TestCase):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">setUpTestData</span>(cls):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Quickly set up data for the whole TestCase&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        cls<span style="color:#f92672">.</span>user_first <span style="color:#f92672">=</span> fake<span style="color:#f92672">.</span>first_name()
</span></span><span style="display:flex;"><span>        cls<span style="color:#f92672">.</span>user_last <span style="color:#f92672">=</span> fake<span style="color:#f92672">.</span>last_name()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_create_models</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Creating a MyModel object should also create AnotherModel object&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># In test methods, use the variables created above</span>
</span></span><span style="display:flex;"><span>        test_object <span style="color:#f92672">=</span> MyModel<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>create(
</span></span><span style="display:flex;"><span>            first_name<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>user_first,
</span></span><span style="display:flex;"><span>            last_name<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>user_last,
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        another_model <span style="color:#f92672">=</span> AnotherModel<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>get(my_model<span style="color:#f92672">=</span>test_object)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>assertEqual(another_model<span style="color:#f92672">.</span>first_name, self<span style="color:#f92672">.</span>user_first)
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># ...</span>
</span></span></code></pre></div><p>Tests pass or fail based on the outcome of the assertion methods. You can use <a href="https://docs.python.org/3/library/unittest.html#assert-methods">Python&rsquo;s <code>unittest</code> methods</a>, and <a href="https://docs.djangoproject.com/en/3.1/topics/testing/tools/#assertions">Django&rsquo;s assertion methods</a>.</p>
<p>For further guidance on writing tests, see <a href="https://docs.djangoproject.com/en/3.1/topics/testing/">Testing in Django</a>.</p>
<h2 id="best-possible-execution-for-running-your-tests">Best possible execution for running your tests</h2>
<p>Django&rsquo;s test suite is manually run with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>./manage.py test
</span></span></code></pre></div><p>I rarely run my Django tests this way.</p>
<p>The best, or most efficient, testing practice is one that occurs without you or your developers ever thinking, &ldquo;I need to run the tests first.&rdquo; The beauty of Django&rsquo;s near-effortless test suite set up is that it can be seamlessly run as a part of regular developer activities. This could be in a pre-commit hook, or in a continuous integration or deployment workflow.</p>
<p>I&rsquo;ve previously written about how to use pre-commit hooks to <a href="/posts/technical-ergonomics-for-the-efficient-developer/">improve your developer ergonomics</a> and save your team some brainpower. Django&rsquo;s speedy tests can be run this way, and they become especially efficient if you can <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#cmdoption-test-parallel">run tests in parallel</a>.</p>
<p>Tests that run as part of a CI/CD workflow, for example, <a href="/posts/django-project-best-practices-to-keep-your-developers-happy/#continuous-testing-with-github-actions">on pull requests with GitHub Actions</a>, require no regular effort from your developers to remember to run tests at all. I&rsquo;m not sure how plainly I can put it &ndash; this one&rsquo;s literally a no-brainer.</p>
<h2 id="testing-your-way-to-a-great-django-application">Testing your way to a great Django application</h2>
<p>Tests are extremely important, and underappreciated. They can catch logical errors in your application. They can help explain and validate how concepts and features of your product actually function. Best of all, tests can boost developer confidence and development velocity as a result.</p>
<p>The best tests are ones that are relevant, help to explain and define your application, and are run continuously without a second thought. I hope I&rsquo;ve now shown you how testing in Django can help you to achieve these goals for your team!</p>
]]></content></entry><entry><title type="html">Django project best practices to keep your developers happy</title><link href="https://victoria.dev/posts/django-project-best-practices-to-keep-your-developers-happy/"/><id>https://victoria.dev/posts/django-project-best-practices-to-keep-your-developers-happy/</id><author><name>Victoria Drake</name></author><published>2020-09-22T04:55:19-04:00</published><updated>2020-09-22T04:55:19-04:00</updated><content type="html"><![CDATA[<p>Do you want your team to <em>enjoy</em> your development workflow? Do you think building software should be <em>fun and existentially fulfilling?</em> If so, <em>this is the post</em> for you!</p>
<p>I&rsquo;ve been developing with Django for years, and I&rsquo;ve never been happier with my Django project set up than I am right now. Here&rsquo;s how I&rsquo;m making a day of developing with Django the most relaxing and enjoyable development experience possible for myself and my engineering team.</p>
<h2 id="a-custom-cli-tool-for-your-django-project">A custom CLI tool for your Django project</h2>
<p>Instead of typing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>python3 -m venv env
</span></span><span style="display:flex;"><span>source env/bin/activate
</span></span><span style="display:flex;"><span>pip install -r requirements.txt
</span></span><span style="display:flex;"><span>python3 manage.py makemigrations
</span></span><span style="display:flex;"><span>python3 manage.py migrate
</span></span><span style="display:flex;"><span>python3 manage.py collectstatic
</span></span><span style="display:flex;"><span>python3 manage.py runserver
</span></span></code></pre></div><p>Wouldn&rsquo;t it be much nicer to type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>make start
</span></span></code></pre></div><p>&hellip;and have all that happen for you? I think so!</p>
<p>We can do that with a self-documenting Makefile! Here&rsquo;s one I frequently use when developing my Django applications, like <a href="https://applybyapi.com/">ApplyByAPI.com</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>VENV <span style="color:#f92672">:=</span> env
</span></span><span style="display:flex;"><span>BIN <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>VENV<span style="color:#66d9ef">)</span>/bin
</span></span><span style="display:flex;"><span>PYTHON <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>BIN<span style="color:#66d9ef">)</span>/python
</span></span><span style="display:flex;"><span>SHELL <span style="color:#f92672">:=</span> /bin/bash
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">include</span> <span style="color:#960050;background-color:#1e0010">.env</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> help
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Show this help
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    @egrep -h <span style="color:#e6db74">&#39;\s##\s&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {printf &#34;\033[36m%-20s\033[0m %s\n&#34;, $$1, $$2}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> venv
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">venv</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Make a new virtual environment
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    python3 -m venv <span style="color:#66d9ef">$(</span>VENV<span style="color:#66d9ef">)</span> <span style="color:#f92672">&amp;&amp;</span> source <span style="color:#66d9ef">$(</span>BIN<span style="color:#66d9ef">)</span>/activate
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> install
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">install</span><span style="color:#f92672">:</span> venv <span style="color:#75715e">## Make venv and install requirements
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">$(</span>BIN<span style="color:#66d9ef">)</span>/pip install --upgrade -r requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">freeze</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Pin current dependencies
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">$(</span>BIN<span style="color:#66d9ef">)</span>/pip freeze &gt; requirements.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">migrate</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Make and run migrations
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">$(</span>PYTHON<span style="color:#66d9ef">)</span> manage.py makemigrations
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">$(</span>PYTHON<span style="color:#66d9ef">)</span> manage.py migrate
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">db-up</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Pull and start the Docker Postgres container in the background
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    docker pull postgres
</span></span><span style="display:flex;"><span>    docker-compose up -d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">db-shell</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Access the Postgres Docker database interactively with psql. Pass in DBNAME=&lt;name&gt;.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    docker exec -it container_name psql -d <span style="color:#66d9ef">$(</span>DBNAME<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> test
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">test</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Run tests
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">$(</span>PYTHON<span style="color:#66d9ef">)</span> manage.py test application --verbosity<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> --parallel --failfast
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> run
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">run</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Run the Django server
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">$(</span>PYTHON<span style="color:#66d9ef">)</span> manage.py runserver
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">start</span><span style="color:#f92672">:</span> install migrate run <span style="color:#75715e">## Install requirements, apply migrations, then start development server
</span></span></span></code></pre></div><p>You&rsquo;ll notice the presence of the line <code>include .env</code> above. This ensures <code>make</code> has access to environment variables stored in a file called <code>.env</code>. This allows Make to utilize these variables in its commands, for example, the name of my virtual environment, or to pass in <code>$(DBNAME)</code> to <code>psql</code>.</p>
<p>What&rsquo;s with that weird &ldquo;<code>##</code>&rdquo; comment syntax? A Makefile like this gives you a handy suite of command-line aliases you can check in to your Django project. It&rsquo;s very useful so long as you&rsquo;re able to remember what all those aliases are.</p>
<p>The <code>help</code> command above, which runs by default, prints a helpful list of available commands when you run <code>make</code> or <code>make help</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>help                 Show this help
</span></span><span style="display:flex;"><span>venv                 Make a new virtual environment
</span></span><span style="display:flex;"><span>install              Make venv and install requirements
</span></span><span style="display:flex;"><span>migrate              Make and run migrations
</span></span><span style="display:flex;"><span>db-up                Pull and start the Docker Postgres container in the background
</span></span><span style="display:flex;"><span>db-shell             Access the Postgres Docker database interactively with psql
</span></span><span style="display:flex;"><span>test                 Run tests
</span></span><span style="display:flex;"><span>run                  Run the Django server
</span></span><span style="display:flex;"><span>start                Install requirements, apply migrations, then start development server
</span></span></code></pre></div><p>All the usual Django commands are covered, and we&rsquo;ve got a <code>test</code> command that runs our tests with the options we prefer. Brilliant.</p>
<p>You can read my full <a href="/posts/how-to-create-a-self-documenting-makefile/">post about self-documenting Makefiles here</a>, which also includes an example Makefile using <code>pipenv</code>.</p>
<h2 id="save-your-brainpower-with-pre-commit-hooks">Save your brainpower with pre-commit hooks</h2>
<p>I previously wrote about some <a href="/posts/technical-ergonomics-for-the-efficient-developer/">technical ergonomics</a> that can make it a lot easier for teams to develop great software.</p>
<p>One area that&rsquo;s a no-brainer is using pre-commit hooks to lint code prior to checking it in. This helps to ensure the quality of the code your developers check in, but most importantly, ensures that no one on your team is spending time trying to remember if it should be single or double quotes or where to put a line break.</p>
<p>The confusingly-named <a href="https://pre-commit.com/">pre-commit framework</a> is an otherwise fantastic way to keep hooks (which are not included in cloned repositories) consistent across local environments.</p>
<p>Here is my configuration file, <code>.pre-commit-config.yaml</code>, for my Django projects:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">fail_fast</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">repos</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://github.com/pre-commit/pre-commit-hooks</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rev</span>: <span style="color:#ae81ff">v3.1.0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">detect-aws-credentials</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://github.com/psf/black</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rev</span>: <span style="color:#ae81ff">19.</span><span style="color:#ae81ff">3b0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">black</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://github.com/asottile/blacken-docs</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">rev</span>: <span style="color:#ae81ff">v1.7.0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">blacken-docs</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">additional_dependencies</span>: [<span style="color:#ae81ff">black==19.3b0]</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">local</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">hooks</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">id</span>: <span style="color:#ae81ff">markdownlint</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">markdownlint</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">description</span>: <span style="color:#e6db74">&#34;Lint Markdown files&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">entry</span>: <span style="color:#ae81ff">markdownlint &#39;**/*.md&#39; --fix --ignore node_modules --config &#34;./.markdownlint.json&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">language</span>: <span style="color:#ae81ff">node</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">types</span>: [<span style="color:#ae81ff">markdown]</span>
</span></span></code></pre></div><p>These hooks check for accidental secret commits, format Python files using <a href="https://github.com/psf/black">Black</a>, format Python snippets in Markdown files using <a href="https://github.com/asottile/blacken-docs"><code>blacken-docs</code></a>, and <a href="https://github.com/igorshubovych/markdownlint-cli">lint Markdown files</a> as well. To install them, just type <code>pre-commit install</code>.</p>
<p>There are likely even more useful hooks available for your particular use case: see <a href="https://pre-commit.com/hooks.html">supported hooks</a> to explore.</p>
<h2 id="useful-gitignores">Useful gitignores</h2>
<p>An underappreciated way to improve your team&rsquo;s daily development experience is to make sure your project uses a well-rounded <code>.gitignore</code> file. It can help prevent files containing secrets from being committed, and can additionally save developers hours of tedium by ensuring you&rsquo;re never sifting through a <code>git diff</code> of generated files.</p>
<p>To efficiently create a <a href="https://www.toptal.com/developers/gitignore/api/python,django">gitignore for Python and Django projects</a>, Toptal&rsquo;s <a href="https://gitignore.io">gitignore.io</a> can be a nice resource for generating a robust <code>.gitignore</code> file.</p>
<p>I still recommend examining the generated results yourself to ensure that ignored files suit your use case, and that nothing you want ignored is commented out.</p>
<h2 id="continuous-testing-with-github-actions">Continuous testing with GitHub Actions</h2>
<p>If your team works on GitHub, setting up a testing process with Actions is low-hanging fruit.</p>
<p>Tests that run in a consistent environment on every pull request can help eliminate &ldquo;works on my machine&rdquo; conundrums, as well as ensure no one&rsquo;s sitting around waiting for a test to run locally.</p>
<p>A hosted CI environment like GitHub Actions can also help when running integration tests that require using managed services resources. You can use <a href="https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets">encrypted secrets in a repository</a> to grant the Actions runner access to resources in a testing environment, without worrying about creating testing resources and access keys for each of your developers to use.</p>
<p>I&rsquo;ve written on many occasions about setting up Actions workflows, including <a href="/posts/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/">using one to run your Makefile</a>, and <a href="/blog/publishing-github-event-data-with-github-actions-and-pages/">how to integrate GitHub event data</a>. GitHub even <a href="https://github.blog/2020-06-26-github-action-hero-victoria-drake/">interviewed me about Actions</a> once.</p>
<p>For Django projects, here&rsquo;s a GitHub Actions workflow that runs tests with a consistent Python version whenever someone opens a pull request in the repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run Django tests</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>: <span style="color:#ae81ff">pull_request</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">test</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up Python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#e6db74">&#39;3.8&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install dependencies</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">make install</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run tests</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">make test</span>
</span></span></code></pre></div><p>For the installation and test commands, I&rsquo;ve simply utilized the <a href="#a-custom-cli-tool-for-your-django-project">Makefile</a> that&rsquo;s been checked in to the repository. A benefit of using your Makefile commands in your CI test workflows is that you only need to keep them updated in one place &ndash; your Makefile! No more &ldquo;why is this working locally but not in CI??!?&rdquo; headaches.</p>
<p>If you want to step up your security game, you can add <a href="https://github.com/victoriadrake/django-security-check">Django Security Check</a> as an Action too.</p>
<h2 id="set-up-your-django-project-for-success">Set up your Django project for success</h2>
<p>Want to help keep your development team happy? Set them up for success with these best practices for Django development. Remember, an ounce of brainpower is worth a pound of software!</p>
]]></content></entry><entry><title type="html">Manipulating data with Django migrations</title><link href="https://victoria.dev/posts/manipulating-data-with-django-migrations/"/><id>https://victoria.dev/posts/manipulating-data-with-django-migrations/</id><author><name>Victoria Drake</name></author><published>2020-09-14T02:12:57-04:00</published><updated>2020-09-14T02:12:57-04:00</updated><content type="html"><![CDATA[<p>Growing, successful applications are a lovely problem to have. As a product develops, it tends to accumulate complication the way your weekend cake project accumulates layers of frosting. Thankfully, Django, my favorite batteries-included framework, handles complexity pretty well.</p>
<p>Django <a href="/posts/writing-efficient-django/#django-models">models help humans work with data in a way that makes sense to our brains</a>, and the framework offers plenty of classes you can inherit to help you rapidly develop a robust application from scratch. As for developing on existing Django applications, there&rsquo;s a feature for that, too. In this article, we&rsquo;ll cover how to use Django migrations to update your existing models and database.</p>
<h2 id="whats-under-the-hood">What&rsquo;s under the hood</h2>
<p>Django migrations are Python files that help you add and change things in your database tables to reflect changes in your Django models. To understand how Django migrations help you work with data, it may be helpful to understand the underlying structures we&rsquo;re working with.</p>
<h3 id="whats-a-database-table">What&rsquo;s a database table</h3>
<p>If you&rsquo;ve laid eyes on a spreadsheet before, you&rsquo;re already most of the way to understanding a database table. In a relational database, for example, a PostgreSQL database, you can expect to see data organized into columns and rows. A relational database table may have a set number of columns and any number of rows.</p>
<p>In Django, each model is its own table. For example, here&rsquo;s a Django model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> django.db <span style="color:#f92672">import</span> models
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Lunch</span>(models<span style="color:#f92672">.</span>Model):
</span></span><span style="display:flex;"><span>    left_side <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    center <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    right_side <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p>Each field is a column, and each row is a Django object instance of that model. Here&rsquo;s a representation of a database table for the Django model &ldquo;Lunch&rdquo; above. In the database, its name would be <code>lunch_table</code>.</p>
<table>
  <thead>
      <tr>
          <th>id</th>
          <th>left_side</th>
          <th>center</th>
          <th>right_side</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>Fork</td>
          <td>Plate</td>
          <td>Spoon</td>
      </tr>
  </tbody>
</table>
<p>The model <code>Lunch</code> has three fields: <code>left_side</code>, <code>center</code>, and <code>right-side</code>. One instance of a <code>Lunch</code> object would have &ldquo;Fork&rdquo; for the <code>left_side</code>, a &ldquo;Plate&rdquo; for the <code>center</code>, and &ldquo;Spoon&rdquo; for the <code>right_side</code>. Django <a href="https://docs.djangoproject.com/en/3.2/topics/db/models/#automatic-primary-key-fields">automatically adds an <code>id</code> field</a> if you don&rsquo;t specify a primary key.</p>
<p>If you wanted to change the name of your Lunch model, you would do so in your <code>models.py</code> code. For example, change &ldquo;Lunch&rdquo; to &ldquo;Dinner,&rdquo; then <a href="https://docs.djangoproject.com/en/3.2/ref/django-admin/#makemigrations">run <code>python manage.py makemigrations</code></a>. You&rsquo;ll see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>python manage.py makemigrations
</span></span><span style="display:flex;"><span>Did you rename the backend.Lunch model to Dinner? [y/N] y
</span></span><span style="display:flex;"><span>Migrations for &#39;backend&#39;:
</span></span><span style="display:flex;"><span>  backend/migrations/0003_auto_20200922_2331.py
</span></span><span style="display:flex;"><span>    - Rename model Lunch to Dinner
</span></span></code></pre></div><p>Django automatically generates the appropriate migration files. The relevant line of the generated migrations file in this case would look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>migrations<span style="color:#f92672">.</span>RenameModel(old_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Lunch&#34;</span>, new_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Dinner&#34;</span>),
</span></span></code></pre></div><p>This operation would rename our &ldquo;Lunch&rdquo; model to &ldquo;Dinner&rdquo; while keeping everything else the same. But what if you also wanted to change the structure of the database table itself, its schema, as well as make sure that existing data ends up in the right place on your Dinner table?</p>
<p>Let&rsquo;s explore how to turn our Lunch model into a Dinner model that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> django.db <span style="color:#f92672">import</span> models
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dinner</span>(models<span style="color:#f92672">.</span>Model):
</span></span><span style="display:flex;"><span>    top_left <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    top_center <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    top_right <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    bottom_left <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    bottom_center <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    bottom_right <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p>&hellip;with a database table that would look like this:</p>
<table>
  <thead>
      <tr>
          <th>id</th>
          <th>top_left</th>
          <th>top_center</th>
          <th>top_right</th>
          <th>bottom_left</th>
          <th>bottom_center</th>
          <th>bottom_right</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>Bread plate</td>
          <td>Spoon</td>
          <td>Glass</td>
          <td>Fork</td>
          <td>Plate</td>
          <td>Knife</td>
      </tr>
  </tbody>
</table>
<h2 id="manipulating-data-with-django-migrations">Manipulating data with Django migrations</h2>
<p>Before you begin to manipulate your data, it&rsquo;s always a good idea to create a backup of your database that you can restore in case something goes wrong. There are various ways to do this depending on the database you&rsquo;re using. You can typically find instructions by searching for <code>&lt;your database name&gt;</code> and keywords like <code>backup</code>, <code>recovery</code>, or <code>snapshot</code>.</p>
<p>In order to design your migration, it&rsquo;s helpful to become familiar with the available <a href="https://docs.djangoproject.com/en/3.2/ref/migration-operations/">migration operations</a>. Migrations are run step-by-step, and each operation is some flavor of adding, removing, or altering data. Like a strategic puzzle, it&rsquo;s important to make model changes one step at a time so that the generated migrations have the correct result.</p>
<p>We&rsquo;ve already renamed our model successfully. Now, we&rsquo;ll rename the fields that hold the data we want to retain:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dinner</span>(models<span style="color:#f92672">.</span>Model):
</span></span><span style="display:flex;"><span>    bottom_left <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    bottom_center <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    top_center <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p>Django is sometimes smart enough to determine the old and new field names correctly. You&rsquo;ll be asked for confirmation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>python manage.py makemigrations
</span></span><span style="display:flex;"><span>Did you rename dinner.center to dinner.bottom_center (a CharField)? [y/N] y
</span></span><span style="display:flex;"><span>Did you rename dinner.left_side to dinner.bottom_left (a CharField)? [y/N] y
</span></span><span style="display:flex;"><span>Did you rename dinner.right_side to dinner.top_center (a CharField)? [y/N] y
</span></span><span style="display:flex;"><span>Migrations for &#39;backend&#39;:
</span></span><span style="display:flex;"><span>  backend/migrations/0004_auto_20200914_2345.py
</span></span><span style="display:flex;"><span>    - Rename field center on dinner to bottom_center
</span></span><span style="display:flex;"><span>    - Rename field left_side on dinner to bottom_left
</span></span><span style="display:flex;"><span>    - Rename field right_side on dinner to top_center
</span></span></code></pre></div><p>In some cases, you&rsquo;ll want to try renaming the field and running <code>makemigrations</code> one at a time.</p>
<p>Now that the existing fields have been migrated to their new names, add the remaining fields to the model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dinner</span>(models<span style="color:#f92672">.</span>Model):
</span></span><span style="display:flex;"><span>    top_left <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    top_center <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    top_right <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    bottom_left <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    bottom_center <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    bottom_right <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p>Running <code>makemigrations</code> again now gives us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>python manage.py makemigrations
</span></span><span style="display:flex;"><span>Migrations for &#39;backend&#39;:
</span></span><span style="display:flex;"><span>  backend/migrations/0005_auto_20200914_2351.py
</span></span><span style="display:flex;"><span>    - Add field bottom_right to dinner
</span></span><span style="display:flex;"><span>    - Add field top_left to dinner
</span></span><span style="display:flex;"><span>    - Add field top_right to dinner
</span></span></code></pre></div><p>You&rsquo;re done! By generating Django migrations, you&rsquo;ve successfully set up your <code>dinner_table</code> and moved existing data to its new spot.</p>
<h2 id="additional-complexity">Additional complexity</h2>
<p>You&rsquo;ll notice that our Lunch and Dinner models are not very complex. Out of Django&rsquo;s many <a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#field-types">model field options</a>, we&rsquo;re just using <code>CharField</code>. We also set <code>null=True</code> to let Django store empty values as <code>NULL</code> in the database.</p>
<p>Django migrations can handle additional complexity, such as changing field types, and whether a blank or null value is permitted. I keep Django&rsquo;s <a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#">model field reference</a> handy as I work with varying types of data and different use cases.</p>
<h2 id="de-mystified-migrations">De-mystified migrations</h2>
<p>I hope this article has helped you better understand Django migrations and how they work!</p>
<p>Now that you can change models and manipulate existing data in your Django application, be sure to use your powers wisely! Backup your database, research and plan your migrations, and always run tests before working with customer data. By doing so, you have the potential to enable your application to grow &ndash; with manageable levels of complexity.</p>
]]></content></entry><entry><title type="html">How GitHub Codespaces increases productivity and lowers barriers</title><link href="https://victoria.dev/archive/how-github-codespaces-increases-productivity-and-lowers-barriers/"/><id>https://victoria.dev/archive/how-github-codespaces-increases-productivity-and-lowers-barriers/</id><author><name>Victoria Drake</name></author><published>2020-08-15T16:08:08-04:00</published><updated>2020-08-15T16:08:08-04:00</updated><content type="html"><![CDATA[<p>The most recent integration between Visual Studio Code and GitHub can help make development accessible and welcoming: Codespaces in GitHub!</p>
<p>Now in beta, <a href="https://docs.github.com/en/github/developing-online-with-codespaces/about-codespaces">GitHub Codespaces</a> provide an online, in-the-browser IDE powered by Visual Studio Code. This lets you use this full-featured IDE, complete with extensions, terminal, Git commands, and all the settings you&rsquo;re accustomed to, on any machine. You can now bring your development workflow anywhere using a tablet or other browser-based device.</p>
<p>Codespaces is great news for open source contributors, too. <a href="https://docs.github.com/en/github/developing-online-with-codespaces/configuring-codespaces-for-your-project">Adding a codespace configuration</a> to your project is a great way to invite new folks to easily start contributing.</p>
<p>A new open source contributor or new hire at your organization can quickly fire up a codespace and get hacking on a <code>good first issue</code> with no local environment set up or installations necessary!</p>
<p><img src="open-with-codespaces-button.png" alt="Starting a new codespace"></p>
<p>We&rsquo;ve added codespace configuration settings over at the <a href="https://github.com/OWASP/wstg">OWASP Web Security Testing Guide (WSTG)</a>. Want to take it for a spin? See our <a href="https://github.com/OWASP/wstg/issues">open issues</a>.</p>
<h2 id="configuring-codespaces">Configuring Codespaces</h2>
<p>You can use Visual Studio Code&rsquo;s <code>.devcontainer</code> folder to configure a development container for your repository as well.</p>
<p>Many <a href="https://github.com/microsoft/vscode-dev-containers/tree/master/containers">pre-built containers are available</a> &ndash; just copy the <code>.devcontainer</code> you need to your repository root. If your repository doesn&rsquo;t have one, a <a href="https://github.com/microsoft/vscode-dev-containers/tree/master/containers/codespaces-linux">default base Linux image</a> will be used.</p>
<p>Here&rsquo;s a reason to remove <code>.vscode</code> from your <code>.gitignore</code> file. Any new codespaces created in your repository will now respect settings found at <code>.vscode/settings.json</code>. This means that your online IDE can have the same Workspace configuration as you have on your local machine. Isn&rsquo;t that useful!</p>
<h2 id="making-codespaces-personal">Making Codespaces personal</h2>
<p>For next-level <a href="https://docs.github.com/en/github/developing-online-with-codespaces/personalizing-codespaces-for-your-account">dotfiles personalization</a>, consider committing relevant files from your local <code>dotfiles</code> folder as a public GitHub repository at <code>yourusername/dotfiles</code>.</p>
<p>When you create a new codespace, this brings in your configurations, such as shell aliases and preferences, by creating symlinks to dotfiles in your codespace <code>$HOME</code>. This personalizes all the codespaces you create in your account.</p>
<p>Need some inspiration? Browse <a href="https://github.com/victoriadrake/dotfiles">my dotfiles repository on GitHub</a>.</p>
<p><a href="https://docs.github.com/en/github/developing-online-with-codespaces/developing-in-a-codespace">Developing in a codespace</a> is a familiar experience for Visual Studio Code users, right down to running an application locally.</p>
<p>Thanks to <a href="https://docs.github.com/en/github/developing-online-with-codespaces/developing-in-a-codespace">port forwarding</a>, when I run an application in a codespace terminal, clicking on the resulting <code>localhost</code> URL takes me to the appropriate port as output from my codespace.</p>
<p>When I&rsquo;m working on this website in my codespace, for example, I run <code>hugo serve</code> then click the provided <code>localhost:1313</code> link to see a preview of my changes in another browser tab.</p>
<p>Want to stay in sync between devices? There&rsquo;s an extension for that. You can <a href="https://docs.github.com/en/github/developing-online-with-codespaces/connecting-to-your-codespace-from-visual-studio-code">connect to your codespace from Visual Studio Code</a> on your local machine so you can always pick up right where you left off.</p>
<h2 id="develop-anywhere">Develop anywhere</h2>
<p>Codespaces is a super exciting addition to my GitHub workflow. It allows me to access my full development process pretty much anywhere, using devices like my iPad.</p>
<p>It&rsquo;ll also make it easier for new open source contributors or new hires at your organization to hit the ground running with a set-up IDE. If you have access to the limited beta, I invite you to spin up a codespace and try <a href="https://github.com/OWASP/wstg/issues">contributing to the WSTG</a>, or to <a href="https://github.com/victoriadrake?tab=repositories">an issue on one of my open source projects</a>.</p>
<p>I&rsquo;m looking forward to general availability and seeing what the open source community will dream up for GitHub Codespaces next!</p>
<p>And yes &ndash; codespaces support <a href="https://github.com/victoriadrake/kabukicho-vscode">your favorite Visual Studio Code theme</a>. 😈</p>
<figure class="screenshot"><img src="/archive/how-github-codespaces-increases-productivity-and-lowers-barriers/codespace.png"
    alt="A screenshot of my codespace"><figcaption>
      <p>Screenshot of a codespace with the Kabukichō theme for Visual Studio Code</p>
    </figcaption>
</figure>

]]></content></entry><entry><title type="html">How to create a self-documenting Makefile</title><link href="https://victoria.dev/posts/how-to-create-a-self-documenting-makefile/"/><id>https://victoria.dev/posts/how-to-create-a-self-documenting-makefile/</id><author><name>Victoria Drake</name></author><published>2020-08-05T08:55:19-04:00</published><updated>2020-08-05T08:55:19-04:00</updated><content type="html"><![CDATA[<p>My new favorite way to completely underuse a Makefile? Creating personalized, per-project repository workflow command aliases that you can check in.</p>
<p>Can a Makefile improve your DevOps and keep developers happy? How awesome would it be if a new developer working on your project didn&rsquo;t start out by copying and pasting commands from your README? What if instead of:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>pip3 install pipenv
</span></span><span style="display:flex;"><span>pipenv shell --python 3.8
</span></span><span style="display:flex;"><span>pipenv install --dev
</span></span><span style="display:flex;"><span>npm install
</span></span><span style="display:flex;"><span>pre-commit install --install-hooks
</span></span><span style="display:flex;"><span><span style="color:#75715e"># look up how to install Framework X...</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># copy and paste from README...</span>
</span></span><span style="display:flex;"><span>npm run serve
</span></span></code></pre></div><p>&hellip; you could just type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>make start
</span></span></code></pre></div><p>&hellip;and then start working?</p>
<h2 id="making-a-difference">Making a difference</h2>
<p>I use <code>make</code> every day to take the tedium out of common development activities like updating programs, installing dependencies, and testing. To do all this with a Makefile (GNU make), we use <a href="https://www.gnu.org/software/make/manual/make.html#Rules">Makefile rules</a> and <a href="https://www.gnu.org/software/make/manual/make.html#Recipes">recipes</a>. Similar parallels exist for POSIX flavor make, like <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html#tag_20_76_13_04">Target Rules</a>; here&rsquo;s a <a href="https://nullprogram.com/blog/2017/08/20/">great article</a> on POSIX-compatible Makefiles.</p>
<p>Here&rsquo;s some examples of things we can <code>make</code> easier (sorry):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span><span style="color:#a6e22e">update</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Do apt upgrade and autoremove
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    sudo apt update <span style="color:#f92672">&amp;&amp;</span> sudo apt upgrade -y
</span></span><span style="display:flex;"><span>    sudo apt autoremove -y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">env</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    pip3 install pipenv
</span></span><span style="display:flex;"><span>    pipenv shell --python 3.8
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">install</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Install or update dependencies
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    pipenv install --dev
</span></span><span style="display:flex;"><span>    npm install
</span></span><span style="display:flex;"><span>    pre-commit install --install-hooks
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">serve</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Run the local development server
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    hugo serve --enableGitInfo --disableFastRender --environment development
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">initial</span><span style="color:#f92672">:</span> update env install serve <span style="color:#75715e">## Install tools and start development server
</span></span></span></code></pre></div><p>Now we have some command-line aliases that you can check in! Great idea! If you&rsquo;re wondering what&rsquo;s up with that weird <code>##</code> comment syntax, it gets better.</p>
<h2 id="a-self-documenting-makefile">A self-documenting Makefile</h2>
<p>Aliases are great, if you remember what they all are and what they do without constantly typing <code>cat Makefile</code>. Naturally, you need a <code>help</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> help
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Show this help
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    @egrep -h <span style="color:#e6db74">&#39;\s##\s&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | sort | awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {printf &#34;\033[36m%-20s\033[0m %s\n&#34;, $$1, $$2}&#39;</span>
</span></span></code></pre></div><p>With a little command-line magic, this <code>egrep</code> command takes the output of <code>MAKEFILE_LIST</code>, sorts it, and uses <code>awk</code> to find strings that follow the <code>##</code> pattern. It then prints a helpful formatted version of the comments.</p>
<p>We&rsquo;ll put it at the top of the file so it&rsquo;s the default target. Now to see all our handy shortcuts and what they do, we just run <code>make</code>, or <code>make help</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>help                 Show this help
</span></span><span style="display:flex;"><span>initial              Install tools and start development server
</span></span><span style="display:flex;"><span>install              Install or update dependencies
</span></span><span style="display:flex;"><span>serve                Run the local development server
</span></span><span style="display:flex;"><span>update               Do apt upgrade and autoremove
</span></span></code></pre></div><p>Now we have our very own personalized and project-specific CLI tool!</p>
<p>The possibilities for improving your DevOps flow with a self-documenting Makefile are almost endless. You can use one to simplify any workflow and produce some very happy developers.</p>
<p>Please enjoy the (live!) Makefile I use to manage and develop this Hugo site. I hope it inspires you!</p>
<details>
<summary>My Hugo site Makefile</summary>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SHELL <span style="color:#f92672">:=</span> /bin/bash
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.POSIX</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> help env install upgrade-hugo serve build start initial
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">help</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Show this help
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	@egrep -h <span style="color:#e6db74">&#39;\s##\s&#39;</span> <span style="color:#66d9ef">$(</span>MAKEFILE_LIST<span style="color:#66d9ef">)</span> | sort | awk <span style="color:#e6db74">&#39;BEGIN {FS = &#34;:.*?## &#34;}; {printf &#34;\033[36m%-20s\033[0m %s\n&#34;, $$1, $$2}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">env</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	pip3 install pipenv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shell</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Enter the virtual environment
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	pipenv shell
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">install</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Install or update dependencies
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	pipenv install --dev
</span></span><span style="display:flex;"><span>	pre-commit install --install-hooks
</span></span><span style="display:flex;"><span>	npm install
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>HUGO_VERSION<span style="color:#f92672">:=</span><span style="color:#66d9ef">$(</span>shell curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | grep <span style="color:#e6db74">&#39;tag_name&#39;</span> | cut -d <span style="color:#e6db74">&#39;&#34;&#39;</span> -f <span style="color:#ae81ff">4</span> | cut -c 2-<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">upgrade-hugo</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Get the latest Hugo
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	mkdir tmp/ <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	cd tmp/ <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	curl -sSL https://github.com/gohugoio/hugo/releases/download/v<span style="color:#66d9ef">$(</span>HUGO_VERSION<span style="color:#66d9ef">)</span>/hugo_extended_<span style="color:#66d9ef">$(</span>HUGO_VERSION<span style="color:#66d9ef">)</span>_Linux-64bit.tar.gz | tar -xvzf- <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	sudo mv hugo /usr/local/bin/ <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	cd .. <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>	rm -rf tmp/
</span></span><span style="display:flex;"><span>	hugo version
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dev</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Run the local development server
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	git submodule update --init --recursive
</span></span><span style="display:flex;"><span>	hugo serve --enableGitInfo --disableFastRender --environment development
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">future</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Run the local development server in the future
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	hugo serve --enableGitInfo --buildFuture --disableFastRender --environment development
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build</span><span style="color:#f92672">:</span> <span style="color:#75715e">## Build site
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	hugo --minify --cleanDestinationDir
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">initial</span><span style="color:#f92672">:</span> env install upgrade-hugo serve <span style="color:#75715e">## Install tools and start development server
</span></span></span></code></pre></div></details>
]]></content></entry><entry><title type="html">Writing efficient Django</title><link href="https://victoria.dev/posts/writing-efficient-django/"/><id>https://victoria.dev/posts/writing-efficient-django/</id><author><name>Victoria Drake</name></author><published>2020-07-09T04:02:47-05:00</published><updated>2020-07-09T04:02:47-05:00</updated><content type="html"><![CDATA[<p>I like Django. It&rsquo;s a well-considered and intuitive framework with a name I can pronounce out loud. You can use it to quickly spin up a weekend-sized project, and you can still use it to run <a href="https://applybyapi.com">full-blown production applications</a> at scale. I&rsquo;ve done both these things, and over the years I&rsquo;ve discovered how to use some of Django&rsquo;s features for maximum efficiency. These are:</p>
<ul>
<li><a href="#class-based-versus-function-based-views">Class-based versus function-based views</a></li>
<li><a href="#django-models">Django models</a></li>
<li><a href="#retrieving-objects-with-queries">Retrieving objects with queries</a></li>
</ul>
<p>Understanding these main features are the building blocks for maximizing development efficiency with Django. They&rsquo;ll build the foundation for you to <a href="/posts/increase-developer-confidence-with-a-great-django-test-suite/">test efficiently</a> and <a href="/blog/django-project-best-practices-to-keep-your-developers-happy/">create an awesome development experience for your engineers</a>. Let&rsquo;s look at how these tools let you create a performant Django application that&rsquo;s pleasant to build and maintain.</p>
<h2 id="class-based-versus-function-based-views">Class-based versus function-based views</h2>
<p>Remember that Django is all Python under the hood. When it comes to views, you&rsquo;ve got two choices: <a href="https://docs.djangoproject.com/en/3.2/topics/http/views/">view functions</a> (sometimes called &ldquo;function-based views&rdquo;), or <a href="https://docs.djangoproject.com/en/3.2/topics/class-based-views/">class-based views</a>.</p>
<p>Years ago when I first built <a href="https://applybyapi.com">ApplyByAPI</a>, it was initially composed entirely of function-based views. These offer granular control, and are good for implementing complex logic; just as in a Python function, you have complete control (for better or worse) over what the view does. With great control comes great responsibility, and function-based views can be a little tedious to use. You&rsquo;re responsible for writing all the necessary methods for the view to work - this is what allows you to completely tailor your application.</p>
<p>In the case of ApplyByAPI, there were only a sparse few places where that level of tailored functionality was really necessary. Everywhere else, function-based views began making my life harder. Writing what is essentially a custom view for run-of-the-mill operations like displaying data on a list page became tedious, repetitive, and error-prone.</p>
<p>With function-based views, you&rsquo;ll need figure out which Django methods to implement in order to handle requests and pass data to views. Unit testing can take some work to write. In short, the granular control that function-based views offer also requires some granular tedium to properly implement.</p>
<p>I ended up holding back ApplyByAPI while I refactored the majority of the views into class-based views. This was not a small amount of work and refactoring, but when it was done, I had a bunch of tiny views that made a huge difference. I mean, just look at this one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ApplicationsList</span>(ListView):
</span></span><span style="display:flex;"><span>    model <span style="color:#f92672">=</span> Application
</span></span><span style="display:flex;"><span>    template_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;applications.html&#34;</span>
</span></span></code></pre></div><p>It&rsquo;s three lines. My developer ergonomics, and my life, got a lot easier.</p>
<p>You may think of class-based views as templates that cover most of the functionality any app needs. There are views for displaying lists of things, for viewing a thing in detail, and <a href="https://docs.djangoproject.com/en/3.2/ref/class-based-views/generic-editing/">editing views</a> for performing CRUD (Create, Read, Update, Delete) operations. Because implementing one of these generic views takes only a few lines of code, my application logic became dramatically succinct. This gave me less repeated code, fewer places for something to go wrong, and a more manageable application in general.</p>
<p>Class-based views are fast to implement and use. The built-in class-based generic views may require less work to test, since you don&rsquo;t need to write tests for the base view Django provides. (Django does its own tests for that; no need for your app to double-check.) To tweak a generic view to your needs, you can <a href="https://docs.djangoproject.com/en/3.2/topics/class-based-views/#subclassing-generic-views">subclass a generic view</a> and override attributes or methods. In my case, since I only needed to write tests for any customizations I added, my test files became dramatically shorter, as did the time and resources it took to run them.</p>
<p>When you&rsquo;re weighing the choice between function-based or class-based views, consider the amount of customization the view needs, and the future work that will be necessary to test and maintain it. If the logic is common, you may be able to hit the ground running with a generic class-based view. If you need sufficient granularity that re-writing a base view&rsquo;s methods would make it overly complicated, consider a function-based view instead.</p>
<h2 id="django-models">Django models</h2>
<p><a href="https://docs.djangoproject.com/en/3.2/topics/db/models/">Models</a> organize your Django application&rsquo;s central concepts to help make them flexible, robust, and easy to work with. If used wisely, models are a powerful way to collate your data into a definitive source of truth.</p>
<p>Like views, Django provides some built-in model types for the convenience of implementing basic authentication, including the <a href="https://docs.djangoproject.com/en/3.2/ref/contrib/auth/">User</a> and <a href="https://docs.djangoproject.com/en/3.2/ref/contrib/auth/">Permission</a> models. For everything else, you can create a model that reflects your concept by <a href="https://docs.djangoproject.com/en/3.2/topics/db/models/#model-inheritance">inheriting from a parent Model class</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">StaffMember</span>(models<span style="color:#f92672">.</span>Model):
</span></span><span style="display:flex;"><span>    user <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>OneToOneField(User, on_delete<span style="color:#f92672">=</span>models<span style="color:#f92672">.</span>CASCADE)
</span></span><span style="display:flex;"><span>    company <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>OneToOneField(Company, on_delete<span style="color:#f92672">=</span>models<span style="color:#f92672">.</span>CASCADE)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__str__</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>company<span style="color:#f92672">.</span>name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; - &#34;</span> <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>user<span style="color:#f92672">.</span>email
</span></span></code></pre></div><p>When you create a custom model in Django, you subclass <a href="https://github.com/django/django/blob/master/django/db/models/base.py">Django&rsquo;s Model class</a> and take advantage of all its power. Each model you create generally maps to a database table. Each attribute is a database field. This gives you the ability to create objects to work with that humans can better understand.</p>
<p>You can make a model useful to you by defining its fields. Many <a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#model-field-types">built-in field types</a> are conveniently provided. These help Django figure out the data type, the HTML <a href="https://docs.djangoproject.com/en/3.2/ref/forms/widgets/">widget</a> to use when rendering a form, and even <a href="https://docs.djangoproject.com/en/3.2/ref/forms/validation/">form validation</a> requirements. If you need to, you can <a href="https://docs.djangoproject.com/en/3.2/howto/custom-model-fields/">write custom model fields</a>.</p>
<p>Database <a href="https://docs.djangoproject.com/en/3.2/topics/db/models/#relationships">relationships</a> can be defined using a <a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#django.db.models.ForeignKey">ForeignKey</a> field (many-to-one), or a <a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#django.db.models.ManyToManyField">ManyToManyField</a> (give you three guesses). If those don&rsquo;t suffice, there&rsquo;s also a <a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#django.db.models.OneToOneField">OneToOneField</a>. Together, these allow you to define relations between your models with levels of complexity limited only by your imagination. (Depending on the imagination you have, this may or may not be an advantage.)</p>
<h2 id="retrieving-objects-with-queries">Retrieving objects with queries</h2>
<p>Use your model&rsquo;s Manager (<code>objects</code> by default) to <a href="https://docs.djangoproject.com/en/3.2/topics/db/queries/#retrieving-objects">construct a QuerySet</a>. This is a representation of objects in your database that you can refine, using methods, to retrieve specific subsets. All available methods are in the <a href="https://docs.djangoproject.com/en/3.2/ref/models/querysets/#django.db.models.query.QuerySet">QuerySet API</a> and can be chained together for even more fun.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>Post<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>filter(
</span></span><span style="display:flex;"><span>    type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;new&#34;</span>
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">.</span>exclude(
</span></span><span style="display:flex;"><span>    title__startswith<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Blockchain&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Some methods return new QuerySets, such as <a href="https://docs.djangoproject.com/en/3.2/ref/models/querysets/#filter"><code>filter()</code></a>, or <a href="https://docs.djangoproject.com/en/3.2/ref/models/querysets/#exclude"><code>exclude()</code></a>. Chaining these can give you powerful queries without affecting performance, as QuerySets aren&rsquo;t fetched from the database <a href="https://docs.djangoproject.com/en/3.2/ref/models/querysets/#when-querysets-are-evaluated">until they are evaluated</a>. Methods that evaluate a QuerySet include <code>get()</code>, <a href="https://docs.djangoproject.com/en/3.2/ref/models/querysets/#count"><code>count()</code></a>, <code>len()</code>, <code>list()</code>, or <code>bool()</code>.</p>
<p>Iterating over a QuerySet also evaluates it, so avoid doing so where possible to improve query performance. For instance, if you just want to know if an object is present, you can use <code>exists()</code> to avoid iterating over database objects.</p>
<p>Use <a href="https://docs.djangoproject.com/en/3.2/ref/models/querysets/#django.db.models.query.QuerySet.get"><code>get()</code></a> in cases where you want to retrieve a specific object. This method raises <a href="https://docs.djangoproject.com/en/3.2/ref/exceptions/#django.core.exceptions.MultipleObjectsReturned"><code>MultipleObjectsReturned</code></a> if something unexpected happens, as well as the <code>DoesNotExist</code> exception, if, take a guess.</p>
<p>If you&rsquo;d like to get an object that may not exist in the context of a user&rsquo;s request, use the convenient <a href="https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#get-object-or-404"><code>get_object_or_404()</code></a> or <a href="https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#get-list-or-404"><code>get_list_or_404()</code></a> which raises <a href="https://docs.djangoproject.com/en/3.2/topics/http/views/#django.http.Http404"><code>Http404</code></a> instead of <a href="https://docs.djangoproject.com/en/3.2/ref/models/instances/#django.db.models.Model.DoesNotExist"><code>DoesNotExist</code></a>. These helpful <a href="https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/">shortcuts</a> are suited to just this purpose. To create an object that doesn&rsquo;t exist, there&rsquo;s also the convenient <a href="https://docs.djangoproject.com/en/3.2/ref/models/querysets/#get-or-create"><code>get_or_create()</code></a>.</p>
<!-- omit in toc -->
<h2 id="efficient-essentials">Efficient essentials</h2>
<p>You&rsquo;ve now got a handle on these three essential tools for building your efficient Django application &ndash; congratulations! You can make Django work even better for you by learning about <a href="/posts/manipulating-data-with-django-migrations/">manipulating data with migrations</a>, <a href="/posts/increase-developer-confidence-with-a-great-django-test-suite/">testing effectively</a>, and <a href="/blog/django-project-best-practices-to-keep-your-developers-happy/">setting up your team&rsquo;s Django development for maximum happiness</a>.</p>
<p>If you&rsquo;re going to build on GitHub, you may like to set up my <a href="https://github.com/victoriadrake/django-security-check">django-security-check GitHub Action</a>. In the meantime, you&rsquo;re well on your way to building a beautiful software project.</p>
]]></content></entry><entry><title type="html">Look mom, I&amp;#39;m a GitHub Action Hero</title><link href="https://victoria.dev/archive/look-mom-im-a-github-action-hero/"/><id>https://victoria.dev/archive/look-mom-im-a-github-action-hero/</id><author><name>Victoria Drake</name></author><published>2020-06-27T09:06:33-04:00</published><updated>2020-06-27T09:06:33-04:00</updated><content type="html"><![CDATA[<p>GitHub recently interviewed me for their blog editorial entitled <a href="https://github.blog/2020-06-26-github-action-hero-victoria-drake/">GitHub Action Hero: Victoria Drake</a>. Here&rsquo;s a behind-the-scenes peek at the original interview questions and my answers.</p>
<h2 id="what-is-the-name-of-your-action-please-include-a-link-too">What is the name of your Action? Please include a link too.</h2>
<p>Among the several Actions I&rsquo;ve built, I have two current favorites. One is <a href="https://github.com/victoriadrake/hugo-remote">hugo-remote</a>, which lets you continuously deploy a Hugo static site from a private source repository to a public GitHub Pages repository. This keeps the contents of the source repository private, such as your unreleased drafts, while still allowing you to have a public open source site using GitHub Pages.</p>
<p>The second is <a href="https://github.com/victoriadrake/django-security-check">django-security-check</a>. It&rsquo;s an effortless way to continuously check that your production Django application is free from a variety of security misconfigurations. You can think of it as your little CI/CD helper for busy projects &ndash; a security linter!</p>
<h2 id="tell-us-a-little-bit-more-about-yourselfhow-did-you-get-started-in-software-tools">Tell us a little bit more about yourself—how did you get started in software tools?</h2>
<p>When I was a kid, I spent several summer vacations coding a huge medieval fantasy world MUD (Multi-User Dungeon, like a multiplayer role-playing game) written in LPC, with friends. It was entirely text-based, and built and played via Telnet. I fell in love with the terminal and learned a lot about object-oriented programming and prototype-based programming early on.</p>
<p>I became a freelance developer and had the privilege of working on a wide variety of client projects. Realizing the difficulty that companies have with hiring experienced developers, I built <a href="https://ApplyByAPI.com">ApplyByAPI.com</a> to help. As you might imagine, it allows candidates to apply for jobs via API, instead of emailing a resume. It&rsquo;s based on the Django framework, so in the process, I learned even more about building reusable units of software.</p>
<p>When I became a co-author and a core maintainer for the <a href="https://github.com/OWASP/wstg">Open Web Application Security Project (OWASP) Web Security Testing Guide (WSTG)</a>, I gained an even broader appreciation for how a prototype-based, repeatable approach can help build secure web applications. Organizations worldwide consider the WSTG the foremost open source resource for testing the security of web applications. We&rsquo;ve applied this thinking via the use of GitHub Actions in our repository &ndash; I&rsquo;ll tell you more about that later.</p>
<p>Whether I&rsquo;m creating an open source tool or leading a development team, my childhood experience still informs how I think about programming today. I strive to create repeatable units of software like GitHub Actions &ndash; only now, I make them for large enterprises in the real world!</p>
<h2 id="what-is-the-story-behind-your-built-github-action-why-did-you-build-this">What is the story behind your built GitHub Action? (Why did you build this?)</h2>
<p>Developers take on a lot of responsibility when it comes to building secure applications these days. I&rsquo;m a full-time senior software developer at a cybersecurity company. I&rsquo;ve found that I&rsquo;m maximally productive when I create systems and processes that help myself and my team make desired outcomes inevitable. So I spend my free time building tools that make it easy for other developers to build secure software as well. My Actions help to automate contained, repeatable units of work that can make a big difference in a developer&rsquo;s day.</p>
<h2 id="do-you-have-future-plans-for-this-or-other-actions">Do you have future plans for this or other Actions?</h2>
<p>Yes! I&rsquo;m always finding ways for tools like GitHub Actions to boost the velocity of technical teams, whether at work or in my open source projects. Remember the Open Web Application Security Project? In the work I&rsquo;ve lead with OWASP, I&rsquo;ve championed the effort to increase automation using GitHub Actions to maintain quality, securely deploy new versions to the web, and even build PDFs of the WSTG. We&rsquo;re constantly looking into new ways that GitHub Actions can make our lives easier and our readers&rsquo; projects more secure.</p>
<h2 id="what-has-been-your-favorite-feature-of-github-actions">What has been your favorite feature of GitHub Actions?</h2>
<p>I like that I can build an Action using familiar and portable technologies, like Docker. Actions are easy for collaborators to work on too, since in the case of a Dockerized Action, you can use any language your team is comfortable with. This is especially useful in large organizations with polyglot teams and environments. There aren&rsquo;t any complicated dependencies for running these portable tasks, and you don&rsquo;t need to learn any special frameworks to get started.</p>
<p>One of my first blog posts about GitHub Actions even describes how I used an Action to run a Makefile! This is especially useful for large legacy applications that want to modernize their pipeline by using GitHub Actions.</p>
<h2 id="what-are-the-biggest-challenges-youve-faced-while-building-your-github-action">What are the biggest challenges you’ve faced while building your GitHub Action?</h2>
<p>The largest challenge of GitHub Actions isn&rsquo;t really in GitHub Actions, but in the transition of legacy software and company culture.</p>
<p>Migrating legacy software is always challenging, particularly with large legacy applications. Moving to modern CI/CD processes requires changes at the software level, team level, and even a shift in thinking when it comes to individual developers. It can help to have a tool like GitHub Actions, which is at once seamlessly modern and familiar, when transitioning legacy code to a modern pipeline.</p>
<h2 id="anything-else-you-would-like-to-share-about-your-experience-any-stories-or-lessons-learned-through-building-your-action">Anything else you would like to share about your experience? Any stories or lessons learned through building your Action?</h2>
<p>I&rsquo;m happiest when I&rsquo;m solving a challenge that makes developing secure software less challenging in the future, both for myself and for the technology organization I&rsquo;m leading. With tools like GitHub Actions, a lot of mental overhead can be offloaded to automatic processes &ndash; like getting a whole other brain, for free! This can massively help organizations that are ready to scale up their development output.</p>
<p>In the realm of cybersecurity, not only does creating portable and reusable software make developers&rsquo; lives easier, it helps to make whole workflows repeatable, which in turn makes software development processes more secure. With smart processes in place, technical teams are happier. As an inevitable result, they&rsquo;ll build better software for customers, too.</p>
]]></content></entry><entry><title type="html">Technical ergonomics for the efficient developer</title><link href="https://victoria.dev/posts/technical-ergonomics-for-the-efficient-developer/"/><id>https://victoria.dev/posts/technical-ergonomics-for-the-efficient-developer/</id><author><name>Victoria Drake</name></author><published>2020-06-22T06:33:28-04:00</published><updated>2020-06-22T06:33:28-04:00</updated><content type="html"><![CDATA[<p>This article isn&rsquo;t going to tell you about saving your neck with a Roost stand, or your wrists with a split keyboard - <a href="https://heronebag.com/blog/next-level-ergonomics-for-remote-work-developers/">I&rsquo;ve already done that</a>. This article is about saving your brain.</p>
<p>When I first began to program full time, I found myself constantly tired from the mental exertion. Programming is hard! Thankfully, you can take some solace in knowing it gets easier with practice, and with a great supporting cast. Some very nice folks who preceded us both came up with tools to make the difficult bits of communicating with computers much easier on our poor human meatbrains.</p>
<p>I invite you to explore these super helpful technical tools. They&rsquo;ll improve your development set up and alleviate much of the mental stress of programming. You soon won&rsquo;t believe you could have done without them.</p>
<h2 id="not-your-average-syntax-highlighting">Not your average syntax highlighting</h2>
<p>If you&rsquo;re still working with syntax highlighting that just picks out variable and class names for you, that&rsquo;s cute. Time to turn it up a notch.</p>
<p><img src="Screenshot_20200612_185858.png" alt="My current VSC theme and syntax highlighting"></p>
<p>In all seriousness, syntax highlighting can make it much easier to find what you&rsquo;re looking for on your screen: the current line, where your current code block starts and ends, or the absolute game-changing which-bracket-set-am-I-in highlight. I primarily use Visual Studio Code, but similar extensions can be found for the major text editors.</p>
<p>The theme pictured in Visual Studio Code above is <a href="https://github.com/victoriadrake/kabukicho-vscode">Kabukichō</a>. I made it.</p>
<h2 id="use-git-hooks">Use Git hooks</h2>
<p>I previously brought you <a href="/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/">an interactive pre-commit checklist in the style of infomercials</a> that&rsquo;s both fun and useful for reinforcing the quality of your commits. But that&rsquo;s not all!</p>
<p>Git hooks are scripts that run automatically at pre-determined points in your workflow. Use them well, and you can save a ton of brainpower. A <code>pre-commit</code> hook remembers to do things like lint and format code, and even runs local tests for you before you indelibly push something embarrassing. Hooks can be a little annoying to share (the <code>.git/hooks</code> directory isn&rsquo;t tracked and thus omitted when you clone or fork a repository) but there&rsquo;s a framework for that: the confusingly-named <a href="https://pre-commit.com/">pre-commit framework</a>, which allows you to create a sharable configuration file of Git hook plugins, not just for <code>pre-commit</code>.</p>
<p>I spend a majority of my time these days coding in Python, so here is my current <code>.pre-commit-config.yaml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">fail_fast: true
repos:
  - repo: https://github.com/DavidAnson/markdownlint-cli2
    rev: v0.1.3
    hooks:
    - id: markdownlint-cli2
      name: markdownlint-cli2
      description: "Checks the style of Markdown/CommonMark files."
      entry: markdownlint-cli2
      language: node
      types: [markdown]
      minimum_pre_commit_version: 0.15.0</span>
</span></span></code></pre></div><p>There are tons of <a href="https://pre-commit.com/hooks.html">supported hooks</a> to explore.</p>
<h2 id="use-a-type-system">Use a type system</h2>
<p>If you write in languages like Python and JavaScript, get yourself an early birthday present and start using a static type system. Not only will this help improve the way you think about code, it can help make type errors clear before running a single line.</p>
<p>For Python, I like using <a href="https://github.com/python/mypy">mypy</a> for static type checking. You can set it up as a <code>pre-commit</code> hook (see above) and it&rsquo;s <a href="https://code.visualstudio.com/docs/python/linting#_mypy">supported in Visual Studio Code too</a>.</p>
<p><a href="https://www.typescriptlang.org/">TypeScript</a> is my preferred way to write JavaScript. You can run the compiler on the command line using Node.js (see <a href="https://github.com/Microsoft/TypeScript">instructions in the repo</a>), it works pretty well <a href="https://code.visualstudio.com/Docs/languages/typescript">with Visual Studio Code</a> out of the box, and of course there are multiple options for <a href="https://code.visualstudio.com/Docs/languages/typescript#_typescript-extensions">extension integrations</a>.</p>
<h2 id="quit-unnecessarily-beating-up-your-meatbrain">Quit unnecessarily beating up your meatbrain</h2>
<p>I mean, you wouldn&rsquo;t stand on your head all day to do your work. It would be rather inconvenient to read things upside down all the time (at least <a href="https://www.youtube.com/watch?v=jKUVpBJalNQ">until your brain adjusted</a>), and in any case you&rsquo;d likely get uncomfortably congested in short order. Working without taking advantage of the technical ergonomic tools I&rsquo;ve given you today is a little like unnecessary inversion - why would you, if you don&rsquo;t have to?</p>
]]></content></entry><entry><title type="html">If you want to build a treehouse, start at the bottom</title><link href="https://victoria.dev/archive/if-you-want-to-build-a-treehouse-start-at-the-bottom/"/><id>https://victoria.dev/archive/if-you-want-to-build-a-treehouse-start-at-the-bottom/</id><author><name>Victoria Drake</name></author><published>2020-05-11T05:46:47-04:00</published><updated>2020-05-11T05:46:47-04:00</updated><content type="html"><![CDATA[<p>If you&rsquo;ve ever watched a kid draw a treehouse, you have some idea of how applications are built when security isn&rsquo;t made a priority. It&rsquo;s far more fun to draw the tire swing, front porch, and swimming pool than to worry about how a ten-thousand-gallon bucket of water stays suspended in midair. With too much attention spent on fun and flashy features, foundations suffer.</p>
<p><img src="for-the-turrets.png" alt="A comic I drew about building castles with poor foundations. It&rsquo;s not that funny."></p>
<p>Of course, spending undue hours building a back end like Fort Knox may not be necessary for your application, either. Being an advocate for security doesn&rsquo;t mean always wearing your tinfoil hat (although you do look dashing in it) but does mean building in an appropriate amount of security.</p>
<p>How much security is appropriate? The answer, frustratingly, is, &ldquo;it depends.&rdquo; The right amount of security for your application depends on who&rsquo;s using it, what it does, and most importantly, what undesirable things it could be made to do. It takes some analysis to make decisions about the kinds of risks your application faces and how you&rsquo;ll prepare to handle them. Okay, now&rsquo;s a good time to don your tinfoil hat. Let&rsquo;s imagine the worst.</p>
<h2 id="threat-modeling-whats-the-worst-that-could-happen">Threat modeling: what&rsquo;s the worst that could happen</h2>
<p>A <em>threat model</em> is a stuffy term for the result of trying to imagine the worst things that could happen to an application. Using your imagination to assess risks (fittingly called <em>risk assessment</em>) is a conveniently non-destructive method for finding ways an application can be attacked. You won&rsquo;t need any tools; just an understanding of how the application might work, and a little imagination. You&rsquo;ll want to record your results with pen and paper. For the younger folks, that means the notes app on your phone.</p>
<p>A few different methodologies for application risk assessment can be found in the software world, including the in-depth <a href="https://csrc.nist.gov/publications/detail/sp/800-30/rev-1/final">NIST Special Publication 800-30</a>. Each method&rsquo;s framework has specific steps and output, and will go into various levels of detail when it comes to defining threats. If following a framework, first choose the one you&rsquo;re most likely to complete. You can always add more depth and detail from there.</p>
<p>Even informal risk assessments are beneficial. Typically taking the form of a set of questions, they may be oriented around possible threats, the impact to assets, or ways a vulnerability could be exploited. Here are some examples of questions addressing each orientation:</p>
<ul>
<li>What kind of adversary would want to break my app? What would they be after?</li>
<li>If the control of <em>x</em> fell into the wrong hands, what could an attacker do with it?</li>
<li>Where could a <em>x</em> vulnerability occur in my app?</li>
</ul>
<p>A basic threat model explains the technical, business, and human considerations for each risk. It will typically detail:</p>
<ul>
<li>The vulnerabilities or components that can cause the risk</li>
<li>The impact that a successful execution of the risk would have on the application</li>
<li>The consequences for the application&rsquo;s users or organization</li>
</ul>
<p>The result of a risk assessment exercise is your threat model; in other words, a list of things you would very much like not to occur. It is usually sorted in a hierarchy of risks, from the worst to the mildest. The worst risks have the most negative impact, and are most important to protect against. The mildest risks are the most acceptable - while still an undesirable outcome, they have the least negative impact on the application and users.</p>
<p>You can use this resulting hierarchy as a guide to determine how much of your cybersecurity efforts to apply to each risk area. An appropriate amount of security for your application will eliminate (where possible) or mitigate the worst risks.</p>
<h2 id="pushing-left">Pushing left</h2>
<p>Although it sounds like a dance move meme, <em>pushing left</em> refers instead to building in as much of your planned security as possible in the early stages of software development.</p>
<p>Building software is a lot like building a treehouse, just without the pleasant fresh air. You start with the basic supporting components, such as attaching a platform to a tree. Then comes the framing, walls, and roof, and finally, your rustic-modern Instagram-worthy wall hangings and deer bust.</p>
<p>The further along in the build process you are, the harder and more costly it becomes to make changes to a component that you&rsquo;ve already installed. If you discover a problem with the walls only after the roof is put in place, you may need to change or remove the roof in order to fix it. Similar parallels can be drawn for software components, only without similar ease in detangling the attached parts.</p>
<p>In the case of a treehouse, it&rsquo;s rather impossible to start with decorations or even a roof, since you can&rsquo;t really suspend them in midair. In the case of software development, it is, unfortunately, possible to build many top-layer components and abstractions without a sufficient supporting architecture. A push-left approach views each additional layer as adding cost and complication. Pushing left means attempting to mitigate security risks as much as possible at each development stage before proceeding to the next.</p>
<h2 id="building-bottom-to-top">Building bottom-to-top</h2>
<p>By considering your threat model in the early stages of developing your application, you reduce the chances of necessitating a costly remodel later on. You can make choices about architecture, components, and code that support the main security goals of your particular application.</p>
<p>While it&rsquo;s not possible to foresee all the functionality your application may one day need to support, it is possible to prepare a solid foundation that allows additional functionality to be added more securely. Building in appropriate security from the bottom to the top will help make mitigating security risks much easier in the future.</p>
]]></content></entry><entry><title type="html">Hugo vs Jekyll: an epic battle of static site generator themes</title><link href="https://victoria.dev/archive/hugo-vs-jekyll-an-epic-battle-of-static-site-generator-themes/"/><id>https://victoria.dev/archive/hugo-vs-jekyll-an-epic-battle-of-static-site-generator-themes/</id><author><name>Victoria Drake</name></author><published>2020-04-27T06:34:41-04:00</published><updated>2020-04-27T06:34:41-04:00</updated><content type="html"><![CDATA[<p>I recently took on the task of creating a documentation site theme for two projects. Both projects needed the same basic features, but one uses Jekyll while the other uses Hugo.</p>
<p>In typical developer rationality, there was clearly only one option. I decided to create the same theme in both frameworks, and to give you, dear reader, a side-by-side comparison.</p>
<p>This post isn&rsquo;t a comprehensive theme-building guide, but intended to familiarize you with the process of building a theme in either generator. Here&rsquo;s what we&rsquo;ll cover:</p>
<ul>
<li><a href="#how-theme-files-are-organized">How theme files are organized</a></li>
<li><a href="#where-to-put-content">Where to put content</a></li>
<li><a href="#how-templating-works">How templating works</a></li>
<li><a href="#creating-a-top-level-menu-with-the-pages-object">Creating a top-level menu with the <code>pages</code> object</a></li>
<li><a href="#creating-a-menu-with-nested-links-from-a-data-list">Creating a menu with nested links from a data list</a></li>
<li><a href="#putting-the-template-together">Putting the template together</a></li>
<li><a href="#create-a-stylesheet">Create a stylesheet</a>
<ul>
<li><a href="#sass-and-css-in-jekyll">Sass and CSS in Jekyll</a></li>
<li><a href="#sass-and-hugo-pipes-in-hugo">Sass and Hugo Pipes in Hugo</a></li>
</ul>
</li>
<li><a href="#configure-and-deploy-to-github-pages">Configure and deploy to GitHub Pages</a>
<ul>
<li><a href="#configure-jekyll">Configure Jekyll</a></li>
<li><a href="#configure-hugo">Configure Hugo</a></li>
<li><a href="#deploy-to-github-pages">Deploy to GitHub Pages</a></li>
</ul>
</li>
<li><a href="#showtime">Showtime</a></li>
<li><a href="#wait-who-won">Wait who won</a></li>
</ul>
<p>Here&rsquo;s a crappy wireframe of the theme I&rsquo;m going to create.</p>
<p><img src="wireframe.jpg" alt="A sketch of the finished page"></p>
<p>If you&rsquo;re planning to build-along, it may be helpful to serve the theme locally as you build it; both generators offer this functionality. For Jekyll, run <code>jekyll serve</code>, and for Hugo, <code>hugo serve</code>.</p>
<p>There are two main elements: the main content area, and the all-important sidebar menu. To create them, you&rsquo;ll need template files that tell the site generator how to generate the HTML page. To organize theme template files in a sensible way, you first need to know what directory structure the site generator expects.</p>
<h2 id="how-theme-files-are-organized">How theme files are organized</h2>
<p>Jekyll supports gem-based themes, which users can install like any other Ruby gems. This method hides theme files in the gem, so for the purposes of this comparison, we aren&rsquo;t using gem-based themes.</p>
<p>When you run <code>jekyll new-theme &lt;name&gt;</code>, Jekyll will scaffold a new theme for you. Here&rsquo;s what those files look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── assets
</span></span><span style="display:flex;"><span>├── Gemfile
</span></span><span style="display:flex;"><span>├── _includes
</span></span><span style="display:flex;"><span>├── _layouts
</span></span><span style="display:flex;"><span>│   ├── default.html
</span></span><span style="display:flex;"><span>│   ├── page.html
</span></span><span style="display:flex;"><span>│   └── post.html
</span></span><span style="display:flex;"><span>├── LICENSE.txt
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── _sass
</span></span><span style="display:flex;"><span>└── &lt;name&gt;.gemspec
</span></span></code></pre></div><p>The directory names are appropriately descriptive. The <code>_includes</code> directory is for small bits of code that you reuse in different places, in much the same way you&rsquo;d put butter on everything. (Just me?) The <code>_layouts</code> directory contains templates for different types of pages on your site. The <code>_sass</code> folder is for <a href="https://sass-lang.com/documentation/syntax">Sass</a> files used to build your site&rsquo;s stylesheet.</p>
<p>You can scaffold a new Hugo theme by running <code>hugo new theme &lt;name&gt;</code>. It has these files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── archetypes
</span></span><span style="display:flex;"><span>│   └── default.md
</span></span><span style="display:flex;"><span>├── layouts
</span></span><span style="display:flex;"><span>│   ├── 404.html
</span></span><span style="display:flex;"><span>│   ├── _default
</span></span><span style="display:flex;"><span>│   │   ├── baseof.html
</span></span><span style="display:flex;"><span>│   │   ├── list.html
</span></span><span style="display:flex;"><span>│   │   └── single.html
</span></span><span style="display:flex;"><span>│   ├── index.html
</span></span><span style="display:flex;"><span>│   └── partials
</span></span><span style="display:flex;"><span>│       ├── footer.html
</span></span><span style="display:flex;"><span>│       ├── header.html
</span></span><span style="display:flex;"><span>│       └── head.html
</span></span><span style="display:flex;"><span>├── LICENSE
</span></span><span style="display:flex;"><span>├── static
</span></span><span style="display:flex;"><span>│   ├── css
</span></span><span style="display:flex;"><span>│   └── js
</span></span><span style="display:flex;"><span>└── theme.toml
</span></span></code></pre></div><p>You can see some similarities. Hugo&rsquo;s page template files are tucked into <code>layouts/</code>. Note that the <code>_default</code> page type has files for a <code>list.html</code> and a <code>single.html</code>. Unlike Jekyll, Hugo uses these specific file names to distinguish between <a href="https://gohugo.io/templates/lists/">list pages</a> (like a page with links to all your blog posts on it) and <a href="https://gohugo.io/templates/single-page-templates/">single pages</a> (like one of your blog posts). The <code>layouts/partials/</code> directory contains the buttery reusable bits, and stylesheet files have a spot picked out in <code>static/css/</code>.</p>
<p>These directory structures aren&rsquo;t set in stone, as both site generators allow some measure of customization. For example, Jekyll lets you define <a href="https://jekyllrb.com/docs/collections/">collections</a>, and Hugo makes use of <a href="https://gohugo.io/content-management/page-bundles/">page bundles</a>. These features let you organize your content multiple ways, but for now, lets look at where to put some simple pages.</p>
<h2 id="where-to-put-content">Where to put content</h2>
<p>To create a site menu that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>Introduction
</span></span><span style="display:flex;"><span>    Getting Started
</span></span><span style="display:flex;"><span>    Configuration
</span></span><span style="display:flex;"><span>    Deploying
</span></span><span style="display:flex;"><span>Advanced Usage
</span></span><span style="display:flex;"><span>    All Configuration Settings
</span></span><span style="display:flex;"><span>    Customizing
</span></span><span style="display:flex;"><span>    Help and Support
</span></span></code></pre></div><p>You&rsquo;ll need two sections (&ldquo;Introduction&rdquo; and &ldquo;Advanced Usage&rdquo;) containing their respective subsections.</p>
<p>Jekyll isn&rsquo;t strict with its content location. It expects pages in the root of your site, and will build whatever&rsquo;s there. Here&rsquo;s how you might organize these pages in your Jekyll site root:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── 404.html
</span></span><span style="display:flex;"><span>├── assets
</span></span><span style="display:flex;"><span>├── Gemfile
</span></span><span style="display:flex;"><span>├── _includes
</span></span><span style="display:flex;"><span>├── index.markdown
</span></span><span style="display:flex;"><span>├── intro
</span></span><span style="display:flex;"><span>│   ├── config.md
</span></span><span style="display:flex;"><span>│   ├── deploy.md
</span></span><span style="display:flex;"><span>│   ├── index.md
</span></span><span style="display:flex;"><span>│   └── quickstart.md
</span></span><span style="display:flex;"><span>├── _layouts
</span></span><span style="display:flex;"><span>│   ├── default.html
</span></span><span style="display:flex;"><span>│   ├── page.html
</span></span><span style="display:flex;"><span>│   └── post.html
</span></span><span style="display:flex;"><span>├── LICENSE.txt
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── _sass
</span></span><span style="display:flex;"><span>├── &lt;name&gt;.gemspec
</span></span><span style="display:flex;"><span>└── usage
</span></span><span style="display:flex;"><span>    ├── customizing.md
</span></span><span style="display:flex;"><span>    ├── index.md
</span></span><span style="display:flex;"><span>    ├── settings.md
</span></span><span style="display:flex;"><span>    └── support.md
</span></span></code></pre></div><p>You can change the location of the site source in your <a href="https://jekyllrb.com/docs/configuration/default/">Jekyll configuration</a>.</p>
<p>In Hugo, all rendered content is expected in the <code>content/</code> folder. This prevents Hugo from trying to render pages you don&rsquo;t want, such as <code>404.html</code>, as site content. Here&rsquo;s how you might organize your <code>content/</code> directory in Hugo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── _index.md
</span></span><span style="display:flex;"><span>├── intro
</span></span><span style="display:flex;"><span>│   ├── config.md
</span></span><span style="display:flex;"><span>│   ├── deploy.md
</span></span><span style="display:flex;"><span>│   ├── _index.md
</span></span><span style="display:flex;"><span>│   └── quickstart.md
</span></span><span style="display:flex;"><span>└── usage
</span></span><span style="display:flex;"><span>    ├── customizing.md
</span></span><span style="display:flex;"><span>    ├── _index.md
</span></span><span style="display:flex;"><span>    ├── settings.md
</span></span><span style="display:flex;"><span>    └── support.md
</span></span></code></pre></div><p>To Hugo, <code>_index.md</code> and <code>index.md</code> mean different things. It can be helpful to know what kind of <a href="https://gohugo.io/content-management/page-bundles/">Page Bundle</a> you want for each section: Leaf, which has no children, or Branch.</p>
<p>Now that you have some idea of where to put things, let&rsquo;s look at how to build a page template.</p>
<h2 id="how-templating-works">How templating works</h2>
<p>Jekyll page templates are built with the <a href="https://jekyllrb.com/docs/liquid/">Liquid templating language</a>. It uses braces to output variable content to a page, such as the page&rsquo;s title: <code>{{ page.title }}</code>.</p>
<p>Hugo&rsquo;s templates also use braces, but they&rsquo;re built with <a href="https://gohugo.io/templates/introduction/">Go Templates</a>. The syntax is similar, but different: <code>{{ .Title }}</code>.</p>
<p>Both Liquid and Go Templates can handle logic. Liquid uses <em>tags</em> syntax to denote logic operations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{% if user %}
</span></span><span style="display:flex;"><span>  Hello {{ user.name }}!
</span></span><span style="display:flex;"><span>{% endif %}
</span></span></code></pre></div><p>And Go Templates places its functions and arguments in its braces syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>{{ <span style="color:#66d9ef">if</span> .<span style="color:#a6e22e">User</span> }}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Hello</span> {{ .<span style="color:#a6e22e">User</span> }}!
</span></span><span style="display:flex;"><span>{{ <span style="color:#a6e22e">end</span> }}
</span></span></code></pre></div><p>Templating languages allow you to build one skeleton HTML page, then tell the site generator to put variable content in areas you define. Let&rsquo;s compare two possible <code>default</code> page templates for Jekyll and Hugo.</p>
<p>Jekyll&rsquo;s scaffold <code>default</code> theme is bare, so we&rsquo;ll look at their starter theme <a href="https://github.com/jekyll/minima">Minima</a>. Here&rsquo;s <code>_layouts/default.html</code> in Jekyll (Liquid):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ page.lang | default: site.lang | default: &#34;</span><span style="color:#a6e22e">en</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  {%- include head.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {%- include header.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">main</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page-content&#34;</span> <span style="color:#a6e22e">aria-label</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wrapper&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{ content }}
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">main</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {%- include footer.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>Here&rsquo;s Hugo&rsquo;s scaffold theme <code>layouts/_default/baseof.html</code> (Go Templates):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>    {{- partial &#34;head.html&#34; . -}}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>        {{- partial &#34;header.html&#34; . -}}
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{- block &#34;main&#34; . }}{{- end }}
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        {{- partial &#34;footer.html&#34; . -}}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>Different syntax, same idea. Both templates pull in reusable bits for <code>head.html</code>, <code>header.html</code>, and <code>footer.html</code>. These show up on a lot of pages, so it makes sense not to have to repeat yourself. Both templates also have a spot for the main content, though the Jekyll template uses a variable (<code>{{ content }}</code>) while Hugo uses a block (<code>{{- block &quot;main&quot; . }}{{- end }}</code>). <a href="https://gohugo.io/templates/base/#readout">Blocks</a> are just another way Hugo lets you define reusable bits.</p>
<p>Now that you know how templating works, you can build the sidebar menu for the theme.</p>
<h2 id="creating-a-top-level-menu-with-the-pages-object">Creating a top-level menu with the <code>pages</code> object</h2>
<p>You can programmatically create a top-level menu from your pages. It will look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>Introduction
</span></span><span style="display:flex;"><span>Advanced Usage
</span></span></code></pre></div><p>Let&rsquo;s start with Jekyll. You can display links to site pages in your Liquid template by iterating through the <code>site.pages</code> object that Jekyll provides and building a list:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {% for page in site.pages %}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ page.url | absolute_url }}&#34;</span>&gt;{{ page.title }}&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    {% endfor %}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>This returns all of the site&rsquo;s pages, including all the ones that you might not want, like <code>404.html</code>. You can filter for the pages you actually want with a couple more tags, such as conditionally including pages if they have a <code>section: true</code> parameter set:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {% for page in site.pages %}
</span></span><span style="display:flex;"><span>    {%- if page.section -%}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ page.url | absolute_url }}&#34;</span>&gt;{{ page.title }}&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    {%- endif -%}
</span></span><span style="display:flex;"><span>    {% endfor %}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>You can achieve the same effect with slightly less code in Hugo. Loop through Hugo&rsquo;s <code>.Pages</code> object using Go Template&rsquo;s <a href="https://golang.org/pkg/text/template/#hdr-Actions"><code>range</code> action</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>{{ range .Pages }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{.Permalink}}&#34;</span>&gt;{{.Title}}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>{{ end }}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>This template uses the <code>.Pages</code> object to return all the top-level pages in <code>content/</code> of your Hugo site. Since Hugo uses a specific folder for the site content you want rendered, there&rsquo;s no additional filtering necessary to build a simple menu of site pages.</p>
<h2 id="creating-a-menu-with-nested-links-from-a-data-list">Creating a menu with nested links from a data list</h2>
<p>Both site generators can use a separately defined data list of links to render a menu in your template. This is more suitable for creating nested links, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>Introduction
</span></span><span style="display:flex;"><span>    Getting Started
</span></span><span style="display:flex;"><span>    Configuration
</span></span><span style="display:flex;"><span>    Deploying
</span></span><span style="display:flex;"><span>Advanced Usage
</span></span><span style="display:flex;"><span>    All Configuration Settings
</span></span><span style="display:flex;"><span>    Customizing
</span></span><span style="display:flex;"><span>    Help and Support
</span></span></code></pre></div><p>Jekyll supports <a href="https://jekyllrb.com/docs/datafiles/">data files</a> in a few formats, including YAML. Here&rsquo;s the definition for the menu above in <code>_data/menu.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">section</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Introduction</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">subsection</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Getting Started</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/quickstart</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Configuration</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Deploying</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/deploy</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Advanced Usage</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">subsection</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Customizing</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/customizing</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">All Configuration Settings</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/settings</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Help and Support</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/support</span>
</span></span></code></pre></div><p>Here&rsquo;s how to render the data in the sidebar template:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{% for a in site.data.menu.section %}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ a.url }}&#34;</span>&gt;{{ a.page }}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {% for b in a.subsection %}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ b.url }}&#34;</span>&gt;{{ b.page }}&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    {% endfor %}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>{% endfor %}
</span></span></code></pre></div><p>This method allows you to build a custom menu, two nesting levels deep. The nesting levels are limited by the <code>for</code> loops in the template. For a recursive version that handles further levels of nesting, see <a href="https://jekyllrb.com/tutorials/navigation/#scenario-9-nested-tree-navigation-with-recursion">Nested tree navigation with recursion</a>.</p>
<p>Hugo does something similar with its <a href="https://gohugo.io/templates/menu-templates/#section-menu-for-lazy-bloggers">menu templates</a>. You can define menu links in your <a href="https://gohugo.io/getting-started/configuration/">Hugo site config</a>, and even add useful properties that Hugo understands, like weighting. Here&rsquo;s a definition of the menu above in <code>config.yaml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">sectionPagesMenu</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">menu</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">main</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">intro</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Introduction</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Getting Started</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">intro</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/quickstart/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Configuration</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">intro</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/config/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploying</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">intro</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/deploy/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Advanced Usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Customizing</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/customizing/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">All Configuration Settings</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/settings/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Help and Support</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/support/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">3</span>
</span></span></code></pre></div><p>Hugo uses the <code>identifier</code>, which must match the section name, along with the <code>parent</code> variable to handle nesting. Here&rsquo;s how to render the menu in the sidebar template:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {{ range .Site.Menus.main }}
</span></span><span style="display:flex;"><span>    {{ if .HasChildren }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .URL }}&#34;</span>&gt;{{ .Name }}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sub-menu&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{ range .Children }}
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .URL }}&#34;</span>&gt;{{ .Name }}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        {{ end }}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {{ else }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .URL }}&#34;</span>&gt;{{ .Name }}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    {{ end }}
</span></span><span style="display:flex;"><span>    {{ end }}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>The <code>range</code> function iterates over the menu data, and Hugo&rsquo;s <code>.Children</code> variable handles nested pages for you.</p>
<h2 id="putting-the-template-together">Putting the template together</h2>
<p>With your menu in your reusable sidebar bit (<code>_includes/sidebar.html</code> for Jekyll and <code>partials/sidebar.html</code> for Hugo), you can add it to the <code>default.html</code> template.</p>
<p>In Jekyll:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ page.lang | default: site.lang | default: &#34;</span><span style="color:#a6e22e">en</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{%- include head.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    {%- include sidebar.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {%- include header.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page-content&#34;</span> <span style="color:#a6e22e">aria-label</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{ content }}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {%- include footer.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>In Hugo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>{{- partial &#34;head.html&#34; . -}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    {{- partial &#34;sidebar.html&#34; . -}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {{- partial &#34;header.html&#34; . -}}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page-content&#34;</span> <span style="color:#a6e22e">aria-label</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{- block &#34;main&#34; . }}{{- end }}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    {{- partial &#34;footer.html&#34; . -}}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>When the site is generated, each page will contain all the code from your <code>sidebar.html</code>.</p>
<h2 id="create-a-stylesheet">Create a stylesheet</h2>
<p>Both site generators accept Sass for creating CSS stylesheets. Jekyll <a href="https://jekyllrb.com/docs/assets/">has Sass processing built in</a>, and Hugo uses <a href="https://gohugo.io/hugo-pipes/transform-to-css/">Hugo Pipes</a>. Both options have some quirks.</p>
<h3 id="sass-and-css-in-jekyll">Sass and CSS in Jekyll</h3>
<p>To process a Sass file in Jekyll, create your style definitions in the <code>_sass</code> directory. For example, in a file at <code>_sass/style-definitions.scss</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span>$background-color<span style="color:#f92672">:</span> <span style="color:#ae81ff">#eef</span> <span style="color:#66d9ef">!default</span>;
</span></span><span style="display:flex;"><span>$text-color<span style="color:#f92672">:</span> <span style="color:#ae81ff">#111</span> <span style="color:#66d9ef">!default</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">background-color</span><span style="color:#f92672">:</span> $background-color;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">color</span><span style="color:#f92672">:</span> $text-color;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Jekyll won&rsquo;t generate this file directly, as it only processes files with front matter. To create the end-result filepath for your site&rsquo;s stylesheet, use a placeholder with empty front matter where you want the <code>.css</code> file to appear. For example, <code>assets/css/style.scss</code>. In this file, simply import your styles:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span><span style="color:#f92672">---</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">---</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">@</span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;style-definitions&#34;</span>;
</span></span></code></pre></div><p>This rather hackish configuration has an upside: you can use Liquid template tags and variables in your placeholder file. This is a nice way to allow users to set variables from the site <code>_config.yml</code>, for example.</p>
<p>The resulting CSS stylesheet in your generated site has the path <code>/assets/css/style.css</code>. You can link to it in your site&rsquo;s <code>head.html</code> using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ &#34;</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#a6e22e">assets</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#a6e22e">css</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#a6e22e">style</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">css</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#a6e22e">relative_url</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span> <span style="color:#a6e22e">media</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;screen&#34;</span>&gt;
</span></span></code></pre></div><h3 id="sass-and-hugo-pipes-in-hugo">Sass and Hugo Pipes in Hugo</h3>
<p>Hugo uses <a href="https://gohugo.io/hugo-pipes/transform-to-css/">Hugo Pipes</a> to process Sass to CSS. You can achieve this by using Hugo&rsquo;s asset processing function, <code>resources.ToCSS</code>, which expects a source in the <code>assets/</code> directory. It takes the SCSS file as an argument. With your style definitions in a Sass file at <code>assets/sass/style.scss</code>, here&rsquo;s how to get, process, and link your Sass in your theme&rsquo;s <code>head.html</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{ $style := resources.Get &#34;/sass/style.scss&#34; | resources.ToCSS }}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ $style.RelPermalink }}&#34;</span> <span style="color:#a6e22e">media</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;screen&#34;</span>&gt;
</span></span></code></pre></div><p>Hugo asset processing <a href="https://gohugo.io/troubleshooting/faq/#i-get-tocss--this-feature-is-not-available-in-your-current-hugo-version">requires extended Hugo</a>, which you may not have by default. You can get extended Hugo from the <a href="https://github.com/gohugoio/hugo/releases">releases page</a>.</p>
<h2 id="configure-and-deploy-to-github-pages">Configure and deploy to GitHub Pages</h2>
<p>Before your site generator can build your site, it needs a configuration file to set some necessary parameters. Configuration files live in the site root directory. Among other settings, you can declare the name of the theme to use when building the site.</p>
<h3 id="configure-jekyll">Configure Jekyll</h3>
<p>Here&rsquo;s a minimal <code>_config.yml</code> for Jekyll:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#ae81ff">Your awesome title</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">description</span>: <span style="color:#ae81ff">&gt;-</span> <span style="color:#75715e"># this means to ignore newlines until &#34;baseurl:&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">Write an awesome description for your new site here. You can edit this</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">line in _config.yml. It will appear in your document head meta (for</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">Google search results) and in your feed.xml site description.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">baseurl</span>: <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e"># the subpath of your site, e.g. /blog</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">url</span>: <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e"># the base hostname &amp; protocol for your site, e.g. http://example.com</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">theme</span>: <span style="color:#75715e"># for gem-based themes</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">remote_theme</span>: <span style="color:#75715e"># for themes hosted on GitHub, when used with GitHub Pages</span>
</span></span></code></pre></div><p>With <code>remote_theme</code>, any <a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll#adding-a-theme">Jekyll theme hosted on GitHub can be used</a> with sites hosted on GitHub Pages.</p>
<p>Jekyll has a <a href="https://jekyllrb.com/docs/configuration/default/">default configuration</a>, so any parameters added to your configuration file will override the defaults. Here are <a href="https://jekyllrb.com/docs/configuration/options/">additional configuration settings</a>.</p>
<h3 id="configure-hugo">Configure Hugo</h3>
<p>Here&rsquo;s a minimal example of Hugo&rsquo;s <code>config.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">baseURL</span>: <span style="color:#ae81ff">https://example.com/</span> <span style="color:#75715e"># The full domain your site will live at</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">languageCode</span>: <span style="color:#ae81ff">en-us</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#ae81ff">Hugo Docs Site</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">theme</span>: <span style="color:#75715e"># theme name</span>
</span></span></code></pre></div><p>Hugo makes no assumptions, so if a necessary parameter is missing, you&rsquo;ll see a warning when building or serving your site. Here are <a href="https://gohugo.io/getting-started/configuration/#all-configuration-settings">all configuration settings for Hugo</a>.</p>
<h3 id="deploy-to-github-pages">Deploy to GitHub Pages</h3>
<p>Both generators build your site with a command.</p>
<p>For Jekyll, use <code>jekyll build</code>. See <a href="https://jekyllrb.com/docs/configuration/options/#build-command-options">further build options here</a>.</p>
<p>For Hugo, use <code>hugo</code>. You can run <code>hugo help</code> or see <a href="https://gohugo.io/getting-started/usage/#test-installation">further build options here</a>.</p>
<p>You&rsquo;ll have to choose the source for your GitHub Pages site; once done, your site will update each time you push a new build. Of course, you can also automate your GitHub Pages build using GitHub Actions. Here&rsquo;s one for <a href="https://github.com/victoriadrake/hugo-latest-cd">building and deploying with Hugo</a>, and one for <a href="https://github.com/victoriadrake/jekyll-cd">building and deploying Jekyll</a>.</p>
<h2 id="showtime">Showtime</h2>
<p>All the substantial differences between these two generators are under the hood; all the same, let&rsquo;s take a look at the finished themes, in two color variations.</p>
<p>Here&rsquo;s Hugo:</p>
<p><img src="ogd_hugo.png" alt="OpenGitDocs theme for Hugo"></p>
<p>Here&rsquo;s Jekyll:</p>
<p><img src="ogd_jekyll.png" alt="OpenGitDocs theme for Jekyll"></p>
<p>Spiffy!</p>
<h2 id="wait-who-won">Wait who won</h2>
<p>🤷</p>
<p>Both Hugo and Jekyll have their quirks and conveniences.</p>
<p>From this developer&rsquo;s perspective, Jekyll is a workable choice for simple sites without complicated organizational needs. If you&rsquo;re looking to render some one-page posts in an <a href="https://jekyllrb.com/docs/themes/">available theme</a> and host with GitHub Pages, Jekyll will get you up and running fairly quickly.</p>
<p>Personally, I use Hugo. I like the organizational capabilities of its Page Bundles, and it&rsquo;s backed by a dedicated and conscientious team that really seems to strive to facilitate convenience for their users. This is evident in Hugo&rsquo;s many functions, and handy tricks like <a href="https://gohugo.io/content-management/image-processing/">Image Processing</a> and <a href="https://gohugo.io/content-management/shortcodes/">Shortcodes</a>. They seem to release new fixes and versions about as often as I make a new cup of coffee.</p>
<p>If you still can&rsquo;t decide, don&rsquo;t worry. Many themes are available for both Hugo and Jekyll! Start with one, switch later if you want. That&rsquo;s the benefit of having options.</p>
]]></content></entry><entry><title type="html">Breaking bottlenecks 🍾</title><link href="https://victoria.dev/posts/breaking-bottlenecks/"/><id>https://victoria.dev/posts/breaking-bottlenecks/</id><author><name>Victoria Drake</name></author><published>2020-02-25T12:50:29-05:00</published><updated>2020-02-25T12:50:29-05:00</updated><content type="html"><![CDATA[<p><em>I recently gave a lecture on the benefits of building non-blocking processes. This is a write-up of the full talk, minus any &ldquo;ums&rdquo; that may have occurred.</em></p>
<p>I&rsquo;ve been helping out a group called the Open Web Application Security Project (OWASP). They&rsquo;re a non-profit foundation that produces some of the foremost application testing guides and cybersecurity resources. OWASP&rsquo;s publications, checklists, and reference materials are a help to security professionals, penetration testers, and developers all over the world. Most of the individual teams that create these materials are run almost entirely by volunteers.</p>
<p>OWASP is a great group doing important work. I&rsquo;ve seen this firsthand as part of the core team that produces the Web Security Testing Guide. However, while OWASP inspires in its large volunteer base, it lacks in the area of central organization.</p>
<p>This lack of organization was most recently apparent in the group&rsquo;s website, <a href="https://owasp.org">OWASP.org</a>. A big organization with an even bigger website to match, OWASP.org enjoys hundreds of thousands of visitors. Unfortunately, many of its pages - individually managed by disparate projects - are infrequently updated. Some are abandoned. The website as a whole lacks a centralized quality assurance process, and as a result, OWASP.org is peppered with broken links.</p>
<h2 id="the-trouble-with-broken-links">The trouble with broken links</h2>
<p>Customers don&rsquo;t like broken links; attackers really do. That&rsquo;s because broken links are a security vulnerability. Broken links can signal opportunities for attacks like <a href="https://edoverflow.com/2017/broken-link-hijacking/">broken link hijacking</a> and <a href="https://www.hackerone.com/blog/Guide-Subdomain-Takeovers">subdomain takeovers</a>. At their least effective, these attacks can be embarrassing; at their worst, severely damaging to businesses and organizations. One OWASP group, the Application Security Verification Standard (ASVS) project, writes about <a href="https://github.com/OWASP/ASVS/blob/d9e0ac99828ef3c1e9233bd8a1f691f2a6958aa3/4.0/en/0x18-V10-Malicious.md#v103-deployed-application-integrity-controls">integrity controls</a> that can help to mitigate the likelihood of these attacks. This knowledge, unfortunately, has not yet propagated throughout the rest of OWASP yet.</p>
<p>This is the story of how I created a fast and efficient tool to help OWASP solve this problem.</p>
<h2 id="the-job">The job</h2>
<p>I took on the task of creating a program that could run as part of a CI/CD process to detect and report broken links. The program needed to:</p>
<ul>
<li>Find and enumerate all the broken links on OWASP.org in a report.</li>
<li>Keep track of the parent pages the broken links were on so they could be fixed.</li>
<li>Run efficiently as part of a CI/CD pipeline.</li>
</ul>
<p>Essentially; I need to build a web crawler.</p>
<p>My original journey through this process was also in Python, as that was a comfortable language choice for everyone in the OWASP group. Personally, I prefer to use Go for higher performance as it offers more convenient concurrency primitives. Between the task and this talk, I wrote three programs: a prototype single-thread Python program, a multithreaded Python program, and a Go program using goroutines. We&rsquo;ll see a comparison of how each worked out near the end of the talk - first, let&rsquo;s explore how to build a web crawler.</p>
<h2 id="prototyping-a-web-crawler">Prototyping a web crawler</h2>
<p>Here&rsquo;s what our web crawler will need to do:</p>
<ol>
<li>Get the HTML data of the first page of the website (for example, <code>https://victoria.dev</code>)</li>
<li>Check all of the links on the page
<ol>
<li>Keep track of the links we&rsquo;ve already visited so we don&rsquo;t end up checking them twice</li>
<li>Record any broken links we find</li>
</ol>
</li>
<li>Fetch more HTML data from any valid links on the page, as long as they&rsquo;re in the same domain (<code>https://victoria.dev</code> and not <code>https://github.com</code>, for instance)</li>
<li>Repeat step #2 until all of the links on the site have been checked</li>
</ol>
<p>Here&rsquo;s what the execution flow will look like:</p>
<figure class="screenshot"><img src="/posts/breaking-bottlenecks/execution_flow.png"
    alt="A flow chart showing program execution">
</figure>

<p>As you can see, the nodes &ldquo;GET page&rdquo; -&gt; &ldquo;HTML&rdquo; -&gt; &ldquo;Parse links&rdquo; -&gt; &ldquo;Valid link&rdquo; -&gt; &ldquo;Check visited&rdquo; all form a loop. These are what enable our web crawler to continue crawling until all the links on the site have been accounted for in the &ldquo;Check visited&rdquo; node. When the crawler encounters links it&rsquo;s already checked, it will &ldquo;Stop.&rdquo; This loop will become more important in a moment.</p>
<p>For now, the question on everyone&rsquo;s mind (I hope): how do we make it fast?</p>
<h2 id="how-fast-can-you-do-the-thing">How fast can you do the thing</h2>
<p>Here are some approximate timings for tasks performed on a typical PC:</p>
<table>
  <thead>
      <tr>
          <th>Type</th>
          <th>Task</th>
          <th>Time</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>CPU</td>
          <td>execute typical instruction</td>
          <td>1/1,000,000,000 sec = 1 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>fetch from L1 cache memory</td>
          <td>0.5 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>branch misprediction</td>
          <td>5 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>fetch from L2 cache memory</td>
          <td>7 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>Mutex lock/unlock</td>
          <td>25 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>fetch from main memory</td>
          <td>100 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>read 1MB sequentially from memory</td>
          <td>250,000 nanosec</td>
      </tr>
      <tr>
          <td>Disk</td>
          <td>fetch from new disk location (seek)</td>
          <td>8,000,000 nanosec   (8ms)</td>
      </tr>
      <tr>
          <td>Disk</td>
          <td>read 1MB sequentially from disk</td>
          <td>20,000,000 nanosec  (20ms)</td>
      </tr>
      <tr>
          <td>Network</td>
          <td>send packet US to Europe and back</td>
          <td>150,000,000 nanosec (150ms)</td>
      </tr>
  </tbody>
</table>
<p>Peter Norvig first published these numbers some years ago in <a href="http://norvig.com/21-days.html#answers">Teach Yourself Programming in Ten Years</a>. They typically crop up now and then in articles titled along the lines of, &ldquo;Latency numbers every developer should know.&rdquo;</p>
<p>Since computers and their components change year over year, the exact numbers shown above aren&rsquo;t the point. What these numbers help to illustrate is the difference, in orders of magnitude, between operations.</p>
<p>Compare the difference between fetching from main memory and sending a simple packet over the Internet. While both these operations occur in less than the blink of an eye (literally) from a human perspective, you can see that sending a simple packet over the Internet is over a million times slower than fetching from RAM. It&rsquo;s a difference that, in a single-thread program, can quickly accumulate to form troublesome bottlenecks.</p>
<h2 id="bottleneck-network-latency">Bottleneck: network latency</h2>
<p>The numbers above mean that the difference in time it takes to send something over the Internet compared to fetching data from main memory is over six orders of magnitude. Remember the loop in our execution chart? The &ldquo;GET page&rdquo; node, in which our crawler fetches page data over the network, is going to be <em>a million times slower</em> than the next slowest thing in the loop!</p>
<p>We don&rsquo;t need to run our prototype to see what that means in practical terms; we can estimate it. Let&rsquo;s take OWASP.org, which has upwards of 12,000 links, as an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>      150 milliseconds
</span></span><span style="display:flex;"><span> x 12,000 links
</span></span><span style="display:flex;"><span>---------
</span></span><span style="display:flex;"><span>1,800,000 milliseconds (30 minutes)
</span></span></code></pre></div><p>A whole half hour, just for the network tasks. It may even be much slower than that, since web pages are frequently much larger than a packet. This means that in our single-thread prototype web crawler, our biggest bottleneck is network latency. Why is this problematic?</p>
<h3 id="feedback-loops">Feedback loops</h3>
<p>I previously wrote about <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/">feedback loops</a>. In essence, in order to improve at doing anything, you first need to be able to get feedback from your last attempt. That way, you have the necessary information to make adjustments and get closer to your goal on your next iteration.</p>
<p>As a software developer, bottlenecks can contribute to long and inefficient feedback loops. If I&rsquo;m waiting on a process that&rsquo;s part of a CI/CD pipeline, in our bottlenecked web crawler example, I&rsquo;d be sitting around for a minimum of a half hour before learning whether or not changes in my last push were successful, or whether they broke <code>master</code> (hopefully <code>staging</code>).</p>
<p>Multiply a slow and inefficient feedback loop by many runs per day, over many days, and you&rsquo;ve got a slow and inefficient developer. Multiply that by many developers in an organization bottlenecked on the same process, and you&rsquo;ve got a slow and inefficient company.</p>
<h3 id="the-cost-of-bottlenecks">The cost of bottlenecks</h3>
<p>To add insult to injury, not only are you waiting on a bottlenecked process to run; you&rsquo;re also paying to wait. Take the serverless example - AWS Lambda, for instance. Here&rsquo;s a chart showing the cost of functions by compute time and CPU usage.</p>
<figure><img src="/posts/breaking-bottlenecks/lambda-chart.png"
    alt="Chart showing Total Lambda compute cost by function execution"><figcaption>
      <p>Source: <a href="https://serverless.com/blog/understanding-and-controlling-aws-lambda-costs/">Understanding and Controlling AWS Lambda Costs</a></p>
    </figcaption>
</figure>

<p>Again, the numbers change over the years, but the main concepts remain the same: the bigger the function and the longer its compute time, the bigger the cost. For applications taking advantage of serverless, these costs can add up dramatically.</p>
<p>Bottlenecks are a recipe for failure, for both productivity and the bottom line.</p>
<p>The good news is that bottlenecks are mostly unnecessary. If we know how to identify them, we can strategize our way out of them. To understand how, let&rsquo;s get some tacos.</p>
<h2 id="tacos-and-threading">Tacos and threading</h2>
<p>Everyone, meet Bob. He&rsquo;s a gopher who works at the taco stand down the street as the cashier. Say &ldquo;Hi,&rdquo; Bob.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮   ╔══════════════╗
</span></span><span style="display:flex;"><span>🌮      Hi I&#39;m Bob                          🌳
</span></span><span style="display:flex;"><span>🌮   ╚══════════════╝ \
</span></span><span style="display:flex;"><span>🌮                     🐹 🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>Bob works very hard at being a cashier, but he&rsquo;s still just one gopher. The customers who frequent Bob&rsquo;s taco stand can eat tacos really quickly; but in order to get the tacos to eat them, they&rsquo;ve got to order them through Bob. Here&rsquo;s what our bottlenecked, single-thread taco stand currently looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵🧑💵🧑💵🧑💵🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>As you can see, all the customers are queued up, right out the door. Poor Bob handles one customer&rsquo;s transaction at a time, starting and finishing with that customer completely before moving on to the next. Bob can only do so much, so our taco stand is rather inefficient at the moment. How can we make Bob faster?</p>
<p>We can try splitting the queue:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮         🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮         🧑💵🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>Now Bob can do some multitasking. For example, he can start a transaction with a customer in one queue; then, while that customer counts their bills, Bob can pop over to the second queue and get started there. This arrangement, known as a <a href="https://en.wikipedia.org/wiki/Concurrency_(computer_science)">concurrency model</a>, helps Bob go a little bit faster by jumping back and forth between lines. However, it&rsquo;s still just one Bob, which limits our improvement possibilities. If we were to make four queues, they&rsquo;d all be shorter; but Bob would be very thinly stretched between them. Can we do better?</p>
<p>We could get two Bobs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>With twice the Bobs, each can handle a queue of his own. This is our most efficient solution for our taco stand so far, since two Bobs can handle much more than one Bob can, even if each customer is still attended to one at a time.</p>
<p>We can do even better than that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>With quadruple the Bobs, we have some very short queues, and a much more efficient taco stand. In computing, the concept of having multiple workers do tasks in parallel is called <a href="https://en.wikipedia.org/wiki/Multithreading_(computer_architecture)">multithreading</a>.</p>
<p>In Go, we can apply this concept using goroutines. Here are some illustrative snippets from my Go solution.</p>
<h2 id="setting-up-a-go-web-crawler">Setting up a Go web crawler</h2>
<p>In order to share data between our <a href="https://tour.golang.org/concurrency/1">goroutines</a>, we&rsquo;ll need to create some data structures. Our <code>Checker</code> structure will be shared, so it will have a <code>Mutex</code> (<a href="https://en.wikipedia.org/wiki/Mutual_exclusion">mutual exclusion</a>) to allow our goroutines to lock and unlock it. The <code>Checker</code> structure will also hold a list of <code>brokenLinks</code> results, and <code>visitedLinks</code>. The latter will be a map of strings to booleans, which we&rsquo;ll use to directly and efficiently check for visited links. By using a map instead of iterating over a list, our <code>visitedLinks</code> lookup will have a constant complexity of O(1) as opposed to a linear complexity of O(n), thus avoiding the creation of another bottleneck. For more on time complexity, see my <a href="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/">coffee-break introduction to time complexity of algorithms</a> article.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Checker</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">startDomain</span>             <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">brokenLinks</span>             []<span style="color:#a6e22e">Result</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">visitedLinks</span>            <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">bool</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">workerCount</span>, <span style="color:#a6e22e">maxWorkers</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">Mutex</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Page allows us to retain parent and sublinks</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Page</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">parent</span>, <span style="color:#a6e22e">loc</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Result adds error information for the report</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Result</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Page</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">reason</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">code</span>   <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To extract links from HTML data, here&rsquo;s a parser I wrote on top of <a href="https://pkg.go.dev/golang.org/x/net/html?tab=doc">package <code>html</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Extract links from HTML</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">parent</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">string</span>) ([]<span style="color:#66d9ef">string</span>, []<span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">doc</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">html</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">data</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Could not parse: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">goodLinks</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">badLinks</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">f</span> <span style="color:#66d9ef">func</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">html</span>.<span style="color:#a6e22e">Node</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">f</span> = <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">html</span>.<span style="color:#a6e22e">Node</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">html</span>.<span style="color:#a6e22e">ElementNode</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">checkKey</span>(string(<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Data</span>)) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Attr</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">checkAttr</span>(string(<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">Key</span>)) {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">formatURL</span>(<span style="color:#a6e22e">parent</span>, <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">Val</span>)
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">badLinks</span> = append(<span style="color:#a6e22e">badLinks</span>, <span style="color:#a6e22e">j</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">goodLinks</span> = append(<span style="color:#a6e22e">goodLinks</span>, <span style="color:#a6e22e">j</span>)
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">FirstChild</span>; <span style="color:#a6e22e">c</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span>; <span style="color:#a6e22e">c</span> = <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">NextSibling</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">c</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">doc</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">goodLinks</span>, <span style="color:#a6e22e">badLinks</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If you&rsquo;re wondering why I didn&rsquo;t use a more full-featured package for this project, I highly recommend <a href="https://www.theregister.com/2016/03/23/npm_left_pad_chaos/">the story of <code>left-pad</code></a>. The short of it: more dependencies, more problems.</p>
<p>Here are snippets of the <code>main</code> function, where we pass in our starting URL and create a queue (or <a href="https://tour.golang.org/concurrency/2">channels</a>, in Go) to be filled with links for our goroutines to process.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">startURL</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;url&#34;</span>, <span style="color:#e6db74">&#34;http://example.com&#34;</span>, <span style="color:#e6db74">&#34;full URL of site&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">firstPage</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Page</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">parent</span>: <span style="color:#f92672">*</span><span style="color:#a6e22e">startURL</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">loc</span>:    <span style="color:#f92672">*</span><span style="color:#a6e22e">startURL</span>,
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">toProcess</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">Page</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">toProcess</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">firstPage</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wg</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>
</span></span></code></pre></div><p>The last significant piece of the puzzle is to create our workers, which we&rsquo;ll do here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">toProcess</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">checker</span>.<span style="color:#a6e22e">addWorker</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">🐹</span> <span style="color:#66d9ef">go</span> <span style="color:#a6e22e">worker</span>(<span style="color:#a6e22e">i</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">checker</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">wg</span>, <span style="color:#a6e22e">toProcess</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">checker</span>.<span style="color:#a6e22e">workerCount</span> &gt; <span style="color:#a6e22e">checker</span>.<span style="color:#a6e22e">maxWorkers</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>) <span style="color:#75715e">// throttle down</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
</span></span></code></pre></div><p>A <a href="https://golang.org/pkg/sync/#WaitGroup">WaitGroup</a> does just what it says on the tin: it waits for our group of goroutines to finish. When they have, we&rsquo;ll know our Go web crawler has finished checking all the links on the site.</p>
<h2 id="did-we-do-the-thing-fast">Did we do the thing fast</h2>
<p>Here&rsquo;s a comparison of the three programs I wrote on this journey. First, the prototype single-thread Python version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>time python3 slow-link-check.py https://victoria.dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>real 17m34.084s
</span></span><span style="display:flex;"><span>user 11m40.761s
</span></span><span style="display:flex;"><span>sys     0m5.436s
</span></span></code></pre></div><p>This finished crawling my website in about seventeen-and-a-half minutes, which is rather long for a site at least an order of magnitude smaller than OWASP.org.</p>
<p>The multithreaded Python version did a bit better:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>time python3 hydra.py https://victoria.dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>real 1m13.358s
</span></span><span style="display:flex;"><span>user 0m13.161s
</span></span><span style="display:flex;"><span>sys     0m2.826s
</span></span></code></pre></div><p>My multithreaded Python program (which I dubbed <a href="https://github.com/victoriadrake/hydra-link-checker">Hydra</a>) finished in one minute and thirteen seconds.</p>
<p>How did Go do?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>time ./go-link-check --url=https://victoria.dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>real 0m7.926s
</span></span><span style="display:flex;"><span>user 0m9.044s
</span></span><span style="display:flex;"><span>sys     0m0.932s
</span></span></code></pre></div><p>At just under eight seconds, I found the Go version to be extremely palatable.</p>
<h2 id="breaking-bottlenecks">Breaking bottlenecks</h2>
<p>As fun as it is to simply enjoy the speedups, we can directly relate these results to everything we&rsquo;ve learned so far. Consider taking a process that used to soak up seventeen minutes and turning it into an eight-second-affair instead. Not only will that give developers a much shorter and more efficient feedback loop, it will give companies the ability to develop faster, and thus grow more quickly - while costing less. To drive the point home: a process that runs in seventeen-and-a-half minutes when it could take eight seconds will also cost over a hundred and thirty times as much to run!</p>
<p>A better work day for developers, and a better bottom line for companies. There&rsquo;s a lot of benefit to be had in making functions, code, and processes as efficient as possible - by breaking bottlenecks.</p>
]]></content></entry><entry><title type="html">The past ten years, or, how to get better at anything</title><link href="https://victoria.dev/posts/the-past-ten-years-or-how-to-get-better-at-anything/"/><id>https://victoria.dev/posts/the-past-ten-years-or-how-to-get-better-at-anything/</id><author><name>Victoria Drake</name></author><published>2019-12-31T08:27:31-04:00</published><updated>2019-12-31T08:27:31-04:00</updated><content type="html"><![CDATA[<p>If you want to get better at anything:</p>
<ol>
<li>Solve your own problems,</li>
<li>Write about it,</li>
<li>Teach others.</li>
</ol>
<h2 id="1-searching-a-decade-ago">1. Searching, a decade ago</h2>
<p>I was a young graduate with newly-minted freedoms, and I was about to fall in love. I had plenty of imagination, a couple handfuls of tenacity, and no sense of direction at all.</p>
<p>For much of my youth, when I encountered a problem, I just sort of bumped up against it. I tried using whatever was in my head from past experiences or my own imagination to find a solution. For some problems, like managing staff duties at work, my experience was sufficient guidance. For other, more complicated problems, it wasn&rsquo;t.</p>
<p>When you don&rsquo;t have a wealth of experience to draw upon, relying on it is a poor strategy. Like many people at my age then, I thought I knew enough. Like many people at my age now, I recognize how insufficient &ldquo;enough&rdquo; can be. A lack of self-directed momentum meant being dragged in any direction life&rsquo;s currents took me. When falling in love turned out to mean falling from a far greater height than I had anticipated, I tumbled on, complacent. When higher-ups at work handed me further responsibilities, I accepted them without considering if I wanted them at all. When, inevitably, life became more and more complicated, I encountered even more problems I didn&rsquo;t know how to solve. I felt stuck.</p>
<p>Though I was morbidly embarrassed about it at the time, I&rsquo;m not shy to say it now. At one point, it had to be pointed out to me that I could search the Internet for the solution to any of my problems. Anything I wanted to solve - interactions with people at work, a floundering relationship, or the practicalities of filing taxes - I was lucky enough to have the greatest collection of human knowledge ever assembled at my disposal.</p>
<p>Instead of bumbling along in the floatsam of my own trial and error, I started to take advantage of the collective experiences of all those who have been here before me. They weren&rsquo;t always right, and I often found information only somewhat similar to my own experience. Still, it always got me moving in the right direction. Eventually, I started to steer.</p>
<p>There&rsquo;s a learning curve, even when just searching for a problem. Distilling the jumble of confusion in your head to the right search terms is a learned skill. It helped me to understand <a href="https://www.google.com/search/howsearchworks/crawling-indexing/">how search engines like Google work</a>:</p>
<blockquote>
<p>We use software known as web crawlers to discover publicly available webpages. Crawlers look at webpages and follow links on those pages, much like you would if you were browsing content on the web. They go from link to link and bring data about those webpages back to Google’s servers&hellip;</p>
<p>When crawlers find a webpage, our systems render the content of the page, just as a browser does. We take note of key signals — from keywords to website freshness — and we keep track of it all in the Search index.</p></blockquote>
<p>Sometimes, I find what I need by using the right keyword. Other times, I discover the keyword by searching for text that might surround it on the content of the page. For software development, I search for the weirdest word or combination of words attached to what I&rsquo;m trying to learn. I rarely find whole solutions in my search results, but I always find direction for solving the problem myself.</p>
<p>Solving my own problems, even just a few little ones at a time, gave me confidence and built momentum. I began to pursue the experiences I wanted, instead of waiting for experiences to happen to me.</p>
<h2 id="2-updating-the-internet-some-years-ago">2. Updating the Internet, some years ago</h2>
<p>I&rsquo;d solved myself out of a doomed relationship and stagnant job. I found myself, rather gleefully, country-hopping with just <a href="https://heronebag.com">one backpack</a> of possessions. I met, though I didn&rsquo;t know it at the time, my future husband. I found a new sense of freedom, of having options, that I knew I never wanted to give up. I had to find a means to sustain myself by working remotely.</p>
<p>When I first tried to make a living on the Internet, I felt like a right amateur. Sitting on the bed, hunched over my laptop, I started a crappy Wordpress blog with a modified theme that didn&rsquo;t entirely work. I posted about how I tried and failed to start a dropshipping business. My site was terrible, and I knew it. My first forays into being a &ldquo;real&rdquo; developer were to solve my own problems: how to get my blog working, how to set up a custom domain, how to get and use a security certificate. I found some guidance in blogs and answers that others had written, but much of it was outdated, or not entirely correct. Still, it helped me.</p>
<p>I can&rsquo;t imagine a world in which people did nothing to pass on their knowledge to future generations. Our stories are all we have beyond instinct and determination.</p>
<p>I stopped posting about dropshipping and started writing about the technical problems I was solving. I wrote about what I tried, and ultimately what worked. I started hearing from people who thanked me for explaining the solution they were looking for. Even in posts where all I&rsquo;d done was link to the correct set of instructions on some other website, people thanked me for leading them to it. I still thought my website was terrible, but I realized I was doing something useful. The more problems I solved, the better I got at solving them, and the more I wrote about it in turn.</p>
<p>One day, someone offered me money for one of my solutions. To my great delight, they weren&rsquo;t the last to do so.</p>
<p>As I built up my skills, I started taking on more challenging offers to solve problems. I discovered, as others have before me, that especially in software development, not every solution is out there waiting for you. The most frustrating part of working on an unsolved problem is that, at least to your knowledge, there&rsquo;s no one about to tell you how to solve it. If you&rsquo;re lucky, you&rsquo;ve at least got a heading from someone&rsquo;s cold trail in an old blog post. If you&rsquo;re lucky and tenacious, you&rsquo;ll find a working solution.</p>
<p>Don&rsquo;t leave it scribbled in the corner of a soon-forgotten notepad, never to ease the path of someone who comes along later. Update that old blog post by commenting on it, or sending a note to the author. Put your solution on the Internet, somewhere. Ideally, blog about it yourself in as much detail as you can recall. Some of the people who find your post might have the same problem, and might even be willing to pay you to solve it. And, if my own experience and some scattered stories hold true, one of the people to who&rsquo;ll come along later, looking for that same solution, will be you.</p>
<h2 id="3-paying-it-forwards-backwards-and-investing-two-years-ago">3. Paying it forwards, backwards, and investing; two years ago</h2>
<p>Already being familiar with how easy it is to stop steering and start drifting, I sought new ways to challenge myself and my skills. I wanted to do more than just sustain my lifestyle. I wanted to offer something to others; something that mattered.</p>
<p>A strange thing started happening when I decided, deliberately, to write an in-depth technical blog about topics I was only beginning to become familiar with. I started to deeply understand some fundamental computer science topics - and trust me, that was strange enough - but odder than that was that others started to see me as a resource. People asked me questions because they thought I had the answers. I didn&rsquo;t, at least, not always - but I knew enough now to not let that stop me. I went to find the answers, to test and understand them, and then I wrote about them to teach those who had asked. I hardly noticed, along the way, that I was learning too.</p>
<p>When someone&rsquo;s outdated blog post leads you to an eventual solution, you can pay them back by posting an update, or blogging about it yourself. When you solve an unsolved problem, you pay it forward by recording that solution for the next person who comes along (sometimes you). In either case, by writing about it - honestly, and with your best effort to be thorough and correct - you end up investing in yourself.</p>
<p>Explaining topics you&rsquo;re interested in to other people helps you find the missing pieces in your own knowledge. It helps you fill those gaps with learning, and integrate the things you learn into a new, greater understanding. Teaching something to others helps you become better at it yourself. Getting better at something - anything - means you have more to offer.</p>
<h2 id="the-past-decade-and-the-next-decade">The past decade, and the next decade</h2>
<p>It&rsquo;s the end of a decade. I went from an aimless drift through life to being captain of my ship. I bettered my environment, learned new skills, made myself a resource, and became a wife to my best friend. I&rsquo;m pretty happy with all of it.</p>
<p>It&rsquo;s the end of 2019. Despite a whole lot of life happening just this year, I&rsquo;ve written one article on this blog for each week since I started in July. That&rsquo;s 23 articles for 23 weeks, plus one Christmas bonus. I hear from people almost every day who tell me that an article I wrote was helpful to them, and it makes me happy and proud to think that I&rsquo;ve been doing something that matters. The first week of January will make this blog two years old.</p>
<p>The past several months have seen me change tack, slightly. I&rsquo;ve become very interested in cybersecurity, and have been lending my skills to the Open Web Application Security Project. I&rsquo;m now an author and maintainer of the <a href="https://github.com/OWASP/wstg">Web Security Testing Guide</a>, version 5. I&rsquo;m pretty happy with that, too.</p>
<p>Next year, I&rsquo;ll be posting a little less, though writing even more, as I pursue an old dream of publishing a book, as well as develop my new cybersecurity interests. I aim to get better at quite a few things. Thankfully, I know just how to do it - and now, so do you:</p>
<ol>
<li>Solve your own problems,</li>
<li>Write about it,</li>
<li>Teach others.</li>
</ol>
<p>Have a very happy new decade, dear reader.</p>
]]></content></entry><entry><title type="html">Secure web forms for the front-end developer</title><link href="https://victoria.dev/archive/secure-web-forms-for-the-front-end-developer/"/><id>https://victoria.dev/archive/secure-web-forms-for-the-front-end-developer/</id><author><name>Victoria Drake</name></author><published>2019-12-11T08:27:31-04:00</published><updated>2019-12-11T08:27:31-04:00</updated><content type="html"><![CDATA[<p>While cybersecurity is often thought of in terms of databases and architecture, much of a strong security posture relies on elements in the domain of the front-end developer. For certain potentially devastating vulnerabilities like <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection">SQL injection</a> and <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">Cross-Site Scripting (XSS)</a>, a well-considered user interface is the first line of defense.</p>
<p>Here are a few areas of focus for front-end developers who want to help fight the good fight.</p>
<h2 id="control-user-input">Control user input</h2>
<p>A whole whack of <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">crazy things</a> can happen when developers build a form that fails to control user input. To combat vulnerabilities like injection, it&rsquo;s important to validate or sanitize user input.</p>
<p>Input can be validated by constraining it to known values, such as by using <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Semantic_input_types">semantic input types</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation#Validation-related_attributes">validation-related attributes</a> in forms. Frameworks like <a href="https://www.djangoproject.com/">Django</a> also help by providing <a href="https://docs.djangoproject.com/en/3.0/ref/models/fields/#field-types">field types</a> for this purpose. Sanitizing data can be done by removing or replacing contextually-dangerous characters, such as by using a whitelist or escaping the input data.</p>
<p>While it may not be intuitive, even data that a user submits to their own area on a site should be validated. One of the fastest viruses to proliferate was the <a href="https://en.wikipedia.org/wiki/Samy_(computer_worm)">Samy worm</a> on MySpace (yes, I&rsquo;m old), thanks to code that Samy Kamkar was able to inject into his own profile page. Don&rsquo;t directly return any input to your site without thorough validation or santization.</p>
<p>For some further guidance on battling injection attacks, see the <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Injection_Prevention_Cheat_Sheet.md">OWASP Injection Prevention Cheat Sheet</a>.</p>
<h2 id="beware-hidden-fields">Beware hidden fields</h2>
<p>Adding <code>type=&quot;hidden&quot;</code> is an enticingly convenient way to hide sensitive data in pages and forms, but unfortunately not an effective one. With tools like <a href="https://www.zaproxy.org/">ZapProxy</a> and even inspection tools in plain ol&rsquo; web browsers, users can easily click to reveal tasty bits of invisible information. Hiding checkboxes can be a neat hack for creating CSS-only switches, but hidden fields do little to contribute to security.</p>
<h2 id="carefully-consider-autofill-fields">Carefully consider autofill fields</h2>
<p>When a user chooses to give you their <a href="https://en.wikipedia.org/wiki/Personal_data">Personally Identifiable Information</a> (PII), it should be a conscious choice. Autofill form fields can be convenient - for both users and attackers. <a href="https://freedom-to-tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-exploit-browser-login-managers/">Exploits using hidden fields can harvest PII</a> previously captured by an autocomplete field.</p>
<p>Many users aren&rsquo;t even aware what information their browser&rsquo;s autofill has stored up. Use these fields sparingly, and disable autofilled forms for particularly sensitive data.</p>
<p>It&rsquo;s important to also weigh your risk profile against its trade-offs. If your project must be <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG</a> compliant, disabling autocomplete can break your input for different modalities. For more, see <a href="https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html">1.3.5: Identify Input Purpose in WCAG 2.1</a>.</p>
<h2 id="keep-errors-generic">Keep errors generic</h2>
<p>While it may seem helpful to let users know whether a piece of data exists, it&rsquo;s also very helpful to attackers. When dealing with accounts, emails, and PII, it&rsquo;s most secure to err (🥁) on the side of less. Instead of returning &ldquo;Your password for this account is incorrect,&rdquo; try the more ambiguous feedback &ldquo;Incorrect login information,&rdquo; and avoid revealing whether the username or email is in the system.</p>
<p>In order to be more helpful, provide a prominent way to contact a human in case an error should arise. Avoid revealing information that isn&rsquo;t necessary. If nothing else, for heaven&rsquo;s sake, don&rsquo;t suggest data that&rsquo;s a close match to the user input.</p>
<h2 id="be-a-bad-guy">Be a bad guy</h2>
<p>When considering security, it&rsquo;s helpful to take a step back, observe the information on display, and ask yourself how a malicious attacker would be able to utilize it. Play devil&rsquo;s advocate. If a bad guy saw this page, what new information would they gain? Does the view show any PII?</p>
<p>Ask yourself if everything on the page is actually necessary for a genuine user. If not, redact or remove it. Less is safer.</p>
<h2 id="security-starts-at-the-front-door">Security starts at the front door</h2>
<p>These days, there&rsquo;s a lot more overlap between coding on the front end and the back end. To create a well-rounded and secure application, it helps to have a general understanding of ways attackers can get their foot in the front door.</p>
]]></content></entry><entry><title type="html">Secure application architecture basics: separation, configuration, and access</title><link href="https://victoria.dev/posts/secure-application-architecture-basics-separation-configuration-and-access/"/><id>https://victoria.dev/posts/secure-application-architecture-basics-separation-configuration-and-access/</id><author><name>Victoria Drake</name></author><published>2019-09-30T08:03:12-04:00</published><updated>2019-09-30T08:03:12-04:00</updated><content type="html"><![CDATA[<p>Software developers today are encouraged to focus on building, and that&rsquo;s a great thing. There&rsquo;s the benefit of maker culture, an attitude of &ldquo;always be shipping,&rdquo; open source collaboration, and a bevy of apps that help you prioritize and execute with maximum efficiency. It&rsquo;s in an environment of constant creation, where both teams and solo entrepreneurs can be maximally productive.</p>
<p>Sometimes, this breakneck-speed productivity shows its downsides.</p>
<p>A lack of awareness of security seems to lead to a lack of prioritization of tasks that don&rsquo;t directly support bringing the product to launch. The market seems to have made it more important to launch a usable product than a secure one, with the prevailing attitude being, &ldquo;we can do the security stuff later.&rdquo;</p>
<p>Cobbling together a foundation based more on expediency than longevity is a bad way to build applications and a great way to build security debt. Security debt, like technical debt, amasses when developers make decisions that can make it more difficult to secure the application later on. If you&rsquo;re familiar with the concept of &ldquo;pushing left&rdquo; (or if you read my <a href="/blog/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/">article about sensitive data exposure</a>), you&rsquo;ll know that when it comes to security, sometimes there isn&rsquo;t a version of &ldquo;later&rdquo; that isn&rsquo;t <em>too</em> late. It&rsquo;s a shame, especially since following some basic security practices with high benefit yield early on in the development process doesn&rsquo;t take significantly more time than <em>not</em> following them. Often, it comes down to having some basic but important knowledge that enables making the more secure decision.</p>
<p>While application architecture specifics vary, there are a few basic principles you can commonly apply. This article will provide a high-level overview of areas that I hope will help point developers in the right direction.</p>
<p>There must be a reason you call it application &ldquo;architecture.&rdquo; I like to think it&rsquo;s because the architecture of software is similar in some basic ways to the architecture of a building. (Or at least, in my absolute zero building-building expertise, how I imagine a building to be built.) Here&rsquo;s how I like to summarize three basic points of secure application architecture:</p>
<ol>
<li>Separated storage</li>
<li>Customized configuration</li>
<li>Controlled access and user scope</li>
</ol>
<p>This is only a jumping-off point meant to get you started on the right foot; a complete picture of a fully-realized application&rsquo;s security posture includes areas outside the scope of this article, including authentication, logging and monitoring, testing, and perhaps meeting compliance standards.</p>
<h2 id="1-separated-storage">1. Separated storage</h2>
<p>From a security standpoint, the concept of separation refers to storing files that serve different purposes in different places. When you&rsquo;re constructing your building and deciding where all the rooms go, you similarly create the lobby on the ground floor and place administrative offices on higher floors, perhaps off the main path. While both are rooms, you understand that they serve different purposes, have different functional needs, and possibly very different security requirements.</p>
<p><img src="separation.png" alt="Separation of building floors"></p>
<p>When it comes to your files, the benefit is perhaps easiest to understand if you consider a simple file structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>application/
</span></span><span style="display:flex;"><span> ├───html/
</span></span><span style="display:flex;"><span> │   └───index.html
</span></span><span style="display:flex;"><span> ├───assets/
</span></span><span style="display:flex;"><span> │   ├───images/
</span></span><span style="display:flex;"><span> │   │   ├───rainbows.jpg
</span></span><span style="display:flex;"><span> │   │   └───unicorns.jpg
</span></span><span style="display:flex;"><span> │   └───style.css
</span></span><span style="display:flex;"><span> └───super-secret-configurations/
</span></span><span style="display:flex;"><span>     └───master-keys.txt
</span></span></code></pre></div><p>In this simplified example, let&rsquo;s say that all your application&rsquo;s images are stored in the <code>application/assets/images/</code> directory. When one of your users creates a profile and uploads their picture to it, this picture is also stored in this folder. Makes sense, right? It&rsquo;s an image, and that&rsquo;s where the images go. What&rsquo;s the issue?</p>
<p>If you&rsquo;re familiar with navigating a file structure in a terminal, you may have seen this syntax before: <code>../../</code>. The two dots are a handy way of saying, &ldquo;go up one directory.&rdquo; If you execute the command <code>cd ../../</code> in the <code>images/</code> directory of the simple file structure above, you&rsquo;d go up into <code>assets/</code>, then up again to the root directory, <code>application/</code>. This is a problem because of a wee little vulnerability dubbed <a href="https://cwe.mitre.org/data/definitions/22.html">path traversal</a>.</p>
<p>While the dot syntax saves you some typing, it also introduces the interesting advantage of not actually needing to know what the parent directory is called in order to go to it. Consider an attack payload script, delivered into the <code>images/</code> folder of your insecure application via an uploaded file, that went up one directory using <code>cd ../</code> and then sent everything it found to the attacker, on repeat. Eventually, it would reach the root application directory and access the <code>super-secret-configurations/</code> folder. Not good.</p>
<p>While other measures should be in place to prevent path traversal and related user upload vulnerabilities, the simplest prevention by far is a separation of storage. Core application files and assets should not be combined with other data, and especially not with <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">user input</a>. It&rsquo;s best to keep user-uploaded files and activity logs (which may contain juicy data and can be vulnerable to injection attacks) separate from the main application.</p>
<p>Separation can be achieved in a few ways, such as by using a different server, different instance, separate IP range, or separate domain.</p>
<h2 id="2-customized-configuration">2. Customized configuration</h2>
<p><a href="https://github.com/OWASP/Top10/blob/cb5f8967bba106e14a350761ac4f93b8aec7f8fa/2017/en/0xa6-security-misconfiguration.md">Security misconfiguration</a> is listed in the OWASP Top 10. A surprising number of very preventable security incidents occur because a server, firewall, or administrative account is running in production with default settings. Upon the opening of your new building, you&rsquo;d hopefully be more careful to ensure you haven&rsquo;t left any keys in the locks.</p>
<p><img src="defaultkey.png" alt="Three keys"></p>
<p>Usually, the victims of attacks related to default settings aren&rsquo;t specifically targeted. Rather, they are found by automated scanning tools that attackers run over many possible targets, effectively prodding at many different systems to see if any roll over and expose some useful exploit. The automated nature of this attack means that it&rsquo;s important for you to review settings for every piece of your architecture. Even if an individual piece doesn&rsquo;t seem significant, it may provide a vulnerability that allows an attacker to use it as a gateway to your larger application.</p>
<p>In particular, examine architecture components for unattended areas such as:</p>
<ul>
<li>Default accounts, especially with default passwords, left in service;</li>
<li>Example web pages, tutorial applications, or sample data left in the application;</li>
<li>Unnecessary ports left in service, or ports left open to the Internet;</li>
<li>Unrestricted permitted HTTP methods;</li>
<li>Sensitive information stored in automated logs;</li>
<li>Default configured permissions in managed services; and,</li>
<li>Directory listings, or sensitive file types, left accessible by default.</li>
</ul>
<p>This list isn&rsquo;t exhaustive. Specific architecture components, such as cloud storage or web servers, will have other configurable features that should be reviewed. In general, reduce the application&rsquo;s attack surface by using minimal architecture components. If you use fewer components or don&rsquo;t install modules you don&rsquo;t need, you&rsquo;ll have fewer possible attack entry points to configure and safeguard.</p>
<h2 id="3-controlled-access-and-user-scope">3. Controlled access and user scope</h2>
<p>One of the more difficult security problems to test in an application is misconfigured access control. Automated testing tools have limited capability to find areas of an application that one user shouldn&rsquo;t be able to access. Thus, this is often left to manual testing or source code review to discover. By considering this vulnerability early on in the software development lifecycle when architectural decisions are being made, you reduce the risk that it becomes a problem that&rsquo;s harder to fix later. After all, you wouldn&rsquo;t simply leave your master keys out of reach on a high ledge and hope no one comes along with a ladder.</p>
<p><img src="access.png" alt="A cartoon of a user attempting to elevate privilege"></p>
<p><a href="https://github.com/OWASP/Top10/blob/master/2017/en/0xa5-broken-access-control.md">Broken access control</a> is listed in the OWASP Top 10, which goes into more detail on its various forms. As a simple example, consider an application with two levels of access: administrators and users. You want to build a new feature - the ability to moderate or ban users - with the intention that only administrators would be allowed to use it.</p>
<p>If you&rsquo;re aware of the possibility of access control misconfigurations or exploits, you may decide to build the moderation feature in a completely separate area from the user-accessible space, such as on a different domain, or as part of a model that users don&rsquo;t share. This greatly reduces the risk that an access control misconfiguration or elevation of privilege vulnerability might allow a user to improperly access the moderation feature later on.</p>
<p>Of course, robust access control in your application needs more support to be effective. Consider factors such as sensitive tokens, or keys passed as URL parameters, or whether a control fails securely or insecurely. Nevertheless, by considering authorization at the architectural stage, you can set yourself up to make further reinforcements easier to implement.</p>
<h2 id="security-basics-for-maximum-benefit">Security basics for maximum benefit</h2>
<p>Similar to avoiding racking up technical debt by choosing a well-vetted framework, developers can avoid security debt by becoming more aware of common vulnerabilities and the simple architectural decisions you can make to help mitigate them. For a much more detailed resource on how to bake security into your applications from the start, the <a href="https://github.com/OWASP/ASVS">OWASP Application Security Verification Standard</a> is a robust guide.</p>
]]></content></entry><entry><title type="html">Migrating to the cloud but without screwing it up, or how to move house</title><link href="https://victoria.dev/archive/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/"/><id>https://victoria.dev/archive/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/</id><author><name>Victoria Drake</name></author><published>2019-09-23T08:03:12-04:00</published><updated>2019-09-23T08:03:12-04:00</updated><content type="html"><![CDATA[<p>For an application that&rsquo;s ready to scale, not using managed cloud architecture these days is like insisting on digging your own well for water. It&rsquo;s far more labour-intensive, requires buying all your own equipment, takes a lot more time, and there&rsquo;s a higher chance you&rsquo;re going to get it wrong because you don&rsquo;t personally have a whole lot of experience digging wells, anyway.</p>
<p>That said - let&rsquo;s just get this out of the way first - there is no cloud. It&rsquo;s just someone else&rsquo;s computer.</p>
<p>Of course, these days, cloud services go far beyond the utility we&rsquo;d expect from a single computer. Besides being able to quickly set up and utilize the kind of computing power that previously required a new office lease agreement to house, there are now a multitude of monitoring, management, and analysis tools at our giddy fingertips. While it&rsquo;s important to understand that the cloud isn&rsquo;t a better option in every case, for applications that can take advantage of it, we can do more, do it faster, and do it for less money than if we were to insist on building our own on-premises infrastructure.</p>
<p>That&rsquo;s all great, and easily said; moving to the cloud, however, can look from the outset like a pretty daunting task. How, exactly, do we go about shifting what may be years of on-premises data and built-up systems to <em>someone else&rsquo;s computer?</em> You know, without being able to see it, touch it, and without completely screwing up our stuff.</p>
<p>While it probably takes less work and money than setting up or maintaining the same architecture on-premise, it does take some work to move to the cloud initially. It&rsquo;s important that our application is prepared to migrate, and capable of using the benefits of cloud services once it gets there. To accomplish this, and a smooth transition, preparation is key. In fact, it&rsquo;s a whole lot like moving to a new house.</p>
<p>In this article, we&rsquo;ll take a high-level look at the general stages of taking an on-premise or self-hosted application and moving it to the cloud. This guide is meant to serve as a starting point for designing the appropriate process for your particular situation, and to enable you to better understand the cloud migration process. While cloud migration may not be the best choice for some applications - such as ones without scalable architecture or where very high computing resources are needed - a majority of modular and modern applications stand to benefit from a move to the cloud.</p>
<p>It&rsquo;s certainly possible, as I discovered at a recent event put on by <a href="https://aws.amazon.com/">Amazon Web Services</a> (AWS) Solutions Architects, to migrate smoothly and efficiently, with near-zero loss of availability to customers. I&rsquo;ll specifically reference some services provided by AWS, however, similar functionality can be found with other cloud providers. I&rsquo;ve found the offerings from AWS to be pleasantly modular in scope, which is why I use them myself and why they make good examples for discussing general concepts.</p>
<p>To have our move go as smoothly as possible, here are the things we&rsquo;ll want to consider:</p>
<ol>
<li>The type of move we&rsquo;re making;</li>
<li>The things we&rsquo;ll take, and the things we&rsquo;ll clean up;</li>
<li>How to choose the right type and size for the infrastructure we&rsquo;re moving into; and</li>
<li>How to do test runs to practice for the big day.</li>
</ol>
<h2 id="the-type-of-move-were-making">The type of move we&rsquo;re making</h2>
<p>While it&rsquo;s important to understand why we&rsquo;re moving our application to cloud services, we should also have an idea of what we&rsquo;d like it to look like when it gets there. There are three main ways to move to the cloud: re-host, re-platform, or re-factor.</p>
<h3 id="re-host">Re-host</h3>
<p>A re-host scenario is the the most straightforward type of move. It involves no change to the way our application is built or how it runs. For example, if we currently have Python code, use PostgreSQL, and serve our application with Apache, a re-host move would mean we use all the same components, combined in just the same way, only now they&rsquo;re in the cloud. It&rsquo;s a lot like moving into a new house that has the exact same floor plan as the current one. All the furniture goes into the same room it&rsquo;s in now, and it&rsquo;s going to feel pretty familiar when we get there.</p>
<p>The main draw of a re-host move is that it may offer the least amount of complication necessary in order to take advantage of going to the cloud. Scalable applications, for example, can gain the ability to automatically manage necessary application resources.</p>
<p>While re-hosting makes scaling more automatic, it&rsquo;s important to note that it won&rsquo;t in itself make an application scalable. If the application infrastructure is not organized in such a way that gives it the ability to scale, a re-factor may be necessary instead.</p>
<h3 id="re-platform">Re-platform</h3>
<p>If a component of our current application set up isn&rsquo;t working out well for us, we&rsquo;re probably going to want to re-platform. In this case, we&rsquo;re making a change to at least one component of our architecture; for example, switching our database from Oracle to MySQL on <a href="https://aws.amazon.com/rds/">Amazon Relational Database Service</a> (RDS).</p>
<p>Like moving from a small apartment in Tokyo to an equally small apartment in New York, a re-platform doesn&rsquo;t change the basic nature of our application, but does change its appearance and environment. In the database change example, we&rsquo;ll have all the same data, just organized or formatted a little differently. In most cases, we won&rsquo;t have to make these changes manually. A tool such as <a href="https://aws.amazon.com/dms/">Amazon Database Migration Service</a> (DMS) can help to seamlessly shift our data over to the new database.</p>
<p>We might re-platform in order to enable us to better meet a business demand in the future, such as scaling up, integrating with other technological components, or choosing a more modern technology stack.</p>
<h3 id="re-factor">Re-factor</h3>
<p>A move in which we re-factor our application is necessarily more complicated than our other options, however, it may provide the most overall benefit for companies or applications that have reason to make this type of move. As with code, refactoring is done when fundamental changes need to be made in order for our application to meet a business need. The specifics necessarily differ case-by-case, but typically involve changes to architectural components or how those components relate to one another. This type of move may also involve changing application code in order to optimize the application&rsquo;s performance in a cloud environment. We can think of it like moving out from our parent&rsquo;s basement in the suburbs and getting a nice townhouse in the city. There&rsquo;s no way we&rsquo;re taking that ancient hand-me-down sofa, so we&rsquo;ll need some new furniture, and for our neighbour&rsquo;s sake, probably window dressings.</p>
<p>Refactoring may enable us to modernize a dated application, or make it more efficient in general. With greater efficiency, we can better take advantage of services that cloud providers typically offer, like bursting resources or attaining deep analytical insight.</p>
<p>If a re-factor is necessary but time is scarce, it may be better to re-host or re-platform first, then re-factor later. That way, we&rsquo;ll have a job well done later instead of a hasty, botched migration (and more problems) sooner.</p>
<h2 id="what-to-take-and-what-to-clean-up">What to take, and what to clean up</h2>
<p>Over the years of living in one place, stuff tends to pile up unnoticed in nooks and crannies. When moving house, it&rsquo;s usually a great opportunity to sort everything out and decide what is useful enough to keep, and what should be discarded or given away. Moving to the cloud is a similarly great opportunity to do the same when it comes to our application.</p>
<p>While cloud storage is inexpensive nowadays, there may be some things that don&rsquo;t make sense to store any longer, or at least not keep stored with our primary application. If data cannot be discarded due to policy or regulations, we may choose a different storage class to house data that we don&rsquo;t expect to need anytime soon outside of our main application.</p>
<p>In the case of <a href="https://aws.amazon.com/s3/">Amazon&rsquo;s Simple Storage Service</a> (S3), we can choose to use different <a href="https://aws.amazon.com/s3/storage-classes/">storage classes</a> that accomplish this goal. While the data that our business relies on every day can take advantage of the Standard class 99.99% availability, data meant for long-term cold storage such as archival backups can be put into the Glacier class, which has longer retrieval time and lower cost.</p>
<h2 id="the-right-type-and-size">The right type and size</h2>
<p>Choosing the type and size of cloud infrastructure appropriate for our business is usually the part that can be the most confusing. How should we predict, in a new environment or for a growing company, the computing power we&rsquo;ll need?</p>
<p>Part of the beauty of not procuring hardware on our own is that won&rsquo;t have to make predictions like these. Using cloud storage and instances, expanding or scaling back resources can be done in a matter of minutes, sometimes seconds. With managed services, it can even be done automatically for us. With the proper support for scalability in our application, it&rsquo;s like having a magical house that instantly generates any type of room and amenity we need at that moment. The ability to continually ensure that we&rsquo;re using appropriate, cost-effective resources is at our fingertips, and often clearly visualized in charts and dashboards.</p>
<p>For applications new to the cloud, some leeway for experimentation may be necessary. While cloud services enables us to quickly spin up and try out different architectures, there&rsquo;s no guarantee that all of those set ups will work well for our application. For example, running a single instance may be <a href="http://einaregilsson.com/serverless-15-percent-slower-and-eight-times-more-expensive/">less expensive than going serverless</a>, but we&rsquo;d be hard pressed to know this until we tried it out.</p>
<p>As a starting point, we simply need enough storage and computing power to support the application as it is currently running, today. For example, in the case of storage, consider the size of the current database - the actual database data, not the total storage capacity of hardware on-premises. For a detailed cost exploration, AWS even offers a <a href="https://calculator.s3.amazonaws.com/index.html">Simple Monthly Calculator</a> with use case samples to help guide expectations.</p>
<h2 id="do-test-runs-before-the-big-day">Do test runs before the big day</h2>
<p>Running a trial cloud migration may be an odd concept, but it is an essential component to ensuring that the move goes as planned with minimal service interruption. Imagine the time and energy that would be saved in the moving house example if we could automate test runs! Invariably, some box or still-hung picture is forgotten and left out of the main truck, necessitating additional trips in other vehicles. With multiple chances to ensure we&rsquo;ve got it down pat, we minimize the possibility that our move causes any break in normal day-to-day business.</p>
<p>Generally, to do a test run, we create a duplicate version of our application. The more we can duplicate, the more thorough the test run will be, especially if our data is especially large. Though duplication may seem tedious, working with the actual components we intend to migrate is essential to ensuring the migration goes as planned. After all, if we only did a moving-house test run with one box, it wouldn&rsquo;t be very representative.</p>
<p>Test runs can help to validate our migration plan against any challenges we may encounter. These challenges might include:</p>
<ul>
<li>Downtime restrictions;</li>
<li>Encrypting data in transit and immediately when at rest on the target;</li>
<li>Schema conversion to a new target schema (the <a href="https://aws.amazon.com/dms/schema-conversion-tool/">AWS Schema Conversion Tool</a> can also help);</li>
<li>Access to databases, such as through firewalls or VPNs;</li>
<li>Developing a process to ensure that all the data successfully migrated, such as by using a hash function.</li>
</ul>
<p>Test runs also help to give us a more accurate picture of the overall time that a migration will take, as well as affording us the opportunity to fine-tune it. Factors that may affect the overall speed of a migration include:</p>
<ul>
<li>The sizes of the source and target instances;</li>
<li>Available bandwidth for moving data;</li>
<li>Schema configurations; and</li>
<li>Transaction pressure on the source, such as changes to the data and the volume of incoming transactions.</li>
</ul>
<p>Once the duplicate application has been migrated via one or more <a href="https://aws.amazon.com/cloud-data-migration/">options</a>, we test the heck out of the application that&rsquo;s now running in the cloud to ensure it performs as expected. Ideally, on the big day, we&rsquo;d follow this same general process to move up-to-date duplicate data, and then seamlessly point the &ldquo;real&rdquo; application or web address to the new location in the cloud. This means that our customers experience near-zero downtime; essentially, only the amount of time that the change in location-pointing would need to propagate to their device.</p>
<p>In the case of very large or complex applications with many components or many teams working together at the same time, a more gradual approach may be more appropriate than the &ldquo;Big Bang&rdquo; approach, and may help to mitigate risk of any interruptions. This means migrating in stages, component by component, and running tests between stages to ensure that all parts of the application are communicating with each other as expected.</p>
<h2 id="preparation-is-essential-to-a-smooth-migration">Preparation is essential to a smooth migration</h2>
<p>I hope this article has enabled a more practical understanding of how cloud migration can be achieved. With thorough preparation, it&rsquo;s possible to take advantage of all the cloud has to offer, with minimal hassle to get there.</p>
<p>My thanks to the AWS Solutions Architects who presented at Pop-Up Loft and shared their knowledge on these topics, in particular: Chandra Kapireddy, Stephen Moon, John Franklin, Michael Alpaugh, and Priyanka Mahankali.</p>
<p>One last nugget of wisdom, courtesy of John: &ldquo;Friends don&rsquo;t let friends use DMS to create schema objects.&rdquo;</p>
]]></content></entry><entry><title type="html">Git commit practices your future self will thank you for</title><link href="https://victoria.dev/posts/git-commit-practices-your-future-self-will-thank-you-for/"/><id>https://victoria.dev/posts/git-commit-practices-your-future-self-will-thank-you-for/</id><author><name>Victoria Drake</name></author><published>2018-08-06T08:54:56-04:00</published><updated>2018-08-06T08:54:56-04:00</updated><content type="html"><![CDATA[<p>A history of clean commits can be evidence of a lot of things: attention to detail, good work ethic, and genuine investment in the project. What do your Git commits say about you?</p>
<p>Here&rsquo;s how you can create and maintain a clean and orderly Git commit history using <a href="#write-great-git-commit-messages-with-a-template">message templates</a>, <a href="#one-change-per-commit-how-to-squash-git-commits">learning how to squash commits</a>, <a href="#git-stash">using git stash</a>, and <a href="#tag-release-versions-using-annotated-git-tags">creating annotated commit tags</a>.</p>
<h2 id="what-it-means-to-commit-responsibly">What it means to commit responsibly</h2>
<p>Whether our code will be seen by the entire open source community or just future versions of ourselves, either one will be grateful if we commit responsibly today. Being responsible can mean a lot of things to different people, so I enlisted some of <code>mastodon.technology</code> (instance shut down since) and <a href="https://dev.to/victoria/what-does-it-mean-to-commit-responsibly-22mi">dev.to</a> to help round out my list. From those (really great) threads, I distilled these main points:</p>
<blockquote>
<p><strong>Committing responsibly</strong></p>
<ol>
<li>Provide and/or use tests to avoid committing bugs or broken builds</li>
<li>Write clean code that meets style specifications</li>
<li>Use descriptive commit messages that reference related discussion</li>
<li>Make only one change per commit and avoid including unrelated changes</li>
</ol></blockquote>
<p>Some of the above is achieved through maintaining a short feedback loop that helps you improve your code quality while staying accountable to yourself. <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/">I wrote another article</a> that discusses this in detail, especially the part about <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/#block-out-time-for-code-review">code review</a>. Other items on this list have to do specifically with making commits in Git. There are some features of Git that can benefit us in these areas, as can harnessing tools like Vim. I&rsquo;ll cover those topics here.</p>
<p>If the majority of your Git commits so far have been created with something like <code>git commit -m &quot;Bug fixes&quot;</code> then this is the article for you!</p>
<h2 id="write-great-git-commit-messages-with-a-template">Write great Git commit messages with a template</h2>
<p>I think <a href="https://github.com/torvalds/subsurface-for-dirk/commit/b6590150d68df528efd40c889ba6eea476b39873">Linus</a> would be very happy if we didn&rsquo;t use <code>git commit -m &quot;Fix bug&quot;</code> in a public repository ever again. As very well put in <a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">this classic post</a> and <a href="https://chris.beams.io/posts/git-commit/">the seven rules of a great Git commit message</a>:</p>
<blockquote>
<p>A properly formed Git commit subject line should always be able to complete the following sentence:</p>
<p>If applied, this commit will <em>your subject line here</em></p></blockquote>
<p><a href="http://who-t.blogspot.com/2009/12/on-commit-messages.html">This other classic post</a> also discusses three questions that the body of the commit message should answer:</p>
<blockquote>
<p>Why is it necessary?
How does it address the issue?
What effects does the patch have?</p></blockquote>
<p>This can be a lot to remember to cover, but there&rsquo;s a slick way to have these prompts at hand right when you need it. You can set up a commit message template by using the <code>commit.template</code> <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">configuration value</a>.</p>
<p>To set it, configure Git to use a template file (for example, <code>.gitmessage</code> in your home directory), then create the template file with Vim:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git config --global commit.template ~/.gitmessage
</span></span><span style="display:flex;"><span>vim ~/.gitmessage
</span></span></code></pre></div><p>When we run <code>git commit</code> without the <code>-m</code> message flag, the editor will open with our helpful template ready to go. Here&rsquo;s my commit message template:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>## If applied, this commit will...
</span></span><span style="display:flex;"><span>## [Add/Fix/Remove/Update/Refactor/Document] [issue #id] [summary]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>## Why is it necessary? (Bug fix, feature, improvements?)
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>## How does the change address the issue?
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>## What side effects does this change have?
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><p>I&rsquo;m a fan of this format because commented lines are not included in the final message. I can simply fill in the blank lines with text and bullet points under the prompts, and it comes out looking something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>Fix #16 missing CSS variables
</span></span><span style="display:flex;"><span>- Fix for unstyled elements
</span></span><span style="display:flex;"><span>- Add background color, height for code blocks
</span></span><span style="display:flex;"><span>- Only affects highlight class
</span></span></code></pre></div><h3 id="reference-related-discussion">Reference related discussion</h3>
<p>Issue trackers in <a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue">GitHub</a> and <a href="https://confluence.atlassian.com/bitbucket/resolve-issues-automatically-when-users-push-code-221451126.html">Bitbucket</a> both recognize the keywords <code>close</code>, <code>fix</code>, and <code>resolve</code> followed immediately by the issue or pull request number. These keywords conveniently help us close the referenced issue or pull request, and this helps maintain a clear trail of changes. <a href="https://docs.gitlab.com/ee/user/project/issues/crosslinking_issues.html">GitLab</a>, and issue trackers like <a href="https://confluence.atlassian.com/jirasoftwarecloud/referencing-issues-in-your-development-work-777002789.html">Jira</a> offer similar functionalities.</p>
<h3 id="use-helpful-vim-settings-for-git-commit-messages">Use helpful Vim settings for git commit messages</h3>
<p>By adding a few lines to our Vim configuration, we can make writing great git commit messages easy. We can add these lines to <code>~/.vimrc</code> to turn on syntax highlighting in general, and spell check and text wrapping for commit messages in particular:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vimrc" data-lang="vimrc"><span style="display:flex;"><span><span style="color:#75715e">&#34; Filetype detection, plugins, and indent rules</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">filetype</span> <span style="color:#a6e22e">plugin</span> <span style="color:#a6e22e">indent</span> <span style="color:#a6e22e">on</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Syntax highlighting</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">syntax</span> <span style="color:#a6e22e">on</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Spell check and line wrap just for git commit messages</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">Filetype</span> <span style="color:#a6e22e">gitcommit</span> <span style="color:#a6e22e">setlocal</span> <span style="color:#a6e22e">spell</span> <span style="color:#a6e22e">textwidth</span>=<span style="color:#ae81ff">72</span>
</span></span></code></pre></div><p>If you&rsquo;re curious, you can find my full <code>~/.vimrc</code> in my <a href="https://github.com/victoriadrake/dotfiles">dotfiles</a>.</p>
<p>Other editors have settings that can help us out as well. I came across <a href="https://dev.to/shreyasminocha/how-i-do-my-git-commits-34d">these for Sublime Text 3</a> and <a href="https://github.com/Microsoft/vscode-docs/blob/master/docs/getstarted/tips-and-tricks.md#language-specific-settings">language specific settings for VS Code</a>.</p>
<h2 id="one-change-per-commit-how-to-squash-git-commits">One change per commit: how to squash Git commits</h2>
<figure><img src="/posts/git-commit-practices-your-future-self-will-thank-you-for/git-commit-squash.png"
    alt="A doodle of squash"><figcaption>
      <p>Still life Git</p>
    </figcaption>
</figure>

<p>Let&rsquo;s get one thing out of the way first: rewriting Git history just for the sake of having a pretty tree, especially with public repositories, is generally not advisable. It&rsquo;s kind of like going back in time, where changes you make to your version of the project cause it to look completely different from a version that someone else forked from a point in history that you&rsquo;ve now erased - I mean, haven&rsquo;t you seen <em>Back to the Future Part II</em>? (If you&rsquo;d rather maintain that only one <em>Back to the Future</em> movie was ever made, thus sparing your future self from having to watch the sequels, I get it.)</p>
<p>Here&rsquo;s the main point. If you&rsquo;ve pushed messy commits to a public repository, I say go right ahead and leave them be, instead of complicating things further. (We all learn from our embarrassments, especially the public ones - I&rsquo;m looking at you, past-Vicky.) If your messy commits currently only exist on your local version, great! We can tidy them up into one clean, well-described commit that we&rsquo;ll be proud to push, and no one will be the wiser.</p>
<p>There are a couple different ways to squash commits, and choosing the appropriate one depends on what we need to achieve.</p>
<p>The following examples are illustrated using <code>git log --graph</code>, with some options for brevity. We can set a handy alias to see this log format in our terminal with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git config --global alias.plog <span style="color:#e6db74">&#34;log --graph --pretty=format:&#39;%h -%d %s %n&#39; --abbrev-commit --date=relative --branches&#34;</span>
</span></span></code></pre></div><p>Then we just do <code>git plog</code> to see the pretty log.</p>
<h3 id="method-1-one-commit-to-rule-the-master-branch">Method #1: one commit to rule the master branch</h3>
<p>This is appropriate when:</p>
<ul>
<li>We&rsquo;re committing directly to master</li>
<li>We don&rsquo;t intend to open a pull request to merge a feature</li>
<li>We don&rsquo;t want to preserve history of branches or changes we haven&rsquo;t yet pushed</li>
</ul>
<p>This method takes a Git tree that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>*   3e8fd79 - (HEAD -&gt; master) Fix a thing
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>*   4f0d387 - Tweak something
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>*   0a6b8b3 - Merge branch &#39;new-article&#39;
</span></span><span style="display:flex;"><span>|\
</span></span><span style="display:flex;"><span>| * 33b5509 - (new-article) Update article again again
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>| * 1782e63 - Update article again
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>| * 3c5b6a8 - Update article
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>* | f790737 - (master) Tweak unrelated article
</span></span><span style="display:flex;"><span>|/
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 65af7e7 Add social media link
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>And makes it look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 7f9a127 - (HEAD -&gt; master) Add new article
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>Here&rsquo;s how to do it - hold on to your hoverboards, it&rsquo;s super complicated:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git reset --soft origin/master
</span></span><span style="display:flex;"><span>git commit
</span></span></code></pre></div><p>Yup that&rsquo;s all. We can delete the unwanted branch with <code>git branch -D new-article</code>.</p>
<h3 id="method-2-not-that-much">Method #2: not <em>that</em> much</h3>
<p>This is appropriate when:</p>
<ul>
<li>We want to squash the last <em>x</em> commits but not <em>all</em> commits since <code>origin/master</code></li>
<li>We want to open a pull request to merge a branch</li>
</ul>
<p>This method takes a Git tree that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 13a070f - (HEAD -&gt; new-article) Finish new article
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 78e728a - Edit article draft
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* d62603c - Add example
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 1aeb20e - Update draft
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 5a8442a - Add new article draft
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>| * 65af7e7 - (master) Add social media link
</span></span><span style="display:flex;"><span>|/
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>And makes it look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 90da69a - (HEAD -&gt; new-article) Add new article
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>| * 65af7e7 - (master) Add social media link
</span></span><span style="display:flex;"><span>|/
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>To squash the last five commits on branch <code>new-article</code> into one, we use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git reset --soft HEAD~5
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;New message for the combined commit&#34;</span>
</span></span></code></pre></div><p>Where <code>--soft</code> leaves our files untouched and staged, and <code>5</code> can be thought of as &ldquo;the number of previous commits I want to combine.&rdquo;</p>
<p>We can then do <code>git merge master</code> and create our pull request.</p>
<h3 id="method-3-getting-picky">Method #3: getting picky</h3>
<p>Say we had a really confusing afternoon and our Git tree looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* dc89918 - (HEAD -&gt; master) Add link
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 9b6780f - Update image asset
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 6379956 - Fix CSS bug
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>*   16ee1f3 - Merge master into branch
</span></span><span style="display:flex;"><span>|\
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>| * ccec365 - Update list page
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>* | 033dee7 - Fix typo
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>* | 90da69a - Add new article
</span></span><span style="display:flex;"><span>|/
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>We want to retain some of this history, but clean up the commits. We also want to change the messages for some of the commits. To achieve this, we&rsquo;ll use <code>git rebase</code>.</p>
<p>This is appropriate when:</p>
<ul>
<li>We want to squash only some commits</li>
<li>We want to edit previous commit messages</li>
<li>We want to delete or reorder specific commits</li>
</ul>
<p>Git <code>rebase</code> is a powerful tool, and handy once we&rsquo;ve got the hang of it. To change all the commits since <code>origin/master</code>, we do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git rebase -i origin/master
</span></span></code></pre></div><p>Or, we can do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git rebase -i 0e3fa32
</span></span></code></pre></div><p>Where the commit hash is the last commit we want to retain as-is.</p>
<p>The <code>-i</code> option lets us run the interactive rebase tool, which launches our editor with, essentially, a script for us to modify. We&rsquo;ll see a list of our commits in reverse order to the git log, with the oldest at the top:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>pick 90da69a Add new article
</span></span><span style="display:flex;"><span>pick 033dee7 Fix typo
</span></span><span style="display:flex;"><span>pick ccec365 Update list page
</span></span><span style="display:flex;"><span>pick 6379956 Fix CSS bug
</span></span><span style="display:flex;"><span>pick 9b6780f Update image asset
</span></span><span style="display:flex;"><span>pick dc89918 Add link
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># Rebase 0e3fa32..dc89918 onto 0e3fa32 (6 commands)
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># Commands:
</span></span><span style="display:flex;"><span># p, pick = use commit
</span></span><span style="display:flex;"><span># r, reword = use commit, but edit the commit message
</span></span><span style="display:flex;"><span># e, edit = use commit, but stop for amending
</span></span><span style="display:flex;"><span># s, squash = use commit, but meld into previous commit
</span></span><span style="display:flex;"><span># f, fixup = like &#34;squash&#34;, but discard this commit&#39;s log message
</span></span><span style="display:flex;"><span># x, exec = run command (the rest of the line) using shell
</span></span><span style="display:flex;"><span># d, drop = remove commit
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># These lines can be re-ordered; they are executed from top to bottom.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># If you remove a line here THAT COMMIT WILL BE LOST.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># However, if you remove everything, the rebase will be aborted.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># Note that empty commits are commented out
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span>~
</span></span></code></pre></div><p>The comments give us a handy guide as to what we&rsquo;re able to do. For now, let&rsquo;s squash the commits with small changes into the more significant commits. In our editor, we change the script to look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>pick 90da69a Add new article
</span></span><span style="display:flex;"><span>squash 033dee7 Fix typo
</span></span><span style="display:flex;"><span>pick ccec365 Update list page
</span></span><span style="display:flex;"><span>squash 6379956 Fix CSS bug
</span></span><span style="display:flex;"><span>squash 9b6780f Update image asset
</span></span><span style="display:flex;"><span>squash dc89918 Add link
</span></span></code></pre></div><p>Once we save the changes, the interactive tool continues to run. It will execute our instructions in sequence. In this case, we see the editor again with the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span># This is a combination of 2 commits.
</span></span><span style="display:flex;"><span># This is the 1st commit message:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Add new article
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># This is the commit message #2:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Fix typo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># Please enter the commit message for your changes. Lines starting
</span></span><span style="display:flex;"><span># with &#39;#&#39; will be ignored, and an empty message aborts the commit.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># interactive rebase in progress; onto 0e3fa32
</span></span><span style="display:flex;"><span># Last commands done (2 commands done):
</span></span><span style="display:flex;"><span>#    pick 90da69a Add new article
</span></span><span style="display:flex;"><span>#    squash 033dee7 Fix typo
</span></span><span style="display:flex;"><span># Next commands to do (4 remaining commands):
</span></span><span style="display:flex;"><span>#    pick ccec365 Update list page
</span></span><span style="display:flex;"><span>#    squash 6379956 Fix CSS bug
</span></span><span style="display:flex;"><span># You are currently rebasing branch &#39;master&#39; on &#39;0e3fa32&#39;.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># Changes to be committed:
</span></span><span style="display:flex;"><span>#       modified:   ...
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span>~
</span></span></code></pre></div><p>Here&rsquo;s our chance to create a new commit message for this first squash, if we want to. Once we save it, the interactive tool will go on to the next instructions. Unless&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>[detached HEAD 3cbad01] Add new article
</span></span><span style="display:flex;"><span> 1 file changed, 129 insertions(+), 19 deletions(-)
</span></span><span style="display:flex;"><span>Auto-merging content/dir/file.md
</span></span><span style="display:flex;"><span>CONFLICT (content): Merge conflict in content/dir/file.md
</span></span><span style="display:flex;"><span>error: could not apply ccec365... Update list page
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Resolve all conflicts manually, mark them as resolved with
</span></span><span style="display:flex;"><span>&#34;git add/rm &lt;conflicted_files&gt;&#34;, then run &#34;git rebase --continue&#34;.
</span></span><span style="display:flex;"><span>You can instead skip this commit: run &#34;git rebase --skip&#34;.
</span></span><span style="display:flex;"><span>To abort and get back to the state before &#34;git rebase&#34;, run &#34;git rebase --abort&#34;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Could not apply ccec365... Update list page
</span></span></code></pre></div><p>Again, the tool offers some very helpful instructions. Once we fix the merge conflict, we can resume the process with <code>git rebase --continue</code>. Our interactive rebase picks up where it left off.</p>
<p>Once all the squashing is done, our Git tree looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 3564b8c - (HEAD -&gt; master) Update list page
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 3cbad01 - Add new article
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>Phew, much better.</p>
<h2 id="git-stash">Git stash</h2>
<p>If we&rsquo;re in the middle of some work and it&rsquo;s not a good time to commit, but we need to switch branches, <a href="https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning">stashing</a> can be a good option. Stashing lets us save our unfinished work without needing to create a half-assed commit. It&rsquo;s like that pile of paper on your desk representing all the stuff you&rsquo;ve been in the middle of doing since two weeks ago. Yup, that one.</p>
<p>It&rsquo;s as easy as typing <code>git stash</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Saved working directory and index state WIP on master: 3564b8c Update list page
</span></span></code></pre></div><p>The dirty work we&rsquo;re in the midst of is safely tucked away, and our working directory is clean - just as it was after our last commit. To see what&rsquo;s in our stash stack, we do <code>git stash list</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>stash@{0}: WIP on master: 3564b8c Update list page
</span></span><span style="display:flex;"><span>stash@{1}: WIP on master: 90da69a Add new article
</span></span><span style="display:flex;"><span>stash@{2}: WIP on cleanup: 0e3fa32 Update theme
</span></span></code></pre></div><p>To restore our work in progress, we use <code>git stash apply</code>. Git will try and apply our most recent stashed work. To apply an older stash, we use <code>git stash apply stash@{1}</code> where <code>1</code> is the stash to apply. If changes since stashing our work prevent the stash from reapplying cleanly, Git will give us a merge conflict to resolve.</p>
<p>Applying a stash doesn&rsquo;t remove it from our list. To remove a stash from our stack, we do <code>git stash drop stash@{0}</code> where <code>0</code> is the one we want to remove.</p>
<p>We can also use <code>git stash pop</code> to apply the most recent stash and then immediately remove it from the stack.</p>
<h2 id="tag-release-versions-using-annotated-git-tags">Tag release versions using annotated Git tags</h2>
<p>In the spirit of having a beautiful, clean Git history, there&rsquo;s one more thing we can do to help make our commit log inspire infinite joy in its viewers. If you&rsquo;ve never heard of <code>git tag</code>, your master branch history might look like this&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 0377782 - Update theme
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* ecf8128 - Add about page (#25)
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 33e432f - Fix #23 navigation bug
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 08b853b - Create blog section
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 63d18b4 - Add theme (#12)
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 233e23f - Add main content (#6)
</span></span></code></pre></div><p>Wouldn&rsquo;t it be nice if it looked like this instead?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 0377782 - (tag: v2.1.0) Update theme
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* ecf8128 - Add about page (#25)
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 33e432f - Fix #23 navigation bug
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 08b853b - (tag: v2.0.0) Create blog section
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 63d18b4 - Add theme (#12)
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 233e23f - (tag: v1.1.0) Add main content (#6)
</span></span></code></pre></div><p>We can tag Git commits with anything, but tags are especially helpful for semantic versioning of releases. Sites like <a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository#creating-a-release">GitHub</a> and <a href="https://docs.gitlab.com/ee/user/project/releases/">GitLab</a> have pages for repositories that list tags, letting viewers of our project browse the release versions. This can be helpful for public projects to differentiate major releases, updates with bug fixes, or beta versions.</p>
<p>There are two types of Git tags: lightweight and annotated. For adding a version tag to commits, we use annotated Git tags.</p>
<p>The <a href="https://git-scm.com/docs/git-tag">Git tag documentation</a> explains it this way:</p>
<blockquote>
<p>Tag objects (created with -a, -s, or -u) are called &ldquo;annotated&rdquo; tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature. Whereas a &ldquo;lightweight&rdquo; tag is simply a name for an object (usually a commit object).</p>
<p>Annotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for naming objects (like git describe) will ignore lightweight tags by default.</p></blockquote>
<p>We can think of lightweight tags as bookmarks, and annotated tags as signed releases.</p>
<p>For public repositories, annotated tags allow us to:</p>
<ul>
<li>See who tagged the commit, which may differ from the commit author</li>
<li>See all the tags with <code>git describe</code></li>
<li>Avoid conflicting tag names</li>
</ul>
<p>To create an annotated Git tag and attach it to our current (last) commit, we do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git tag -a v1.2.0 -m <span style="color:#e6db74">&#34;Clever release title&#34;</span>
</span></span></code></pre></div><p>This tags the commit on our local repository. To push all annotated tags to the remote, we do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git push --follow-tags
</span></span></code></pre></div><p>We can also set our Git configuration to push our annotated tags by default:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git config --global push.followTags true
</span></span></code></pre></div><p>If we then want to skip pushing tags this time, we pass <code>--no-follow-tags</code>.</p>
<h2 id="practice-responsible-commits">Practice responsible commits</h2>
<p>A little time invested in getting familiar with these tools and practices can make your commits even more useful and well-crafted. With a little practice, these processes will become second nature. You can make it even easier by creating a personal commit checklist on paper to keep handy while you work - or if that isn&rsquo;t fun enough, <a href="/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/">make it an interactive pre-commit hook.</a></p>
<p>Creating clean, useful, and responsible Git commits says a lot about you. Especially in remote work, Git commits may be a primary way that people interact with you over projects. With a little practice and effort, you can make your commit habits an even better reflection of your best work - work that is evidently created with care and pride.</p>
<p>If you enjoyed this post, there&rsquo;s a lot more where it came from! I write about computing, cybersecurity, and leading great technical teams. <a href="https://victoria.dev">Subscribe on victoria.dev</a> to see new articles first, and check out the ones below!</p>
]]></content></entry><entry><title type="html">An automatic interactive pre-commit checklist, in the style of infomercials</title><link href="https://victoria.dev/archive/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/"/><id>https://victoria.dev/archive/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/</id><author><name>Victoria Drake</name></author><published>2018-07-23T09:38:09-04:00</published><updated>2018-07-23T09:38:09-04:00</updated><content type="html"><![CDATA[<p>What&rsquo;s that, you say? You&rsquo;ve become tired of regular old boring <em>paper checklists?</em> Well, my friend, today is your lucky day! You, yes, <em>you,</em> can become the proud owner of a brand-spanking-new <em>automatic interactive pre-commit hook checklist!</em> You&rsquo;re gonna love this! Your life will be so much easier! Just wait until your friends see you.</p>
<h2 id="whats-a-pre-commit-hook">What&rsquo;s a pre-commit hook</h2>
<p>Did you know that nearly <em>1 out of 5 coders</em> are too embarrassed to ask this question? Don&rsquo;t worry, it&rsquo;s perfectly normal. In the next 60 seconds we&rsquo;ll tell you all you need to know to pre-commit with confidence.</p>
<p>A <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git hook</a> is a feature of Git that triggers custom scripts at useful moments. They can be used for all kinds of reasons to help you automate your work, and best of all, you already have them! In every repository that you initialize with <code>git init</code>, you&rsquo;ll have a set of example scripts living in <code>.git/hooks</code>. They all end with <code>.sample</code> and activating them is as easy as renaming the file to remove the <code>.sample</code> part.</p>
<p>Git hooks are not copied when a repository is cloned, so you can make them as personal as you like.</p>
<p>The useful moment in particular that we&rsquo;ll talk about today is the <em>pre-commit</em>. This hook is run after you do <code>git commit</code>, and before you write a commit message. Exiting this hook with a non-zero status will abort the commit, which makes it extremely useful for last-minute quality checks. Or, a bit of fun. Why not both!</p>
<h2 id="how-do-i-get-a-pre-commit-checklist">How do I get a pre-commit checklist</h2>
<p>I only want the best for my family and my commits, and that&rsquo;s why I choose an interactive pre-commit checklist. Not only is it fun to use, it helps to keep my projects safe from unexpected off-spec mistakes!</p>
<p>It&rsquo;s so easy! I just write a bash script that can read user input, and plop it into <code>.git/hooks</code> as a file named <code>pre-commit</code>. Then I do <code>chmod +x .git/hooks/pre-commit</code> to make it executable, and I&rsquo;m done!</p>
<p>Oh look, here comes an example bash script now!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Would you like to play a game?&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Read user input, assign stdin to keyboard</span>
</span></span><span style="display:flex;"><span>exec &lt; /dev/tty
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -p <span style="color:#e6db74">&#34;Have you double checked that only relevant files were added? (Y/n) &#34;</span> yn; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $yn in
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Yy<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> break;;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Nn<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please ensure the right files were added!&#34;</span>; exit 1;;
</span></span><span style="display:flex;"><span>        * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please answer y (yes) or n (no):&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -p <span style="color:#e6db74">&#34;Has the documentation been updated? (Y/n) &#34;</span> yn; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $yn in
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Yy<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> break;;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Nn<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please add or update the docs!&#34;</span>; exit 1;;
</span></span><span style="display:flex;"><span>        * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please answer y (yes) or n (no):&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -p <span style="color:#e6db74">&#34;Do you know which issue or PR numbers to reference? (Y/n) &#34;</span> yn; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $yn in
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Yy<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> break;;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Nn<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Better go check those tracking numbers!&#34;</span>; exit 1;;
</span></span><span style="display:flex;"><span>        * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please answer y (yes) or n (no):&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exec &lt;&amp;-
</span></span></code></pre></div><h2 id="take-my-money">Take my money</h2>
<p>Don&rsquo;t delay! Take advantage <em>right now</em> of this generous <em>one-time offer!</em> An interactive pre-commit hook checklist can be yours, today, for the low, low price of&hellip; free? Wait, who wrote this script?</p>
]]></content></entry><entry><title type="html">How to set up a short feedback loop as a solo coder</title><link href="https://victoria.dev/archive/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/"/><id>https://victoria.dev/archive/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/</id><author><name>Victoria Drake</name></author><published>2018-07-02T10:08:41-04:00</published><updated>2018-07-02T10:08:41-04:00</updated><content type="html"><![CDATA[<p>I&rsquo;ve spent the last couple years as a solo freelance developer. Comparing this experience to previously working in companies, I&rsquo;ve noticed that those of us who work alone can have fewer iterative opportunities for improvement than developers who work on teams. Integral to having opportunities to improve is the concept of a short feedback loop: a process of incorporating new learning from observation and previous experience continuously over a short period of time. This process has to be <em>manufactured</em> by people working mostly alone, instead of, as is often the case, <em>adopted</em> when you join a team.</p>
<p>In this post I hope to share what I&rsquo;ve learned about setting yourself up to improve quickly and continuously as a solo coder.</p>
<h2 id="about-feedback-loops">About feedback loops</h2>
<p>United States Air Force Colonel John Boyd developed the concept of the <a href="https://en.wikipedia.org/wiki/OODA_loop">OODA loop</a>, OODA being an acronym for <em>observe, orient, decide, act</em>. In military operations, this illustrates a process of decision-making based on the constant ingestion of new information:</p>
<p><strong>Observe:</strong> Obtain raw information about unfolding circumstances and the current environment.
<strong>Orient:</strong> Put raw observations in context. Consider such things as relevancy to the current situation and previously gained knowledge and expertise.
<strong>Decide:</strong> Make a plan for moving towards your goal.
<strong>Act:</strong> Execute the plan.</p>
<p>Since it&rsquo;s a loop, the <em>act</em> stage leads directly back into the <em>observe</em> stage. This is the critical &ldquo;feed back&rdquo; concept that enables increasingly successful iterations. It&rsquo;s widely applicable beyond military operations - you may recognize it as the origin of the <a href="https://en.wikipedia.org/wiki/PDCA">PDCA</a> (plan-do-check-act) method.</p>
<p>I like the OODA loop for being a succinct illustration of a general feedback loop. Many concepts and working methods build on the idea of feedback loops, including <a href="https://en.wikipedia.org/wiki/DevOps">DevOps</a> and <a href="https://en.wikipedia.org/wiki/Agile_software_development">Agile software development</a> methods.</p>
<h3 id="development-team-feedback-loop">Development team feedback loop</h3>
<p>Let&rsquo;s look at what some components of a feedback loop for a developer on a team might look like:</p>
<ol>
<li>Direction from product owners or reviews from users</li>
<li>Daily scrum/standup with whole team</li>
<li>Prioritization with developer team</li>
<li>Individual coding and testing</li>
<li>Peer code review</li>
<li>Deployment and performance monitoring</li>
</ol>
<p>Implicit in these steps is the support of co-workers and management - in other words, someone to answer to. How can a solo freelance developer create a similar environment of accountability?</p>
<h3 id="solo-developer-feedback-loop">Solo developer feedback loop</h3>
<p>Here are some possible steps that an individual freelance developer can implement to create a short feedback loop:</p>
<ol>
<li>Build discipline</li>
<li>Clarify concrete top-level goals</li>
<li>Prioritize and plan mid-level and low-level goals</li>
<li>Automate your work</li>
<li>Block out time for code review</li>
<li>Block out time for process review</li>
<li>Update your goals and processes with the results of your reviews</li>
</ol>
<p>I&rsquo;ll cover each of these stages in detail below.</p>
<h2 id="build-discipline">Build discipline</h2>
<p>More of a prerequisite than a stage in itself, building discipline is what enables our short feedback loop to work. Nothing else in this article will be helpful unless we have the skill to do something we don&rsquo;t want to do. Discipline is most certainly a skill. It can be learned, trained, and improved just like any other.</p>
<p>Why is discipline so important? Because when we&rsquo;re crunching to get a project completed this Friday evening, we&rsquo;re not going to want to write a good commit message. We&rsquo;re not going to want to clean up the code comments. We just want to see the darn thing go, <em>Hello, git push -f</em>. It&rsquo;s in those moments that discipline enables us to not miss an opportunity to practice, learn, and improve our work process. Discipline helps us avoid Friday night commits that turn into Monday morning <code>git reset --hard</code>s.</p>
<h2 id="clarify-concrete-top-level-goals">Clarify concrete top-level goals</h2>
<p><img src="feedback-topgoal.png" alt="Envisioning a peanut butter and jelly sandwich"></p>
<p>Whether working for a client or bootstrapping our own best-new-app-ever, we won&rsquo;t be able to measure any progress or improvements without something to measure them against.</p>
<p>When I&rsquo;m discussing a new project with a client, I always speak in terms of concrete achievements. This could take the form of accomplishing a specific feature by a certain date, or deciding what the MVP looks like to a user. This is as much to my benefit as my client&rsquo;s. By agreeing, in writing, <em>what</em> will be achieved and <em>when</em>, my client and I have clearly defined top-level goals and can both assess how the project is progressing. When I&rsquo;m working for myself, I treat myself as I would a client. I make a commitment, in writing, describing what will be achieved, and when. This can be something as simple as a goals list for the week, or as detailed as a kanban board.</p>
<p>The point of having a concrete goal, however, is not to stick to it at all costs. It&rsquo;s important to set an expectation, with ourselves and with our clients, that the goals will be revisited at mutually-agreeable dates over the course of the project. This enables the all-important &ldquo;feed back&rdquo; part of the loop.</p>
<h2 id="prioritize-and-plan-mid-level-and-low-level-goals">Prioritize and plan mid-level and low-level goals</h2>
<p><img src="feedback-stepgoals.png" alt="The components of a peanut butter and jelly sandwich"></p>
<p>Few goals are achieved all in one step. Even the simple process of making a peanut butter and jelly sandwich (a favourite computer programming <a href="https://www.youtube.com/watch?v=y62zj9ozPOM&amp;t=1016s">teaching example</a>) can be broken down into successively smaller, more precise instructions. While we humans may not require the granularity that a computer program does, goals that are chunked into time-boxed, achievable steps are much more easily digested. 🥪</p>
<p>Start with the mid-level goals, and make each step concrete. If the goal is to release a new open source web app, for example, the steps might look like this:</p>
<ol>
<li>Complete app JavaScript</li>
<li>Create front end and stylesheet</li>
<li>Do local tests</li>
<li>Set up cloud server</li>
<li>Deploy app to cloud</li>
<li>Do tests</li>
<li>Add repository to GitHub</li>
<li>Post on Hacker News</li>
<li>Profit!!!</li>
</ol>
<p>Each of the above examples encapsulates many smaller, low-level goals - we can think of these as our to-do list items. For example, &ldquo;Set up cloud server&rdquo; might involve:</p>
<ol>
<li>Research cloud providers</li>
<li>Decide on service and sign up</li>
<li>Set up server/instance</li>
<li>Add integrations</li>
<li>Test deployment</li>
</ol>
<p>Our parameters for chunk sizes and what constitutes a &ldquo;step&rdquo; may be different from one another, and will likely change from project to project. If your mid-level and low-level steps clearly define a concrete path for achieving the top-level goals you set, then you&rsquo;re in good shape. Later on, evaluating the decision process that brought us to these mid-level and low-level goals enables us to bring our feedback loop full circle.</p>
<h2 id="automate-your-work">Automate your work</h2>
<p><img src="feedback-autorobot.png" alt="Peanut butter and jelly sandwich robot"></p>
<p>I recently read a great article entitled <a href="https://queue.acm.org/detail.cfm?id=3197520">Manual Work is a Bug</a>. It discusses a process by which successful developers document and eventually automate their work. The beauty of this idea is in its simplicity. By writing down the things we do manually, we&rsquo;re able to correct and refine our processes. By refining our processes, we can more easily translate them into code snippets and scripts. With a collection of scripts that we can string together, we can automate our work.</p>
<p>Automating work isn&rsquo;t only about saving time. It reduces haven&rsquo;t-had-my-coffee-yet errors, minimizes cognitive load allowing more room for creativity, and allows our processes to be repeatable across collaborators and projects. It help shorten our feedback loop by ensuring we aren&rsquo;t doing the same thing three times in three different ways.</p>
<p>We can begin to automate by starting our own personal wiki. If we build a habit of writing down every manual thing we do, no matter how basic it may seem at the time, we give ourselves more opportunities to spot patterns, and thus possible integrations and improvements.</p>
<p>The first time we do something manually, we write out the steps. The second time, we follow the steps. This gives us the opportunity to correct and refine them based on what we&rsquo;ve learned since the first time. Over successive iterations, we might replace parts of manual commands with variables; we might find handy snippets of bash scripts that automate just a part of our task. As long as we keep revising and improving our personal wiki, we&rsquo;re moving towards automation.</p>
<h2 id="block-out-time-for-code-review">Block out time for code review</h2>
<p><img src="cover_feedback-pbjreview.png" alt="Reviewing a peanut butter and jelly sandwich with a clipboard"></p>
<p>It&rsquo;s all too easy to commit messy code when we work alone. We think, <em>who&rsquo;s going to see it? I&rsquo;ll fix it later.</em> Each time that happens, though, we&rsquo;re building a habit. It&rsquo;s a bad one.</p>
<p>Working alone means there&rsquo;s no one likely to give feedback on our commits when we&rsquo;re doing something that doesn&rsquo;t make sense, or that could be improved. Instead, we have to actively seek out opportunities to improve. Open source communities are amazing for this. There&rsquo;s a wealth of information available to us in terms of coding styles, examples of refactored code, and a smorgasbord of snippets that achieve that-thing-we-were-trying-to-do but in fewer lines. We can learn all we please, if we just block out the time to do it.</p>
<p>Schedule your own code review at a time that makes sense for you and the project you&rsquo;re working on. This might be each time you finish a fix or feature, or at regular intervals daily or weekly. If you have someone who can help, book them. There are also a great many organizations that host chatrooms full of people happy to lend a hand: <a href="https://www.freecodecamp.org/">freeCodeCamp</a> and the <a href="https://github.com/OWASP/wstg">OWASP Web Security Testing Guide</a>, to name a couple.</p>
<p>Do some research on basic best practices for what you&rsquo;re working on. Set yourself a time limit though, and take what you read with a grain of salt. There&rsquo;s a lot of rabbit holes in that field. As a starting point, I&rsquo;d recommend learning about DRY code, and watching <a href="https://www.youtube.com/watch?v=p0O1VVqRSK0&amp;feature=youtu.be&amp;t=330">Uncle Bob demand professionalism in software development</a>.</p>
<h3 id="code-review-checklist">Code review checklist</h3>
<p>Here&rsquo;s my personal code review checklist, based off some general best practices. Feel free to use it as a starting point for your own!</p>
<blockquote>
<p><strong>Victoria&rsquo;s Code Review Extravaganza!</strong></p>
<ul>
<li><input disabled="" type="checkbox"> This solves a high-priority item.</li>
<li><input disabled="" type="checkbox"> This is a complete implementation that follows the specification.</li>
<li><input disabled="" type="checkbox"> Off-topic changes were not included and have been added to backlog.</li>
<li><input disabled="" type="checkbox"> Variable names are meaningful and there are no magic numbers.</li>
<li><input disabled="" type="checkbox"> Correct and useful error messages are returned at every opportunity.</li>
<li><input disabled="" type="checkbox"> No debugging print statements were left in.</li>
<li><input disabled="" type="checkbox"> This code is DRY and modular.</li>
<li><input disabled="" type="checkbox"> This code is secure. Private and public code are well separated.</li>
<li><input disabled="" type="checkbox"> This code is its own documentation, or the documentation is up to date.</li>
<li><input disabled="" type="checkbox"> A five-year-old could follow this, seriously it&rsquo;s that readable.</li>
<li><input disabled="" type="checkbox"> Unit tests successfully pass.</li>
<li><input disabled="" type="checkbox"> Master was merged into the branch and tested.</li>
<li><input disabled="" type="checkbox"> Formatting follows style guidelines.</li>
<li><input disabled="" type="checkbox"> I cannot find any further edge cases or known defects.</li>
<li><input disabled="" type="checkbox"> I would be happy if this code was publicly attributed to me.</li>
<li><input disabled="" type="checkbox"> I fully understand what the code does and the impact of the changes I made.</li>
<li><input disabled="" type="checkbox"> I actually verified that it actually does what I said it does.</li>
</ul></blockquote>
<p><a href="https://dev.to/gonedark/writing-clean-code">Here is an excellent example</a> of cleaning up code with some of the above points in mind.</p>
<h2 id="block-out-time-for-process-review">Block out time for process review</h2>
<p><img src="feedback-robotreview.png" alt="Reviewing sandwich making robot with clipboard"></p>
<p>Just as we learn from reviewing our code, we refine our processes by reviewing them as well. Process review is most beneficial when visited at regular intervals throughout the project, not just after the project&rsquo;s completion. For short-term projects, a good starting point for scheduling process reviews is at each half-mark - once midway through, and again after completion. Long-term projects may have reviews at each quarter-mark.</p>
<h3 id="process-review-questions">Process review questions</h3>
<p>Process review can be as simple as a short list of questions:</p>
<ol>
<li>What were my top-level goals for this period? Did I meet them?</li>
<li>What were my mid-level and low-level goals for this period? Did I meet them?</li>
<li>Would I have been better served with different or more specific goals? Why?</li>
<li>Did I successfully remove or automate obstacles?</li>
<li>Did I stick to my code review schedule? Why or why not?</li>
<li>How might I remove obstacles next time?</li>
</ol>
<p>Setting aside dedicated time for our process review can help us to answer questions like these thoughtfully and honestly. This allows us to squeeze out every bit of learning we can from our review, helping to shorten our feedback loop.</p>
<h2 id="update-your-goals-and-processes-with-the-results-of-your-reviews">Update your goals and processes with the results of your reviews</h2>
<p><img src="feedback-updategoals.png" alt="Adding additional arms to robot while envisioning a multi-layer PB&amp;J"></p>
<p>All the performance data in the world is no good to us if we don&rsquo;t put it into practice. With each successive code review, we can refine and add to our checklist. With what we learn from each process review, we can fine tune and improve our processes. The more we can invent concrete and observable ways to implement our learning, the more success we&rsquo;ll have.</p>
<p>Making a conscious effort to utilize and practice the things we&rsquo;ve learned is the final, vital, component of our feedback loop. The more often we incorporate new learning, the shorter our loop becomes, allowing us to improve that much faster.</p>
]]></content></entry><entry><title type="html">How to code a satellite algorithm and cook paella from scratch</title><link href="https://victoria.dev/archive/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/"/><id>https://victoria.dev/archive/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/</id><author><name>Victoria Drake</name></author><published>2017-09-08T16:50:24-04:00</published><updated>2017-09-08T16:50:24-04:00</updated><content type="html"><![CDATA[<p>What if I told you that by the end of this article, you&rsquo;ll be able to calculate the orbital period of satellites around Earth using their average altitudes and&hellip; You tuned out already, didn&rsquo;t you?</p>
<p>Okay, how about this: I&rsquo;m going to teach you how to make paella!</p>
<p><em>And</em> you&rsquo;ll have written a function that does <em>the stuff I mentioned above</em>, just like I did for a freeCodeCamp challenge.</p>
<p>I promise there&rsquo;s an overarching moral lesson that will benefit you every day for the rest of your life. Or at least, feed you for one night. Let&rsquo;s get started.</p>
<h2 id="the-only-thing-i-know-about-paella-is-that-its-an-emoticon">The only thing I know about paella is that it&rsquo;s an emoticon</h2>
<figure><img src="/archive/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/solve-unicode-paella.jpg"
    alt="Unicode paella emoji."><figcaption>
      <p>Unless you&rsquo;re reading this on a Samsung phone, in which case you&rsquo;re looking at a Korean hotpot.</p>
    </figcaption>
</figure>

<p>One of my favorite things about living in the world today is that it&rsquo;s <em>totally fine</em> to know next-to-nothing about something. A hundred years ago you might have gone your whole life not knowing anything more about paella other than that it&rsquo;s an emoticon.* But today? You can simply <a href="https://en.wikipedia.org/wiki/Paella">look it up</a>.</p>
<p>*That was a joke.</p>
<p>As with all things in life, when we are unsure, we turn to the internet - in this case, the entry for <em>paella</em> on Wikipedia, which reads:</p>
<blockquote>
<p>Paella &hellip;is a Valencian rice dish. Paella has ancient roots, but its modern form originated in the mid-19th century near the Albufera lagoon on the east coast of Spain adjacent to the city of Valencia. Many non-Spaniards view paella as Spain&rsquo;s national dish, but most Spaniards consider it to be a regional Valencian dish. Valencians, in turn, regard paella as one of their identifying symbols.</p></blockquote>
<p>At this point, you&rsquo;re probably full of questions. Do I need to talk to a Valencian? Should I take an online course on the history of Spain? What type of paella should I try to make? What is the common opinion of modern chefs when it comes to paella types?</p>
<p>If you set out with the intention of answering all these questions, one thing is certain: you&rsquo;ll never end up actually making paella. You&rsquo;ll spend hours upon hours typing questions into search engines and years later wake up with a Masters in Valencian Cuisine.</p>
<h2 id="the-most-important-question-method">The &ldquo;Most Important Question&rdquo; method</h2>
<p>When I talk to myself out loud in public (doesn&rsquo;t everyone?) I refer to this as &ldquo;MIQ&rdquo; (rhymes with &ldquo;Nick&rdquo;). I also imagine MIQ to be a rather crunchy and quite adorable anthropomorphized tortilla chip. Couldn&rsquo;t tell you why.</p>
<p><img src="solve-miq.png#center" alt="MIQ the chip."></p>
<p>MIQ swings his crunchy triangular body around to point me in the right direction, and the right direction always takes the form of the most important question that you need to ask yourself at any stage of problem solving. The first most important question is always this:</p>
<p><strong>What is the scope of the objective I want to achieve?</strong></p>
<p>Well, you want to make paella.</p>
<p>The next MIQ then becomes: how much do I actually need to know about paella in order to start making it?</p>
<p>You&rsquo;ve heard this advice before: any big problem can be broken down into multiple, but more manageable, bite-size problems. In this little constellation of bite-size problems, there&rsquo;s only <em>one</em> that you need to solve in order to get <em>most of the way</em> to a complete solution.</p>
<p>In the case of making paella, we need a recipe. That&rsquo;s a bite-size problem that a search engine can solve for us:</p>
<blockquote>
<p><strong>Simple Paella Recipe</strong></p>
<ol>
<li>In a medium bowl, mix together 2 tablespoons olive oil, paprika, oregano, and salt and pepper. Stir in chicken pieces to coat. Cover, and refrigerate.</li>
<li>Heat 2 tablespoons olive oil in a large skillet or paella pan over medium heat. Stir in garlic, red pepper flakes, and rice. Cook, stirring, to coat rice with oil, about 3 minutes. Stir in saffron threads, bay leaf, parsley, chicken stock, and lemon zest. Bring to a boil, cover, and reduce heat to medium low. Simmer 20 minutes.</li>
<li>Meanwhile, heat 2 tablespoons olive oil in a separate skillet over medium heat. Stir in marinated chicken and onion; cook 5 minutes. Stir in bell pepper and sausage; cook 5 minutes. Stir in shrimp; cook, turning the shrimp, until both sides are pink.</li>
<li>Spread rice mixture onto a serving tray. Top with meat and seafood mixture. (<a href="https://www.allrecipes.com/recipe/84137/easy-paella/">allrecipes.com</a>)</li>
</ol></blockquote>
<p>And <em>voila</em>! Believe it or not, we&rsquo;re <em>most of the way</em> there already.</p>
<p>Having a set of step-by-step instructions that are easy to understand is really most of the work done. All that&rsquo;s left is to go through the motions of gathering the ingredients and then making paella. From this point on, your MIQs may become fewer and far between, and they may slowly decrease in importance in relation to the overall problem. (Where do I buy paprika? How do I know when sausage is cooked? How do I set the timer on my phone for 20 minutes? How do I stop thinking about this delicious smell? Which Instagram filter best captures the ecstasy of this paella right now?)</p>
<figure><img src="/archive/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/solve-insta-paella.jpg"
    alt="The answer to that last one is Nashville"><figcaption>
      <p>The answer to that last one is Nashville</p>
    </figcaption>
</figure>

<h2 id="i-still-know-nothing-about-calculating-the-orbital-periods-of-satellites">I still know nothing about calculating the orbital periods of satellites</h2>
<p>Okay. Let&rsquo;s examine the problem:</p>
<blockquote>
<p>Return a new array that transforms the element&rsquo;s average altitude into their orbital periods.</p>
<p>The array will contain objects in the format {name: &rsquo;name&rsquo;, avgAlt: avgAlt}.</p>
<p>You can read about orbital periods on wikipedia.</p>
<p>The values should be rounded to the nearest whole number. The body being orbited is Earth.</p>
<p>The radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km3s-2.</p>
<p><code>orbitalPeriod([{name : &quot;sputnik&quot;, avgAlt : 35873.5553}])</code> should return <code>[{name: &quot;sputnik&quot;, orbitalPeriod: 86400}].</code></p></blockquote>
<p>Well, as it turns out, in order to calculate the orbital period of satellites, we also need a recipe. Amazing, the things you can find on the internet these days.</p>
<p>Courtesy of <a href="http://www.dummies.com/education/science/physics/how-to-calculate-the-period-and-orbiting-radius-of-a-geosynchronous-satellite/">dummies.com</a> (yup! #noshame), here&rsquo;s our recipe:</p>
<figure><img src="/archive/how-to-code-a-satellite-algorithm-and-cook-paella-from-scratch/solve-orbital-period.png"
    alt="Orbital period formula"><figcaption>
      <p>It&rsquo;s kind of cute, in a way.</p>
    </figcaption>
</figure>

<p>That might look pretty complicated, but as we&rsquo;ve already seen, we just need to answer the next MIQ: how much do I actually need to know about this formula in order to start using it?</p>
<p>In the case of this challenge, not too much. We&rsquo;re already given <code>earthRadius</code>, and <code>avgAlt</code> is part of our arguments object. Together, they form the radius, <em>r</em>. With a couple search queries and some mental time-travel to your elementary math class, we can describe this formula in a smattering of English:</p>
<p><strong><em>T</em>, the orbital period, equals 2 multiplied by Pi, in turn multiplied by the square root of the radius, <em>r</em> cubed, divided by the gravitational mass, <em>GM</em>.</strong></p>
<p>JavaScript has a <code>Math.PI</code> property, as well as <code>Math.sqrt()</code> function and <code>Math.pow()</code> function. Using those combined with simple calculation, we can represent this equation in a single line assigned to a variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">orbitalPeriod</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> Math.<span style="color:#a6e22e">PI</span> <span style="color:#f92672">*</span> (Math.<span style="color:#a6e22e">sqrt</span>(Math.<span style="color:#a6e22e">pow</span>((<span style="color:#a6e22e">earthRadius</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">avgAlt</span>), <span style="color:#ae81ff">3</span>) <span style="color:#f92672">/</span> <span style="color:#a6e22e">GM</span>));
</span></span></code></pre></div><p>From the inside out:</p>
<ol>
<li>Add <code>earthRadius</code> and <code>avgAlt</code></li>
<li>Cube the result of step 1</li>
<li>Divide the result of step 2 by GM</li>
<li>Take the square root of the result of step 3</li>
<li>Multiply 2 times Pi times the result of step 4</li>
<li>Assign the returned value to <code>orbitalPeriod</code></li>
</ol>
<p>Believe it or not, we&rsquo;re already most of the way there.</p>
<p>The next MIQ for this challenge is to take the arguments object, extract the information we need, and return the result of our equation in the required format. There are a multitude of ways to do this, but I&rsquo;m happy with a straightforward <code>for</code> loop:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">orbitalPeriod</span>(<span style="color:#a6e22e">arr</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">resultArr</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">teapot</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">teapot</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">arguments</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">teapot</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">GM</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">398600.4418</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">earthRadius</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">6367.4447</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">avgAlt</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">arguments</span>[<span style="color:#ae81ff">0</span>][<span style="color:#a6e22e">teapot</span>][<span style="color:#e6db74">&#39;avgAlt&#39;</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">arguments</span>[<span style="color:#ae81ff">0</span>][<span style="color:#a6e22e">teapot</span>][<span style="color:#e6db74">&#39;name&#39;</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">orbitalPeriod</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> Math.<span style="color:#a6e22e">PI</span> <span style="color:#f92672">*</span> (Math.<span style="color:#a6e22e">sqrt</span>(Math.<span style="color:#a6e22e">pow</span>((<span style="color:#a6e22e">earthRadius</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">avgAlt</span>), <span style="color:#ae81ff">3</span>) <span style="color:#f92672">/</span> <span style="color:#a6e22e">GM</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">name</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">orbitalPeriod</span><span style="color:#f92672">:</span> Math.<span style="color:#a6e22e">round</span>(<span style="color:#a6e22e">orbitalPeriod</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">resultArr</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">result</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">resultArr</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If you need a refresher on iterating through arrays, have a look at my <a href="/blog/iterating-over-objects-and-arrays-frequent-errors/">article on iterating, featuring breakfast arrays</a>! (5 minutes read)</p>
<p>Don&rsquo;t look now, but you just gained the ability to calculate the orbital period of satellites. You could even do it <em>while</em> making paella, if you wanted to. Seriously. Put it on your resume.</p>
<h2 id="tldr-the-overarching-moral-lesson">Tl;dr: the overarching moral lesson</h2>
<p>Whether it&rsquo;s cooking, coding, or anything else, problems may at first seem confusing, insurmountable, or downright boring. If you&rsquo;re faced with such a challenge, just remember: they&rsquo;re a lot more digestible with a side of bite-sized MIQ chips.</p>
<p><img src="solve-miq-bowl.png#center" alt="Bowl of MIQs."></p>
]]></content></entry><entry><title type="html">Making sandwiches with closures in JavaScript</title><link href="https://victoria.dev/archive/making-sandwiches-with-closures-in-javascript/"/><id>https://victoria.dev/archive/making-sandwiches-with-closures-in-javascript/</id><author><name>Victoria Drake</name></author><published>2017-05-28T09:16:35+07:00</published><updated>2017-05-28T09:16:35+07:00</updated><content type="html"><![CDATA[<p>Say you&rsquo;re having a little coding get-together, and you need some sandwiches. You happen to know that everyone prefers a different type of sandwich, like chicken, ham, or peanut butter and mayo. You could make all these sandwiches yourself, but that would be tedious and boring.</p>
<p>Luckily, you know of a nearby sandwich shop that delivers. They have the ability and ingredients to make any kind of sandwich in the world, and all you have to do is order through their app.</p>
<p>The sandwich shop looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">makeMeASandwich</span>(<span style="color:#a6e22e">x</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ingredients</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39; &#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">barry</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ingredients</span>.<span style="color:#a6e22e">concat</span>(<span style="color:#e6db74">&#39; sandwich&#39;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Notice that we have an outer function, <code>makeMeASandwich()</code> that takes an argument, <code>x</code>. This outer function has the local variable <code>ingredients</code>, which is just <code>x</code> mushed together.</p>
<p>Barry? Who&rsquo;s Barry? He&rsquo;s the guy who works at the sandwich shop. You&rsquo;ll never talk with Barry directly, but he&rsquo;s the reason your sandwiches are made, and why they&rsquo;re so delicious. Barry takes <code>ingredients</code> and mushes them together with &quot; sandwich&quot;.</p>
<p>The reason Barry is able to access the <code>ingredients</code> is because they&rsquo;re in his outer scope. If you were to take Barry out of the sandwich shop, he&rsquo;d no longer be able to access them. This is an example of <em>lexical scoping</em>: &ldquo;Nested functions have access to variables declared in their outer scope.&rdquo; (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Lexical_scoping">MDN</a>)</p>
<p>Barry, happily at work in the sandwich shop, is an example of a closure.</p>
<blockquote>
<p><strong>Closures</strong> are functions that refer to independent (free) variables (variables that are used locally, but defined in an enclosing scope). In other words, these functions &lsquo;remember&rsquo; the environment in which they were created. (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">MDN</a>)</p></blockquote>
<p>When you order, the app submits your sandwich request like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pbm</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">makeMeASandwich</span>([<span style="color:#e6db74">&#39;peanut butter&#39;</span>, <span style="color:#e6db74">&#39;mayo&#39;</span>]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pbm</span>();
</span></span></code></pre></div><p>And in thirty-minutes-or-it&rsquo;s-free, you get: <code>peanut butter mayo sandwich</code>.</p>
<p>The nice thing about the sandwich shop app is that it remembers the sandwiches you&rsquo;ve ordered before. Your peanut butter and mayo sandwich is now available to you as <code>pbm()</code> for you to order anytime. It&rsquo;s pretty convenient since, each time you order, there&rsquo;s no need to specify that the sandwich you want is the same one you got before with peanut butter and mayo and it&rsquo;s a sandwich. Using <code>pbm()</code> is much more concise.</p>
<p>Let&rsquo;s order the sandwiches you need for the party:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pmrp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">makeMeASandwich</span>([<span style="color:#e6db74">&#39;prosciutto&#39;</span>, <span style="color:#e6db74">&#39;mozzarella&#39;</span>, <span style="color:#e6db74">&#39;red pepper&#39;</span>]);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pbt</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">makeMeASandwich</span>([<span style="color:#e6db74">&#39;peanut butter&#39;</span>, <span style="color:#e6db74">&#39;tuna&#39;</span>]);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">hm</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">makeMeASandwich</span>([<span style="color:#e6db74">&#39;ham&#39;</span>]);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pbm</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">makeMeASandwich</span>([<span style="color:#e6db74">&#39;peanut butter&#39;</span>, <span style="color:#e6db74">&#39;mayo&#39;</span>]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pmrp</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pbt</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">hm</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pbm</span>();
</span></span></code></pre></div><p>Your order confirmation reads:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>prosciutto mozzarella red pepper sandwich
</span></span><span style="display:flex;"><span>peanut butter tuna sandwich
</span></span><span style="display:flex;"><span>ham sandwich
</span></span><span style="display:flex;"><span>peanut butter mayo sandwich
</span></span></code></pre></div><p>Plot twist! The guy who wanted a ham sandwich now wants a ham <em>and cheese</em> sandwich. Luckily, the sandwich shop just released a new version of their app that will let you add cheese to any sandwich.</p>
<p>With this added feature, the sandwich shop now looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">makeMeASandwich</span>(<span style="color:#a6e22e">x</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ingredients</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39; &#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">slices</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">barry</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ingredients</span>.<span style="color:#a6e22e">concat</span>(<span style="color:#e6db74">&#39; sandwich&#39;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">barryAddCheese</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">slices</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ingredients</span>.<span style="color:#a6e22e">concat</span>(<span style="color:#e6db74">&#39; sandwich with &#39;</span>, <span style="color:#a6e22e">slices</span>, <span style="color:#e6db74">&#39; slices of cheese&#39;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">noCheese</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">barry</span>();
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">addCheese</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">barryAddCheese</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You amend the order to look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">pmrp</span>.<span style="color:#a6e22e">noCheese</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pbt</span>.<span style="color:#a6e22e">noCheese</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">hm</span>.<span style="color:#a6e22e">addCheese</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pbm</span>.<span style="color:#a6e22e">noCheese</span>();
</span></span></code></pre></div><p>And your order confirmation reads:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>prosciutto mozzarella red pepper sandwich
</span></span><span style="display:flex;"><span>peanut butter tuna sandwich
</span></span><span style="display:flex;"><span>ham sandwich with <span style="color:#ae81ff">2</span> slices of cheese
</span></span><span style="display:flex;"><span>peanut butter mayo sandwich
</span></span></code></pre></div><p>You&rsquo;ll notice that when you order a sandwich with cheese, Barry puts 2 slices of cheese on it. In this way, the sandwich shop controls how much cheese you get. You can&rsquo;t get to Barry to tell him you want more than 2 slices at a time. That&rsquo;s because your only access to the sandwich shop is through the public functions <code>noCheese</code> or <code>addCheese</code>.</p>
<p>Of course, there&rsquo;s a way to cheat the system&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">hm</span>.<span style="color:#a6e22e">addCheese</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">hm</span>.<span style="color:#a6e22e">addCheese</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">hm</span>.<span style="color:#a6e22e">addCheese</span>();
</span></span></code></pre></div><p>By ordering the same ham sandwich with cheese three times, you get: <code>ham sandwich with 6 slices of cheese</code>.</p>
<p>This happens because the sandwich shop app recognizes the variable <code>hm</code> as the same sandwich each time, and increases the number of cheese slices it tells Barry to add.</p>
<p>The app could prevent you from adding lots of cheese to the same sandwich, either by adding a maximum or by appending unique order numbers to the variable names&hellip; but this is our fantasy sandwich shop, and we get to pile on as much cheese as we want.</p>
<p><img src="closures-cheesestack.jpg#center" alt="All the cheese."></p>
<p>By using closures, we can have JavaScript emulate private methods found in languages like Ruby and Java. Closures are a useful way to extend the functionality of JavaScript, and also order sandwiches.</p>
]]></content></entry><entry><title type="html">Understanding Array.prototype.reduce() and recursion using apple pie</title><link href="https://victoria.dev/archive/understanding-array.prototype.reduce-and-recursion-using-apple-pie/"/><id>https://victoria.dev/archive/understanding-array.prototype.reduce-and-recursion-using-apple-pie/</id><author><name>Victoria Drake</name></author><published>2017-05-18T11:40:06+07:00</published><updated>2017-05-18T11:40:06+07:00</updated><content type="html"><![CDATA[<p>I was having trouble understanding <code>reduce()</code> and recursion in JavaScript, so I wrote this article to explain it to myself (hey, look, recursion!). I hope you find my examples both helpful and delicious.</p>
<p>Given an array with nested arrays:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, [<span style="color:#ae81ff">2</span>], [<span style="color:#ae81ff">3</span>, [[<span style="color:#ae81ff">4</span>]]]]
</span></span></code></pre></div><p>We want to produce this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">flat</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
</span></span></code></pre></div><h2 id="using-for-loops-and-if-statements">Using for loops and if statements</h2>
<p>Naively, if we know the maximum number of nested arrays we&rsquo;ll encounter (there are 4 in this example), we can use <code>for</code> loops to iterate through each array item, then <code>if</code> statements to check if each item is in itself an array, and so on&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">flatten</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">flat</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (Array.<span style="color:#a6e22e">isArray</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>])) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ii</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">ii</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">ii</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (Array.<span style="color:#a6e22e">isArray</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">ii</span>])) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">iii</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">iii</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">ii</span>].<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">iii</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">iiii</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">iiii</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">ii</span>][<span style="color:#a6e22e">iii</span>].<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">iiii</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (Array.<span style="color:#a6e22e">isArray</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">ii</span>][<span style="color:#a6e22e">iii</span>])) {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">flat</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">ii</span>][<span style="color:#a6e22e">iii</span>][<span style="color:#a6e22e">iiii</span>]);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">flat</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">ii</span>][<span style="color:#a6e22e">iii</span>]);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">flat</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>][<span style="color:#a6e22e">ii</span>]);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">flat</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// [1, 2, 3, 4]
</span></span></span></code></pre></div><p>&hellip;Which works, but of course looks ridiculous. Besides looking ridiculous, a) it only works if we know how many nested arrays we&rsquo;ll process, b) it&rsquo;s hard to read and harder to understand, and c) can you imagine having to debug this mess?! (Gee, I think there&rsquo;s an extra <code>i</code> somewhere.)</p>
<h2 id="using-reduce">Using reduce</h2>
<p>JavaScript has a couple methods we can use to make our code a little less ridiculous. One of these is <code>reduce()</code> and it looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">flat</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">reduce</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">done</span>,<span style="color:#a6e22e">curr</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">done</span>.<span style="color:#a6e22e">concat</span>(<span style="color:#a6e22e">curr</span>);
</span></span><span style="display:flex;"><span>}, []);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// [ 1, 2, 3, [ [ 4 ] ] ]
</span></span></span></code></pre></div><p>It&rsquo;s a lot less code, but we haven&rsquo;t taken care of some of the nested arrays. Let&rsquo;s first walk through <code>reduce()</code> together and examine what it does to see how we&rsquo;ll correct this.</p>
<blockquote>
<p><strong>Array.prototype.reduce()</strong>
The reduce() method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value. (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=example">MDN</a>)</p></blockquote>
<p>It&rsquo;s not quite as complicated as it seems. Let&rsquo;s think of <code>reduce()</code> as an out-of-work developer (AI took all the dev jobs) with an empty basket. We&rsquo;ll call him Adam. Adam&rsquo;s main function (ba-dum ching) is now to take apples from a pile, shine them up, and put them one-by-one into the basket. This basket of shiny apples is destined to become delicious apple pies. It&rsquo;s a very important job.</p>
<figure><img src="/archive/understanding-array.prototype.reduce-and-recursion-using-apple-pie/recursion-apple-formula.jpg"
    alt="Pile of apples &#43; Adam: apple pie"><figcaption>
      <p>Apples plus human effort equals pie. Not to be confused with apple-human-pie, which is less appetizing.</p>
    </figcaption>
</figure>

<p>In our above example, the pile of apples is our array, <code>arr</code>. Our basket is <code>done</code>, the accumulator. The initial value of <code>done</code> is an empty array, which we see as <code>[]</code> at the end of our reduce function. The apple that our out-of-work dev is currently shining, you guessed it, is <code>curr</code>. Once Adam processes the current apple, he places it into the basket (<code>.concat()</code>). When there are no more apples in the pile, he returns the basket of polished apples to us, and then probably goes home to his cat, or something.</p>
<h2 id="using-reduce-recursively-to-address-nested-arrays">Using reduce recursively to address nested arrays</h2>
<p>So that&rsquo;s all well and good, and now we have a basket of polished apples. But we still have some nested arrays to deal with. Going back to our analogy, let&rsquo;s say that some of the apples in the pile are in boxes. Within each box there could be more apples, and/or more boxes containing smaller, cuter apples.</p>
<figure><img src="/archive/understanding-array.prototype.reduce-and-recursion-using-apple-pie/recursion-nested-apples.jpg"
    alt="Box within a box within a box with apples"><figcaption>
      <p>Adorable, slightly skewed apples just want to be loved/eaten.</p>
    </figcaption>
</figure>

<p>Here&rsquo;s what we want our apple-processing-function/Adam to do:</p>
<ol>
<li>If the pile of apples is a pile of apples, take an apple from the pile.</li>
<li>If the apple is an apple, polish it, put it in the basket.</li>
<li>If the apple is a box, open the box. If the box contains an apple, go to step 2.</li>
<li>If the box contains another box, open this box, and go to step 3.</li>
<li>When the pile is no more, give us the basket of shiny apples.</li>
<li>If the pile of apples is not a pile of apples, give back whatever it is.</li>
</ol>
<p>A recursive reduce function that accomplishes this is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">flatten</span>(<span style="color:#a6e22e">arr</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (Array.<span style="color:#a6e22e">isArray</span>(<span style="color:#a6e22e">arr</span>)) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">reduce</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">done</span>,<span style="color:#a6e22e">curr</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">done</span>.<span style="color:#a6e22e">concat</span>(<span style="color:#a6e22e">flatten</span>(<span style="color:#a6e22e">curr</span>));
</span></span><span style="display:flex;"><span>    }, []);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arr</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// [ 1, 2, 3, 4 ]
</span></span></span></code></pre></div><p>Bear with me and I&rsquo;ll explain.</p>
<blockquote>
<p>An act of a function calling itself. Recursion is used to solve problems that contain smaller sub-problems. A recursive function can receive two inputs: a base case (ends recursion) or a recursive case (continues recursion). (<a href="https://developer.mozilla.org/en-US/docs/Glossary/Recursion">MDN</a>)</p></blockquote>
<p>If you examine our code above, you&rsquo;ll see that <code>flatten()</code> appears twice. The first time it appears, it tells Adam what to do with the pile of apples. The second time, it tells him what to do with the thing he&rsquo;s currently holding, providing instructions in the case it&rsquo;s an apple, and in the case it&rsquo;s not an apple. The thing to note is that these instructions are a <em>repeat of the original instructions we started with</em> - and that&rsquo;s recursion.</p>
<p>We&rsquo;ll break it down line-by-line for clarity:</p>
<ol>
<li><code>function flatten(arr) {</code> - we name our overall function and specify that it will take an argument, <code>arr</code>.</li>
<li>`if (Array.isArray(arr)) {we examine the provided &ldquo;arrgument&rdquo; (I know, I&rsquo;m very funny) to determine if it is an array.</li>
<li>`return arr.reduce(function(done,curr){if the previous line is true and the argument is an array, we want to reduce it. This is our recursive case. We&rsquo;ll apply the following function to each array item&hellip;</li>
<li>`return done.concat(flatten(curr));nexpected plot twist appears! The function we want to apply is the very function we&rsquo;re in. Colloquially: take it from the top.</li>
<li><code>}, []);ell our reduce function to start with an empty accumulator (</code>done`), and wrap it up.</li>
<li>`} else {this resolves our if statement at line 2. If the provided argument isn&rsquo;t an array&hellip;</li>
<li><code>return arr;rn whatever the</code>arr` is. (Hopefully a cute apple.) This is our base case that breaks us out of recursion.</li>
<li>`}end the else statement.</li>
<li><code>}</code> - end the overall function.</li>
</ol>
<p>And we&rsquo;re done! We&rsquo;ve gone from our 24 line, 4-layers-deep nested <code>for</code> loop solution to a much more concise, 9 line recursive reduce solution. Reduce and recursion can seem a little impenetrable at first, but they&rsquo;re valuable tools that will save you lots of future effort once you grasp them.</p>
<p>And don&rsquo;t worry about Adam, our out-of-work developer. He got so much press after being featured in this article that he opened up his very own AI-managed apple pie factory. He&rsquo;s very happy.</p>
<figure><img src="/archive/understanding-array.prototype.reduce-and-recursion-using-apple-pie/recursion-adams-apples.jpg"
    alt="Adam&#39;s apple pie factory, Adam&#39;s Apples"><figcaption>
      <p>+1 for you if you saw that one coming.</p>
    </figcaption>
</figure>

]]></content></entry><entry><title type="html">Iterating over objects and arrays: frequent errors</title><link href="https://victoria.dev/archive/iterating-over-objects-and-arrays-frequent-errors/"/><id>https://victoria.dev/archive/iterating-over-objects-and-arrays-frequent-errors/</id><author><name>Victoria Drake</name></author><published>2017-05-16T10:46:46+07:00</published><updated>2017-05-16T10:46:46+07:00</updated><content type="html"><![CDATA[<p>Here&rsquo;s <del>some complaining</del> a quick overview of some code that has confounded me more than once. I&rsquo;m told even very experienced developers encounter these situations regularly, so if you find yourself on your third cup of coffee scratching your head over why your code is doing exactly what you told it to do (and not what you <em>want</em> it to do), maybe this post can help you.</p>
<p>The example code is JavaScript, since that&rsquo;s what I&rsquo;ve been working in lately, but I believe the concepts to be pretty universal.</p>
<h2 id="quick-reference-for-equivalent-statements">Quick reference for equivalent statements</h2>
<table>
  <thead>
      <tr>
          <th>This&hellip;</th>
          <th>&hellip;is the same as this</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>i++;</code></td>
          <td><code>i = i + 1;</code></td>
      </tr>
      <tr>
          <td><code>i--;</code></td>
          <td><code>i = i - 1;</code></td>
      </tr>
      <tr>
          <td><code>apples += 5</code></td>
          <td><code>apples = apples + 5;</code></td>
      </tr>
      <tr>
          <td><code>apples -= 5</code></td>
          <td><code>apples = apples - 5;</code></td>
      </tr>
      <tr>
          <td><code>apples *= 5</code></td>
          <td><code>apples = apples * 5;</code></td>
      </tr>
      <tr>
          <td><code>apples /= 5</code></td>
          <td><code>apples = apples / 5;</code></td>
      </tr>
  </tbody>
</table>
<h2 id="quick-reference-for-logical-statements">Quick reference for logical statements</h2>
<table>
  <thead>
      <tr>
          <th>This&hellip;</th>
          <th>&hellip;gives this</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>3 == '3'</code></td>
          <td><code>true</code> (type converted)</td>
      </tr>
      <tr>
          <td><code>3 === '3'</code></td>
          <td><code>false</code> (type matters; integer is not a string)</td>
      </tr>
      <tr>
          <td><code>3 != '3'</code></td>
          <td><code>false</code> (type converted, 3: 3)</td>
      </tr>
      <tr>
          <td><code>3 !== '3'</code></td>
          <td><code>true</code> (type matters; integer is not a string)</td>
      </tr>
      <tr>
          <td>||</td>
          <td>logical &ldquo;or&rdquo;: either side evaluated</td>
      </tr>
      <tr>
          <td><code>&amp;&amp;</code></td>
          <td>logical &ldquo;and&rdquo;: both sides evaluated</td>
      </tr>
  </tbody>
</table>
<h2 id="objects">Objects</h2>
<p>Given a breakfast object that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">breakfast</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;eggs&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;waffles&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;fruit&#39;</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;blueberries&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;strawberries&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;coffee&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Or like this:</p>
<p><img src="cover.png#center" alt="Breakfast object."></p>
<h3 id="iterate-over-object-properties">Iterate over object properties</h3>
<p>We can iterate through each breakfast item using a for loop as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">item</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">breakfast</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;item: &#39;</span>, <span style="color:#a6e22e">item</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This produces:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>item: eggs
</span></span><span style="display:flex;"><span>item: waffles
</span></span><span style="display:flex;"><span>item: fruit
</span></span><span style="display:flex;"><span>item: coffee
</span></span></code></pre></div><h3 id="get-object-property-value">Get object property value</h3>
<p>We can access the value of the property or nested properties (in this example, the number of items) like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;How many waffles? &#39;</span>, <span style="color:#a6e22e">breakfast</span>[<span style="color:#e6db74">&#39;waffles&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;How many strawberries? &#39;</span>, <span style="color:#a6e22e">breakfast</span>[<span style="color:#e6db74">&#39;fruit&#39;</span>][<span style="color:#e6db74">&#39;strawberries&#39;</span>])
</span></span></code></pre></div><p>Or equivalent syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;How many waffles? &#39;</span>, <span style="color:#a6e22e">breakfast</span>.<span style="color:#a6e22e">waffles</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;How many strawberries? &#39;</span>, <span style="color:#a6e22e">breakfast</span>.<span style="color:#a6e22e">fruit</span>.<span style="color:#a6e22e">strawberries</span>)
</span></span></code></pre></div><p>This produces:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>How many waffles?  <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>How many strawberries?  <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><h3 id="get-object-property-from-the-value">Get object property from the value</h3>
<p>If instead I want to access the property via the value, for example, to find out which items are served in twos, I can do so by iterating like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">item</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">breakfast</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">breakfast</span>[<span style="color:#a6e22e">item</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Two of: &#39;</span>, <span style="color:#a6e22e">item</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Which gives us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>Two of:  eggs
</span></span><span style="display:flex;"><span>Two of:  waffles
</span></span></code></pre></div><h3 id="alter-nested-property-values">Alter nested property values</h3>
<p>Say I want to increase the number of fruits in breakfast, because sugar is bad for me and I like things that are bad for me. I can do that like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fruits</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">breakfast</span>[<span style="color:#e6db74">&#39;fruit&#39;</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">f</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">fruits</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fruits</span>[<span style="color:#a6e22e">f</span>] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">fruits</span>);
</span></span></code></pre></div><p>Which gives us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">{</span> blueberries: 6, strawberries: <span style="color:#ae81ff">2</span> <span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="arrays">Arrays</h2>
<p>Given an array of waffles that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wafflesIAte</span> <span style="color:#f92672">=</span> [ <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">11</span> ];
</span></span></code></pre></div><p>Or like this:</p>
<p><img src="iteration-waffles.png" alt="Waffle array."></p>
<h3 id="iterate-through-array-items">Iterate through array items</h3>
<p>We can iterate through each item in the array using a for loop:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">wafflesIAte</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;array index: &#39;</span>, <span style="color:#a6e22e">i</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;item from array: &#39;</span>, <span style="color:#a6e22e">wafflesIAte</span>[<span style="color:#a6e22e">i</span>]);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This produces:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">11</span>
</span></span></code></pre></div><p>Some things to remember:
<code>i</code> in the above context is a placeholder; we could substitute anything we like (<code>x</code>, <code>n</code>, <code>underpants</code>, etc). It simply denotes each instance of the iteration.</p>
<p><code>i &lt; wafflesIAte.length</code> tells our for loop to continue as long as <code>i</code> is less than the array&rsquo;s length (in this case, 7).</p>
<p><code>i++</code> is equivalent to <code>i+1</code> and means we&rsquo;re incrementing through our array by one each time. We could also use <code>i+2</code> to proceed with every other item in the array, for example.</p>
<h3 id="access-array-item-by-index">Access array item by index</h3>
<p>We can specify an item in the array using the array index, written as <code>wafflesIAte[i]</code> where <code>i</code> is any index of the array. This gives the item at that location.</p>
<p>Array index always starts with <code>0</code>, which is accessed with <code>wafflesIAte[0]</code>. Using <code>wafflesIAte[1]</code> gives us the second item in the array, which is &ldquo;3&rdquo;.</p>
<h3 id="ways-to-get-mixed-up-over-arrays">Ways to get mixed up over arrays</h3>
<p>Remember that <code>wafflesIAte.length</code> and the index of the last item in the array are different. The former is 7, the latter is <code>6</code>.</p>
<p>When incrementing <code>i</code>, remember that <code>[i+1]</code> and <code>[i]+1</code> are different:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;[i+1] gives next array index: &#39;</span>, <span style="color:#a6e22e">wafflesIAte</span>[<span style="color:#ae81ff">0</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;[i]+1 gives index value + 1: &#39;</span>, <span style="color:#a6e22e">wafflesIAte</span>[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
</span></span></code></pre></div><p>Produces:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>i+1<span style="color:#f92672">]</span> gives next array index:  <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>+1 gives index value + 1:  <span style="color:#ae81ff">2</span>
</span></span></code></pre></div><h2 id="practice-makes-better">Practice makes&hellip; better</h2>
<p>The more often you code and correct your errors, the better you&rsquo;ll remember it next time!</p>
<p>That&rsquo;s all for now. If you have a correction, best practice, or another common error for me to add, please let me know!</p>
]]></content></entry><entry><title type="html">Iteration in Python: for, list, and map</title><link href="https://victoria.dev/archive/iteration-in-python-for-list-and-map/"/><id>https://victoria.dev/archive/iteration-in-python-for-list-and-map/</id><author><name>Victoria Drake</name></author><published>2017-01-18T21:58:28+07:00</published><updated>2020-11-22T21:58:28+07:00</updated><content type="html"><![CDATA[<p>Iteration in Python can be a little hard to understand. Subtle differences in terminology like <em>iteration</em>, <em>iterator</em>, <em>iterating</em>, and <em>iterable</em> aren&rsquo;t the most beginner-friendly.</p>
<p>When tackling new concepts, I find concrete examples to be most useful. I&rsquo;ll share some in this post and discuss appropriate situations for each. (Pun intended.)</p>
<h2 id="for-loop">For loop</h2>
<p>First, in pseudocode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> iterating_variable <span style="color:#f92672">in</span> iterable:
</span></span><span style="display:flex;"><span>    statement(s)
</span></span></code></pre></div><p>I find <code>for</code> loops to be the most readable way to iterate in Python. This is especially nice when you&rsquo;re writing code that someone else needs to read and understand, which is always.</p>
<p>An <code>iterating_variable</code>, loosely speaking, is anything you could put in a group. For example: a letter in a string, an item from a list, or an integer in a range of integers.</p>
<p>An <code>iterable</code> houses the things you iterate on. This can also take different forms: a string with multiple characters, a range of numbers, a list, and so on.</p>
<p>A <code>statement</code> or multiple <code>statements</code> indicates <em>doing something</em> to the iterating variable.  This could be anything from mathematical expressions to simply printing a result.</p>
<p>Here are a couple simple examples that print each <code>iterating_variable</code> of an <code>iterable</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> letter <span style="color:#f92672">in</span> <span style="color:#e6db74">&#34;Hello world&#34;</span>:
</span></span><span style="display:flex;"><span>    print(letter)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    print(i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>breakfast_menu <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;toast&#34;</span>, <span style="color:#e6db74">&#34;eggs&#34;</span>, <span style="color:#e6db74">&#34;waffles&#34;</span>, <span style="color:#e6db74">&#34;coffee&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> choice <span style="color:#f92672">in</span> breakfast_menu:
</span></span><span style="display:flex;"><span>    print(choice)
</span></span></code></pre></div><p>You can even use a <code>for</code> loop in a more compact situation, such as this one-liner:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>breakfast_buffet <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(str(item) <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> breakfast_menu)
</span></span></code></pre></div><p>The downside to <code>for</code> loops is that they can be a bit verbose, depending on how much you&rsquo;re trying to achieve. Still, for anyone hoping to make their Python code as easily understood as possible, <code>for</code> loops are the most straightforward choice.</p>
<h2 id="list-comprehensions">List comprehensions</h2>
<p>A pseudocode example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>new_list <span style="color:#f92672">=</span> [statement(s) <span style="color:#66d9ef">for</span> iterating_variable <span style="color:#f92672">in</span> iterable]
</span></span></code></pre></div><p>List comprehensions are a concise and elegant way to create a new list by iterating on variables. Once you have a grasp of how they work, you can perform efficient iterations with very little code.</p>
<p>List comprehensions will always return a list, which may or may not be appropriate for your situation.</p>
<p>For example, you could use a list comprehension to quickly calculate and print tip percentage on a few bar tabs at once:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tabs <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>23.60, 42.10, 17.50<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>tabs_incl_tip <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>round<span style="color:#f92672">(</span>tab*1.15, 2<span style="color:#f92672">)</span> <span style="color:#66d9ef">for</span> tab in tabs<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>print<span style="color:#f92672">(</span>tabs_incl_tip<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; <span style="color:#f92672">[</span>27.14, 48.41, 20.12<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>In one concise line, we&rsquo;ve taken each tab amount, added a 15% tip, rounded it to the nearest cent, and made a new list of the tabs plus the tip values.</p>
<p>List comprehensions can be an elegant tool if output to a list is useful to you. Be advised that the more statements you add, the more complicated your list comprehension begins to look, especially once you get into nested list comprehensions. If your code isn&rsquo;t well annotated, it may become difficult for another reader to figure out.</p>
<h2 id="map">Map</h2>
<p>How to <code>map</code>, in pseudocode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>map(statement, iterable)
</span></span></code></pre></div><p>Map is pretty compact, for better or worse. It can be harder to read and understand, especially if your line of code has a lot of parentheses.</p>
<p>In terms of efficiency for character count, <code>map</code> is hard to beat. It applies your <code>statement</code> to every instance of your <code>iterable</code> and returns an iterator.</p>
<p>Here&rsquo;s an example casting each element of <code>input()</code> (the iterable) from string representation to integer representation. Since <code>map</code> returns an iterator, you also cast the result to a list representation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>values <span style="color:#f92672">=</span> list(map(int, input()<span style="color:#f92672">.</span>split()))
</span></span><span style="display:flex;"><span>weights <span style="color:#f92672">=</span> list(map(int, input()<span style="color:#f92672">.</span>split()))
</span></span></code></pre></div><p>It&rsquo;s worth noting that you can also use <code>for</code> loops, list comprehension, and <code>map</code> all together:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>output <span style="color:#f92672">=</span> sum([x[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> x[<span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> zip(values, weights)]) <span style="color:#f92672">/</span> sum(weights)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(round(output, <span style="color:#ae81ff">1</span>))
</span></span></code></pre></div><h2 id="your-iteration-toolbox">Your iteration toolbox</h2>
<p>Each of these methods of iteration in Python have a special place in the code I write every day. I hope these examples have helped you see how to use <code>for</code> loops, list comprehensions, and <code>map</code> in your own Python code!</p>
<p>If you like this post, there&rsquo;s a lot more where that came from! I write about efficient programming for coders and for leading technical teams. Check out the posts below!</p>
]]></content></entry></feed>