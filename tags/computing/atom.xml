<feed xmlns="http://www.w3.org/2005/Atom"><title>Computing on victoria.dev</title><link href="https://victoria.dev/tags/computing/feed.xml" rel="self"/><link href="https://victoria.dev/tags/computing/"/><updated>2023-09-26T04:46:36-05:00</updated><id>https://victoria.dev/tags/computing/</id><author><name>Victoria Drake</name><email>hello@victoria.dev</email></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">How to send long text input to ChatGPT using the OpenAI API</title><link href="https://victoria.dev/posts/how-to-send-long-text-input-to-chatgpt-using-the-openai-api/"/><id>https://victoria.dev/posts/how-to-send-long-text-input-to-chatgpt-using-the-openai-api/</id><author><name>Victoria Drake</name></author><published>2023-09-26T04:46:36-05:00</published><updated>2023-09-26T04:46:36-05:00</updated><content type="html"><![CDATA[<p>In a previous post, I showed how you can apply text preprocessing techniques to shorten your input length for ChatGPT. Today in the web interface (<a href="https://chat.openai.com/">chat.openai.com</a>), ChatGPT allows you to send a message with a maximum token length of 4,096.</p>
<p>There are bound to be situations in which this isn&rsquo;t enough, such as when you want to read in a large amount of text from a file. Using the OpenAI API allows you to send many more tokens in a messages array, with the maximum number depending on your chosen model. This lets you provide large amounts of text to ChatGPT using chunking. Here&rsquo;s how.</p>
<h2 id="chunking-your-input">Chunking your input</h2>
<p>The <code>gpt-4</code> model currently has a maximum content length token limit of 8,192 tokens. (<a href="https://platform.openai.com/docs/models">Here are the docs containing current limits for all the models</a>.) Remember that you can first apply text preprocessing techniques to reduce your input size &ndash; in my <a href="/posts/optimizing-text-for-chatgpt-nlp-and-text-pre-processing-techniques/">previous post</a> I achieved a 28% size reduction without losing meaning with just a little tokenization and pruning.</p>
<p>When this isn&rsquo;t enough to fit your message within the maximum message token limit, you can take a general programmatic approach that sends your input in message chunks. The goal is to divide your text into sections that each fit within the model&rsquo;s token limit. The general idea is to:</p>
<ol>
<li><strong>Tokenize and split text into chunks</strong> based on the model&rsquo;s token limit. It&rsquo;s better to keep message chunks slightly below the token limit since the token limit is shared between your message and ChatGPT&rsquo;s response.</li>
<li><strong>Maintain context</strong> between chunks, e.g. avoid splitting a sentence in the middle.</li>
</ol>
<p>Each chunk is sent as a separate message in the conversation thread.</p>
<h2 id="handling-responses">Handling responses</h2>
<p>You send your chunks to ChatGPT using the OpenAI library&rsquo;s <code>ChatCompletion</code>. ChatGPT returns individual responses for each message, so you may want to process these by:</p>
<ol>
<li><strong>Concatenating responses</strong> in the order you sent them to get a coherent answer.</li>
<li><strong>Manage conversation flow</strong> by keeping track of which response refers to which chunk.</li>
<li><strong>Formatting the response</strong> to suit your desired output, e.g. replacing <code>\n</code> with line breaks.</li>
</ol>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>Using the OpenAI API, you can send multiple messages to ChatGPT and ask it to wait for you to provide all of the data before answering your prompt. Being a language model, you can provide these instructions to ChatGPT in plain language. Here&rsquo;s a suggested script:</p>
<blockquote>
<p>Prompt: Summarize the following text for me</p>
<p>To provide the context for the above prompt, I will send you text in parts. When I am finished, I will tell you &ldquo;ALL PARTS SENT&rdquo;. Do not answer until you have received all the parts.</p></blockquote>
<p>I created <a href="https://github.com/victoriadrake/chatgptmax">a Python module, <code>chatgptmax</code></a>, that puts all this together. It breaks up a large amount of text by a given maximum token length and sends it in chunks to ChatGPT.</p>
<p>You can install it with <code>pip install chatgptmax</code>, but here&rsquo;s the juicy part:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> openai
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> tiktoken
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set up your OpenAI API key</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Load your API key from an environment variable or secret management service</span>
</span></span><span style="display:flex;"><span>openai<span style="color:#f92672">.</span>api_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>getenv(<span style="color:#e6db74">&#34;OPENAI_API_KEY&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send</span>(
</span></span><span style="display:flex;"><span>    prompt<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,
</span></span><span style="display:flex;"><span>    text_data<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,
</span></span><span style="display:flex;"><span>    chat_model<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;gpt-3.5-turbo&#34;</span>,
</span></span><span style="display:flex;"><span>    model_token_limit<span style="color:#f92672">=</span><span style="color:#ae81ff">8192</span>,
</span></span><span style="display:flex;"><span>    max_tokens<span style="color:#f92672">=</span><span style="color:#ae81ff">2500</span>,
</span></span><span style="display:flex;"><span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Send the prompt at the start of the conversation and then send chunks of text_data to ChatGPT via the OpenAI API.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    If the text_data is too long, it splits it into chunks and sends each chunk separately.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Args:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    - prompt (str, optional): The prompt to guide the model&#39;s response.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    - text_data (str, optional): Additional text data to be included.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    - max_tokens (int, optional): Maximum tokens for each API call. Default is 2500.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    - list or str: A list of model&#39;s responses for each chunk or an error message.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Check if the necessary arguments are provided</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> prompt:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Prompt is missing. Please provide a prompt.&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> text_data:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Error: Text data is missing. Please provide some text data.&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Initialize the tokenizer</span>
</span></span><span style="display:flex;"><span>    tokenizer <span style="color:#f92672">=</span> tiktoken<span style="color:#f92672">.</span>encoding_for_model(chat_model)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Encode the text_data into token integers</span>
</span></span><span style="display:flex;"><span>    token_integers <span style="color:#f92672">=</span> tokenizer<span style="color:#f92672">.</span>encode(text_data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Split the token integers into chunks based on max_tokens</span>
</span></span><span style="display:flex;"><span>    chunk_size <span style="color:#f92672">=</span> max_tokens <span style="color:#f92672">-</span> len(tokenizer<span style="color:#f92672">.</span>encode(prompt))
</span></span><span style="display:flex;"><span>    chunks <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        token_integers[i : i <span style="color:#f92672">+</span> chunk_size]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(token_integers), chunk_size)
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Decode token chunks back to strings</span>
</span></span><span style="display:flex;"><span>    chunks <span style="color:#f92672">=</span> [tokenizer<span style="color:#f92672">.</span>decode(chunk) <span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> chunks]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    responses <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    messages <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        {<span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>, <span style="color:#e6db74">&#34;content&#34;</span>: prompt},
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;content&#34;</span>: <span style="color:#e6db74">&#34;To provide the context for the above prompt, I will send you text in parts. When I am finished, I will tell you &#39;ALL PARTS SENT&#39;. Do not answer until you have received all the parts.&#34;</span>,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> chunks:
</span></span><span style="display:flex;"><span>        messages<span style="color:#f92672">.</span>append({<span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>, <span style="color:#e6db74">&#34;content&#34;</span>: chunk})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Check if total tokens exceed the model&#39;s limit and remove oldest chunks if necessary</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> (
</span></span><span style="display:flex;"><span>            sum(len(tokenizer<span style="color:#f92672">.</span>encode(msg[<span style="color:#e6db74">&#34;content&#34;</span>])) <span style="color:#66d9ef">for</span> msg <span style="color:#f92672">in</span> messages)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&gt;</span> model_token_limit
</span></span><span style="display:flex;"><span>        ):
</span></span><span style="display:flex;"><span>            messages<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># Remove the oldest chunk</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        response <span style="color:#f92672">=</span> openai<span style="color:#f92672">.</span>ChatCompletion<span style="color:#f92672">.</span>create(model<span style="color:#f92672">=</span>chat_model, messages<span style="color:#f92672">=</span>messages)
</span></span><span style="display:flex;"><span>        chatgpt_response <span style="color:#f92672">=</span> response<span style="color:#f92672">.</span>choices[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>message[<span style="color:#e6db74">&#34;content&#34;</span>]<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>        responses<span style="color:#f92672">.</span>append(chatgpt_response)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add the final &#34;ALL PARTS SENT&#34; message</span>
</span></span><span style="display:flex;"><span>    messages<span style="color:#f92672">.</span>append({<span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>, <span style="color:#e6db74">&#34;content&#34;</span>: <span style="color:#e6db74">&#34;ALL PARTS SENT&#34;</span>})
</span></span><span style="display:flex;"><span>    response <span style="color:#f92672">=</span> openai<span style="color:#f92672">.</span>ChatCompletion<span style="color:#f92672">.</span>create(model<span style="color:#f92672">=</span>chat_model, messages<span style="color:#f92672">=</span>messages)
</span></span><span style="display:flex;"><span>    final_response <span style="color:#f92672">=</span> response<span style="color:#f92672">.</span>choices[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>message[<span style="color:#e6db74">&#34;content&#34;</span>]<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>    responses<span style="color:#f92672">.</span>append(final_response)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> responses
</span></span></code></pre></div><p>Here&rsquo;s an example of how you can use this module with text data read from a file. (<code>chatgptmax</code> also provides a <a href="https://github.com/victoriadrake/chatgptmax/blob/4431af468435cd51d07779c6d721c8e0016d6bd6/chatgptmax.py#L68">convenience method</a> for getting text from a file.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># First, import the necessary modules and the function</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> chatgptmax <span style="color:#f92672">import</span> send
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Define a function to read the content of a file</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_file_content</span>(file_path):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(file_path, <span style="color:#e6db74">&#39;r&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf-8&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Use the function</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Specify the path to your file</span>
</span></span><span style="display:flex;"><span>    file_path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;path_to_your_file.txt&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Read the content of the file</span>
</span></span><span style="display:flex;"><span>    file_content <span style="color:#f92672">=</span> read_file_content(file_path)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Define your prompt</span>
</span></span><span style="display:flex;"><span>    prompt_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Summarize the following text for me:&#34;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Send the file content to ChatGPT</span>
</span></span><span style="display:flex;"><span>    responses <span style="color:#f92672">=</span> send(prompt<span style="color:#f92672">=</span>prompt_text, text_data<span style="color:#f92672">=</span>file_content)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Print the responses</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> response <span style="color:#f92672">in</span> responses:
</span></span><span style="display:flex;"><span>        print(response)
</span></span></code></pre></div><h3 id="error-handling">Error handling</h3>
<p>While the module is designed to handle most standard use cases, there are potential pitfalls to be aware of:</p>
<ul>
<li><strong>Incomplete sentences</strong>: If a chunk ends in the middle of a sentence, it might alter the meaning or context. To mitigate this, consider ensuring that chunks end at full stops or natural breaks in the text. You could do this by separating the text-chunking task into a separate function that:
<ol>
<li>Splits the text into sentences.</li>
<li>Iterates over the sentences and adds them to a chunk until the chunk reaches the maximum size.</li>
<li>Starts a new chunk when the current chunk reaches the maximum size or when adding another sentence would exceed the maximum size.</li>
</ol>
</li>
<li><strong>API connectivity issues</strong>: There&rsquo;s always a possibility of timeouts or connectivity problems during API calls. If this is a significant issue for your application, you can include retry logic in your code. If an API call fails, the script could wait for a few seconds and then try again, ensuring that all chunks are processed.</li>
<li><strong>Rate limits</strong>: Be mindful of <a href="https://platform.openai.com/docs/guides/rate-limits/overview">OpenAI API&rsquo;s rate limits</a>. If you&rsquo;re sending many chunks in rapid succession, you might hit these limits. Introducing a slight delay between calls or spreading out requests can help avoid this.</li>
</ul>
<h3 id="optimization">Optimization</h3>
<p>As with any process, there&rsquo;s always room for improvement. Here are a couple of ways you might optimize the module&rsquo;s chunking and sending process further:</p>
<ul>
<li><strong>Parallelizing API calls</strong>: If <a href="https://platform.openai.com/docs/guides/rate-limits/overview">OpenAI API&rsquo;s rate limits</a> and your infrastructure allow, you could send multiple chunks simultaneously. This parallel processing can speed up the overall time it takes to get responses for all chunks. Unless you have access to OpenAI&rsquo;s <code>32k</code> models or need to use small chunk sizes, however, parallelism gains are likely to be minimal.</li>
<li><strong>Caching mechanisms</strong>: If you find yourself sending the same or similar chunks frequently, consider implementing a caching system. By storing ChatGPT&rsquo;s responses for specific chunks, you can retrieve them instantly from the cache the next time, saving both time and API calls.</li>
</ul>
<h2 id="now-what">Now what</h2>
<p>If you found your way here via search, you probably already have a use case in mind. Here are some other (startup) ideas:</p>
<ul>
<li><strong>You&rsquo;re a researcher</strong> who wants to save time by getting short summaries of many lengthy articles.</li>
<li><strong>You&rsquo;re a legal professional</strong> who wants to analyze long contracts by extracting key points or clauses.</li>
<li><strong>You&rsquo;re a financial analyst</strong> who wants to pull a quick overview of trends from a long report.</li>
<li><strong>You&rsquo;re a writer</strong> who wants feedback on a new article or chapter&hellip; without having to actually show it to anyone yet.</li>
</ul>
<p>Do you have a use case I didn&rsquo;t list? <a href="/contact">Let me know about it!</a> In the meantime, have fun sending lots of text to ChatGPT.</p>
]]></content></entry><entry><title type="html">Optimizing text for ChatGPT: NLP and text pre-processing techniques</title><link href="https://victoria.dev/posts/optimizing-text-for-chatgpt-nlp-and-text-pre-processing-techniques/"/><id>https://victoria.dev/posts/optimizing-text-for-chatgpt-nlp-and-text-pre-processing-techniques/</id><author><name>Victoria Drake</name></author><published>2023-09-19T04:46:36-05:00</published><updated>2023-09-19T04:46:36-05:00</updated><content type="html"><![CDATA[<p>In order for chatbots and voice assistants to be helpful, they need to be able to take in and understand our instructions in plain language using Natural Language Processing (NLP). ChatGPT relies on a blend of advanced algorithms and text preprocessing methods to make sense of our words. But just throwing a wall of text at it can be inefficient &ndash; you might be dumping in a lot of noise with that signal and hitting the text input limit.</p>
<p>Text preprocessing can help shorten and refine your input, ensuring that ChatGPT can grasp the essence without getting overwhelmed. In this article, we&rsquo;ll explore these techniques, understand their importance, and see how they make your interactions with tools like ChatGPT more reliable and productive.</p>
<h2 id="text-preprocessing">Text preprocessing</h2>
<p>Text preprocessing prepares raw text data for analysis by NLP models. Generally, it distills everyday text (like full sentences) to make it more manageable or concise and meaningful. Techniques include:</p>
<ul>
<li><strong>Tokenization:</strong> splitting up text by sentences or paragraphs. For example, you could break down a lengthy legal document into individual clauses or sentences.</li>
<li><strong>Extractive summarization:</strong> selecting key sentences from the text and discarding the rest. Instead of reading an entire 10-page document, extractive summarization could pinpoint the most crucial sentences and give you a concise overview without delving into the details.</li>
<li><strong>Abstractive summarization:</strong> generating a concise representation of the text content, for example, turning a 10-page document into a brief paragraph that captures the document&rsquo;s essence in new wording.</li>
<li><strong>Pruning:</strong> removing redundant or less relevant parts. For example, in a verbose email thread, pruning can help remove all the greetings, sign-offs, and other repetitive elements, leaving only the core content for analysis.</li>
</ul>
<p>While all these techniques can help reduce the size of raw text data, some of these techniques are easier to apply to general use cases than others. Let&rsquo;s examine how text preprocessing can help us send a large amount of text to ChatGPT.</p>
<h2 id="tokenization-and-chatgpt-input-limits">Tokenization and ChatGPT input limits</h2>
<p>In the realm of Natural Language Processing (NLP), a token is the basic unit of text that a system reads. At its simplest, you can think of a token as a word, but depending on the language and the specific tokenization method used, a token can represent a word, part of a word, or even multiple words.</p>
<p>While in English we often equate tokens with words, in NLP, the concept is broader. A token can be as short as a single character or as long as a word. For example, with word tokenization, the sentence &ldquo;Unicode characters such as emojis are not indivisible. ✂️&rdquo; can be broken down into tokens like this: [&ldquo;Unicode&rdquo;, &ldquo;characters&rdquo;, &ldquo;such&rdquo;, &ldquo;as&rdquo;, &ldquo;emojis&rdquo;, &ldquo;are&rdquo;, &ldquo;not&rdquo;, &ldquo;indivisible&rdquo;, &ldquo;.&rdquo;, &ldquo;✂️&rdquo;]</p>
<p>In another form called Byte-Pair Encoding (BPE), the same sentence is tokenized as: [&ldquo;Un&rdquo;, &ldquo;ic&rdquo;, &ldquo;ode&rdquo;, &quot; characters&quot;, &quot; such&quot;, &quot; as&quot;, &quot; em, &ldquo;oj&rdquo;, &ldquo;is&rdquo;, &quot; are&quot;, &quot; not&quot;, &quot; ind&quot;, &ldquo;iv&rdquo;, &ldquo;isible&rdquo;, &ldquo;.&rdquo;, &quot; �&quot;, &ldquo;�️&rdquo;]. The emoji itself is split into tokens containing its underlying bytes.</p>
<p>Depending on the ChatGPT model chosen, your text input size is restricted by tokens. <a href="https://platform.openai.com/docs/models">Here are the docs containing current limits</a>. BPE is used by ChatGPT to determine token count, and we&rsquo;ll discuss it more thoroughly later. First, we can programmatically apply some preprocessing techniques to reduce our text input size and use fewer tokens.</p>
<h2 id="a-general-programmatic-approach">A general programmatic approach</h2>
<p>For a general approach that can be applied programmatically, pruning is a suitable preprocessing technique. One form is <strong>stop word removal,</strong> or removing common words that might not add significant meaning in certain contexts. For example, consider the sentence:</p>
<p>&ldquo;I always enjoy having pizza with my friends on weekends.&rdquo;</p>
<p>Stop words are often words that don&rsquo;t carry significant meaning on their own in a given context. In this sentence, words like &ldquo;I&rdquo;, &ldquo;always&rdquo;, &ldquo;enjoy&rdquo;, &ldquo;having&rdquo;, &ldquo;with&rdquo;, &ldquo;my&rdquo;, &ldquo;on&rdquo; are considered stop words.</p>
<p>After removing the stop words, the sentence becomes:</p>
<p>&ldquo;pizza friends weekends.&rdquo;</p>
<p>Now, the sentence is distilled to its key components, highlighting the main subject (pizza) and the associated context (friends and weekends). If you find yourself wishing you could convince people to do this in real life (<em>cough</em>meetings<em>cough</em>)&hellip; you aren&rsquo;t alone.</p>
<p>Stop word removal is straightforward to apply programmatically: given a list of stop words, examine some text input to see if it contains any of the stop words on your list. If it does, remove them, then return the altered text.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">clean_stopwords</span>(text: str) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    stopwords <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;an&#34;</span>, <span style="color:#e6db74">&#34;and&#34;</span>, <span style="color:#e6db74">&#34;at&#34;</span>, <span style="color:#e6db74">&#34;but&#34;</span>, <span style="color:#e6db74">&#34;how&#34;</span>, <span style="color:#e6db74">&#34;in&#34;</span>, <span style="color:#e6db74">&#34;is&#34;</span>, <span style="color:#e6db74">&#34;on&#34;</span>, <span style="color:#e6db74">&#34;or&#34;</span>, <span style="color:#e6db74">&#34;the&#34;</span>, <span style="color:#e6db74">&#34;to&#34;</span>, <span style="color:#e6db74">&#34;what&#34;</span>, <span style="color:#e6db74">&#34;will&#34;</span>]
</span></span><span style="display:flex;"><span>    tokens <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>    clean_tokens <span style="color:#f92672">=</span> [t <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> tokens <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> t <span style="color:#f92672">in</span> stopwords]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join(clean_tokens)
</span></span></code></pre></div><p>To see how effective stop word removal can be, I took the entire text of my <a href="https://techleaderdocs.com">Tech Leader Docs newsletter</a> (17,230 words consisting of 104,892 characters) and processed it using the above function. How effective was it? The resulting text contained 89,337 characters, which is about a 15% reduction in size.</p>
<p>Other pruning techniques can also be applied programmatically. Removing punctuation, numbers, HTML tags, URLs and email addresses, or non-alphabetical characters are all valid pruning techniques that can be straightforward to apply. Here is a function that does just that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">clean_text</span>(text):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Remove URLs</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;http\S+&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, text)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Remove email addresses</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\S+@\S+&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, text)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Remove everything that&#39;s not a letter (a-z, A-Z)</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;[^a-zA-Z\s]&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, text)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Remove whitespace, tabs, and new lines</span>
</span></span><span style="display:flex;"><span>    text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(text<span style="color:#f92672">.</span>split())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> text
</span></span></code></pre></div><p>What measure of length reduction might we be able to get from this additional processing? Applying these techniques to the remaining characters of Tech Leader Docs results in just 75,217 characters; an overall reduction of about 28% from the original text.</p>
<p>More opinionated pruning, such as removing short words or specific words or phrases, can be tailored to a specific use case. These don&rsquo;t lend themselves well to general functions, however.</p>
<p>Now that you have some text processing techniques in your toolkit, let&rsquo;s look at how a reduction in characters translates to fewer tokens used when it comes to ChatGPT. To understand this, we&rsquo;ll examine Byte-Pair Encoding.</p>
<h2 id="byte-pair-encoding-bpe">Byte-Pair Encoding (BPE)</h2>
<p>Byte-Pair Encoding (BPE) is a subword tokenization method. It was originally introduced for data compression but has since been adapted for tokenization in NLP tasks. It allows representing common words as tokens and splits more rare words into subword units. This enables a balance between character-level and word-level tokenization.</p>
<p>Let&rsquo;s make that more concrete. Imagine you have a big box of LEGO bricks, and each brick represents a single letter or character. You&rsquo;re tasked with building words using these LEGO bricks. At first, you might start by connecting individual bricks to form words. But over time, you notice that certain combinations of bricks (or characters) keep appearing together frequently, like &ldquo;th&rdquo; in &ldquo;the&rdquo; or &ldquo;ing&rdquo; in &ldquo;running.&rdquo;</p>
<p>BPE is like a smart LEGO-building buddy who suggests, &ldquo;Hey, since &rsquo;th&rsquo; and &lsquo;ing&rsquo; keep appearing together a lot, why don&rsquo;t we glue them together and treat them as a single piece?&rdquo; This way, the next time you want to build a word with &ldquo;the&rdquo; or &ldquo;running,&rdquo; you can use these glued-together pieces, making the process faster and more efficient.</p>
<p>Colloquially, the BPE algorithm looks like this:</p>
<ol>
<li>Start with single characters.</li>
<li>Observe which pairs of characters frequently appear together.</li>
<li>Merge those frequent pairs together to treat them as one unit.</li>
<li>Repeat this process until you have a mix of single characters and frequently occurring character combinations.</li>
</ol>
<p>BPE is a particularly powerful tokenization method, especially when dealing with diverse and extensive vocabularies. Here&rsquo;s why:</p>
<ul>
<li>Handling rare words: Traditional tokenization methods might stumble upon rare or out-of-vocabulary words. BPE, with its ability to break words down into frequent subword units, can represent these words without needing to have seen them before.</li>
<li>Efficiency: By representing frequent word parts as single tokens, BPE can compress text more effectively. This is especially useful for models like ChatGPT, where token limits apply.</li>
<li>Adaptability: BPE is language-agnostic. It doesn&rsquo;t rely on predefined dictionaries or vocabularies. Instead, it learns from the data, making it adaptable to various languages and contexts.</li>
</ul>
<p>In essence, BPE strikes a balance, offering the granularity of character-level tokenization and the context-awareness of word-level tokenization. This hybrid approach ensures that NLP models like ChatGPT can understand a wide range of texts while maintaining computational efficiency.</p>
<h2 id="sending-lots-of-text-to-chatgpt">Sending lots of text to ChatGPT</h2>
<p>At time of writing, a message to ChatGPT via its web interface has a maximum token length of 4,096 tokens. If we assume the prior mentioned percent reduction as an average, this means you could reduce text of up to 5,712 tokens down to the appropriate size with just text preprocessing.</p>
<p>What about when this isn&rsquo;t enough? Beyond text preprocessing, larger input can be sent in chunks using the OpenAI API. In my next post, I&rsquo;ll show you how to build a Python module that does exactly that.</p>
]]></content></entry><entry><title type="html">Building in context</title><link href="https://victoria.dev/posts/building-in-context/"/><id>https://victoria.dev/posts/building-in-context/</id><author><name>Victoria Drake</name></author><published>2021-08-09T03:17:49+00:00</published><updated>2021-08-09T03:17:49+00:00</updated><content type="html"><![CDATA[<p>It&rsquo;s a comedy classic &ndash; you&rsquo;ve got a grand idea. Maybe you want to build a beautiful new dining room table. You spend hours researching woodcraft, learn about types of wood and varnish, explore different styles of construction, and now you have a solid plan. You buy the wood and other materials. You set up in the garage. For months you measure and saw, sand, hammer and paint. Finally, the effort is worthwhile. The table is finished, and it&rsquo;s fantastic.</p>
<p>In a frenzy of accomplishment you drag it into the house &ndash; only to discover that your dining room doorway is several inches too small. It doesn&rsquo;t fit.</p>
<p>Art only imitates life, so you may say that this comedic example is unrealistic. Of course an experienced DIY-er would have measured the doorway first. In real life, however, unforeseen hindrances rarely come in ones: once you get the table in the door, you discover the floor&rsquo;s uneven. Perhaps the chairs you&rsquo;ve chosen are a few inches too short&hellip; and so on.</p>
<p>Far from attempting to persuade you away from your next DIY project, I&rsquo;d like to help make those and any other projects you take on go even smoother. The same patterns are found in furniture-building as in software development: it&rsquo;s always better to build in context.</p>
<h2 id="the-planning-fallacy">The planning fallacy</h2>
<p>Few software developers are accurate when it comes to time and cost estimates. This isn&rsquo;t a failing of software engineers, but a human tendency to towards optimism when it comes to predicting your own future. First proposed by Daniel Kahneman and Amos Tversky in 1979, the planning fallacy is no new concept.</p>
<p>In <a href="https://www.semanticscholar.org/paper/Exploring-the-%22planning-fallacy%22%3A-Why-people-their-Buehler-Griffin/f91964dad8c0e54cd58b1aa99e430b900fcf082b">one study</a>, students were asked to estimate how long they would take to finish their senior theses. The estimates, an average 27.4 days at the optimistic end and 48.6 days at the pessimistic end, came up predictably short. The average actual completion time was 55.5 days.</p>
<p>The study proposed two main hypotheses as to why this happens: first, that people tend to focus on their future plans rather than their past experiences; and second, people don&rsquo;t tend to think that past experiences matter all that much to the future anyway.</p>
<p>You can probably find examples of this in your own life without trying too hard, perhaps couched in the infamous &ldquo;only because&rdquo; envelope. Sure, that last &ldquo;weekend project&rdquo; turned into a two-week affair, but that was only because you had to go run some unexpected errands. Or maybe you didn&rsquo;t finish that blog post when you mean to, but that&rsquo;s only because your siblings dropped in to visit. You&rsquo;re absolutely, positively, definitely certain that next time would be different.</p>
<p>In reality, people are just plain poor at factoring in the unexpected daily demands of life. This makes sense from a certain perspective: if we were good at it, we&rsquo;d probably have a lot more to fret about on a daily basis. Some measure of ignorance can make life a little more blissful.</p>
<p>That said, some measure of accurate planning is also necessary for success. One way we can improve accuracy is to work in context as much as possible.</p>
<h2 id="context">Context</h2>
<p>Let&rsquo;s consider the dining room table story again. Instead of spending months out in the garage, what would you do differently to build in context?</p>
<p>You might say, &ldquo;Build it in the dining room!&rdquo; While that would certainly be ideal for context, both in homes and in software development, it&rsquo;s rarely possible (or palatable). Instead, you can do the next best thing: start building, and make frequent visits to context.</p>
<p>Having decided you&rsquo;d like to build a table, one of the first questions is likely, &ldquo;How big will it be?&rdquo; You&rsquo;ll undoubtedly have some requirements to fulfill (must seat six, must match other furniture, must hold the weight of your annual twenty-eight-course Christmas feast, etc.) that will lead you to a rough decision.</p>
<p>With a size in mind, you can then build a mock up. At this point, the specific materials, style, and color don&rsquo;t matter &ndash; only its three dimensions. Once you have your mock table, you now have the ability to make your first trip to the context in which you hope it will ultimately live. Attempting to carry your foam/wood/cardboard/balloon animal mock up into the dining room is highly likely to reveal a number of issues, and possibly new opportunities as well. Perhaps, though you&rsquo;d never have thought it, a modern abstractly-shaped dining table would better compliment the space and requirements. (It worked for the Jetsons.) You can then take this into account in your next higher-fidelity iteration.</p>
<p>This process translates directly to software development, minus the Christmas feast. You may have already recognized the MVP approach; however, even here, putting the MVP in context is a step that&rsquo;s frequently omitted.</p>
<p>Where will your product ultimately live? How will it be accessed? Building your MVP and attempting to deploy it is sure to help uncover lots of little hiccups at an early stage.</p>
<p>Even when teams have prior experience with stacks or technologies, remember the planning fallacy. People have a natural tendency to discount past evidence to the point of forgetting (memory bias). It&rsquo;s also highly unlikely that the same exact team is building the same exact product as the last time. The language, technology, framework, and infrastructure have likely changed in at least some small way &ndash; as have the capabilities and appetites of the engineers on your team. Frequent visits to context can help you run into any issues early on, adapt to them, and create a <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/">short feedback loop</a>.</p>
<h2 id="go-for-good-enough">Go for good enough</h2>
<p>The specific meaning of putting something in context is going to vary from one software project to another. It may mean deployment to cloud infrastructure, running a new bare metal server, or attempting to find out if your office across the ocean can access the same resources you use. In all cases, keep those short iterations going. Don&rsquo;t wait and attempt to get a version to 100% before you find out if it works in context. Send it at 80%, see how close you got, then iterate again.</p>
<p>The concept of building in context can be applied at any stage &ndash; of course, the sooner the better! Try applying this idea to your project guidance today. I&rsquo;d love to hear how it goes.</p>
]]></content></entry><entry><title type="html">What is TCP/IP? Layers and protocols explained</title><link href="https://victoria.dev/archive/what-is-tcp/ip-layers-and-protocols-explained/"/><id>https://victoria.dev/archive/what-is-tcp/ip-layers-and-protocols-explained/</id><author><name>Victoria Drake</name></author><published>2020-11-29T04:01:22-04:00</published><updated>2020-11-29T04:01:22-04:00</updated><content type="html"><![CDATA[<p>A significant part of the process of creation is the ability to imagine things that do not yet exist. This skill was instrumental to the creation of the Internet. If no one had imagined the underlying technology that most now take for granted every day, there would be no cat memes.</p>
<p>To make the Internet possible, two things that needed imagining are <em>layers</em> and <em>protocols.</em> Layers are conceptual divides that group similar functions together. The word &ldquo;protocol,&rdquo; means &ldquo;the way we&rsquo;ve agreed to do things around here,&rdquo; more or less. In short, both layers and protocols can be explained to a five-year-old as &ldquo;ideas that people agreed sounded good, and then they wrote them down so that other people could do things with the same ideas.&rdquo;</p>
<p>The Internet Protocol Suite is described in terms of layers and protocols. Collectively, the suite refers to the communication protocols that enable our endless scrolling. It&rsquo;s often called by its foundational protocols: the Transmission Control Protocol (TCP) and the Internet Protocol (IP). Lumped together as TCP/IP, these protocols describe how data on the Internet is packaged, addressed, sent, and received.</p>
<p>Here&rsquo;s why the Internet Protocol Suite, or TCP/IP, is an imaginary rainbow layer cake.</p>
<h2 id="layers-are-imaginary">Layers are imaginary</h2>
<p>If you consider the general nature of a rainbow layer sponge cake, it&rsquo;s mostly made up of soft, melt-in-your mouth vanilla-y goodness. This goodness is in itself comprised of something along the lines of eggs, butter, flour, and sweetener.</p>
<p><img src="free-cake.png" alt="Cartoon of a slice of rainbow layer cake, reads &ldquo;Yay! Free cake!&rdquo;"></p>
<p>There isn&rsquo;t much to distinguish one layer of a rainbow sponge cake from another. Often, the only difference between layers is the food-coloring and a bit of frosting. When you think about it, it&rsquo;s all cake from top to bottom. The rainbow layers are only there because the baker thought they ought to be.</p>
<p>Similar to cake ingredients, layers in the context of computer networking are mostly composed of protocols, algorithms, and configurations, with some data sprinkled in. It can be easier to talk about computer networking if its many functions are split up into groups, so certain people came up with descriptions of layers, which we call network models. TCP/IP is just one network model among others. In this sense, layers are concepts, not things.</p>
<p>Some of the people in question are part of the Internet Engineering Task Force (IETF). They created the <a href="https://tools.ietf.org/html/rfc1122">RFC-1122</a> publication, discussing the Internet&rsquo;s communications layers. Half of a whole, the standard:</p>
<blockquote>
<p>&hellip;covers the communications protocol layers: link layer, IP layer, and transport layer; its companion <a href="https://tools.ietf.org/html/rfc1123">RFC-1123</a> covers the application and support protocols.</p></blockquote>
<p>The layers described by RFC-1122 and RFC-1123 each encapsulate protocols that satisfy the layer&rsquo;s functionality. Let&rsquo;s look at each of these communications layers and see how TCP and IP stack up in this model of the Internet layer cake.</p>
<h2 id="link-layer-protocols">Link layer protocols</h2>
<p><img src="link.png" alt="Link cake layer cartoon"></p>
<p>The <a href="https://datatracker.ietf.org/doc/html/rfc1122#page-21">link layer</a> is the most basic, or lowest-level, classification of communication protocol. It deals with sending information between hosts on the same local network, and translating data from the higher layers to the physical layer. Protocols in the link layer describe how data interacts with the transmission medium, such as electronic signals sent over specific hardware. Unlike other layers, link layer protocols are dependent on the hardware being used.</p>
<h2 id="internet-layer-protocols">Internet layer protocols</h2>
<p>Protocols in the <a href="https://tools.ietf.org/html/rfc1122#page-27">Internet layer</a> describe how data is sent and received over the Internet. The process involves packaging data into packets, addressing and transmitting packets, and receiving incoming packets of data.</p>
<p><img src="internet.png" alt="Internet cake layer cartoon"></p>
<p>The most widely known protocol in this layer gives TCP/IP its last two letters. IP is a connectionless protocol, meaning that it provides no guarantee that packets are sent or received in the right order, along the same path, or even in their entirety. Reliability is handled by other protocols in the suite, such as in the transport layer.</p>
<p>There are currently two versions of IP in use: IPv4, and IPv6. Both versions describe how devices on the Internet are assigned IP addresses, which are used when navigating to cat memes. IPv4 is more widely used, but has only <a href="https://tools.ietf.org/html/rfc791#section-2.3">32 bits for addressing</a>, allowing for about 4.3 billion (ca. 4.3×10<sup>9</sup>) possible addresses. These are running out, and IPv4 and will eventually suffer from address exhaustion as more and more people use more devices on the Internet.</p>
<p>The successor version IPv6 aims to solve address exhaustion by <a href="https://tools.ietf.org/html/rfc8200#section-1">using 128 bits for addresses</a>. This provides, um, a <em>lot</em> more address possibilities (ca. 3.4×10<sup>38</sup>).</p>
<h2 id="transport-layer-protocols">Transport layer protocols</h2>
<p>In May 1974, Vint Cerf and Bob Kahn (collectively often called &ldquo;the fathers of the Internet&rdquo;) published a paper entitled <a href="https://web.archive.org/web/20160304150203/http://ece.ut.ac.ir/Classpages/F84/PrincipleofNetworkDesign/Papers/CK74.pdf">A Protocol for Packet Network Intercommunication</a>. This paper contained the first description of a Transmission Control Program, a concept encompassing what would eventually be known as the Transmission Control Protocol (TCP) and User Datagram Protocol (UDP). (I had the pleasure of meeting Vint and can personally confirm that yes, he does look exactly like The Architect in the Matrix movies.)</p>
<p><img src="transport.png" alt="Transport cake layer cartoon"></p>
<p>The <a href="https://tools.ietf.org/html/rfc1122#page-77">transport layer</a> presently encapsulates TCP and UDP. Like IP, UDP is connectionless and can be used to prioritize time over reliability. TCP, on the other hand, is a connection-oriented transport layer protocol that prioritizes reliability over latency, or time. TCP describes transferring data in the same order as it was sent, retransmitting lost packets, and controls affecting the rate of data transmission.</p>
<h2 id="application-layer-protocols">Application layer protocols</h2>
<p><img src="application.png" alt="Application cake layer cartoon"></p>
<p>The application layer describes the protocols that software applications interact with most often. The specification includes descriptions of the remote login protocol <a href="https://tools.ietf.org/html/rfc1123#section-3">Telnet</a>, the <a href="https://tools.ietf.org/html/rfc1123#section-4">File Transfer Protocol (FTP)</a>, and the <a href="https://tools.ietf.org/html/rfc1123#section-5">Simple Mail Transfer Protocol (SMTP)</a>.</p>
<p>Also included in the application layer are the Hypertext Transfer Protocol (HTTP) and its successor, Hypertext Transfer Protocol Secure (HTTPS). HTTPS is secured by Transport Layer Security, or TLS, which can be said to be the top-most layer of the networking model described by the Internet protocol suite. If you&rsquo;d like to further understand TLS and how this protocol secures your cat meme viewing, I invite you <a href="/blog/tls">read my article about TLS and cryptography</a>.</p>
<h2 id="the-internet-cake-is-still-baking">The Internet cake is still baking</h2>
<p>Like a still-rising sponge cake, descriptions of layers, better protocols, and new models are being developed every day. The Internet, or whatever it will become in the future, is still in the process of being imagined.</p>
<p><img src="cake.png" alt="Cartoon of the full Internet layer cake, topped with Nyan Cat memes"></p>
<p>If you enjoyed learning from this post, there&rsquo;s a lot more where this came from! I write about computing, cybersecurity, and building great technical teams. <a href="/">Subscribe</a> to see new articles first.</p>
]]></content></entry><entry><title type="html">WPA Key, WPA2, WPA3, and WEP Key: Wi-Fi security explained</title><link href="https://victoria.dev/posts/wpa-key-wpa2-wpa3-and-wep-key-wi-fi-security-explained/"/><id>https://victoria.dev/posts/wpa-key-wpa2-wpa3-and-wep-key-wi-fi-security-explained/</id><author><name>Victoria Drake</name></author><published>2020-10-19T04:02:27-04:00</published><updated>2020-10-19T04:02:27-04:00</updated><content type="html"><![CDATA[<p>Setting up new Wi-Fi? Picking the type of password you need can seem like an arbitrary choice. After all, WEP, WPA, WPA2, and WPA3 all have mostly the same letters in them. A password is a password, so what&rsquo;s the difference?</p>
<p>About 60 seconds to billions of years, as it turns out.</p>
<p>All Wi-Fi encryption is not created equal. Let&rsquo;s explore what makes these four acronyms so different, and how you can best protect your home and organization Wi-Fi.</p>
<h2 id="wired-equivalent-privacy-wep">Wired Equivalent Privacy (WEP)</h2>
<p>In the beginning, there was WEP.</p>
<figure><img src="/posts/wpa-key-wpa2-wpa3-and-wep-key-wi-fi-security-explained/wep.png"
    alt="cartoon of WEP letters"><figcaption>
      <p>Not to be confused with the name of a certain rap song.</p>
    </figcaption>
</figure>
<p><a href="https://en.wikipedia.org/wiki/Wired_Equivalent_Privacy">Wired Equivalent Privacy</a> is a deprecated security algorithm from 1997 that was intended to provide equivalent security to a wired connection. &ldquo;Deprecated&rdquo; means, &ldquo;Let&rsquo;s not do that anymore.&rdquo;</p>
<p>Even when it was first introduced, it was known not to be as strong as it could have been, for two reasons: one, its underlying encryption mechanism; and two, World War II.</p>
<p>During World War II, the impact of code breaking (or cryptanalysis) was <a href="https://en.wikipedia.org/wiki/History_of_cryptography#World_War_II_cryptography">huge</a>. Governments reacted by attempting to keep their best secret-sauce recipes at home. Around the time of WEP, <a href="https://en.wikipedia.org/wiki/Export_of_cryptography_from_the_United_States">U.S. Government restrictions on the export of cryptographic technology</a> caused access point manufacturers to limit their devices to 64-bit encryption. Though this was later lifted to 128-bit, even this form of encryption offered a very limited possible <a href="https://en.wikipedia.org/wiki/Key_size">key size</a>.</p>
<p>This proved problematic for WEP. The small key size resulted in being easier to <a href="https://en.wikipedia.org/wiki/Brute-force_attack">brute-force</a>, especially when that key doesn&rsquo;t often change.</p>
<p>WEP&rsquo;s underlying encryption mechanism is the <a href="https://en.wikipedia.org/wiki/RC4">RC4 stream cipher</a>. This cipher gained popularity due to its speed and simplicity, but that came at a cost. It&rsquo;s not the most robust algorithm. WEP employs a single shared key among its users that must be manually entered on an access point device. (When&rsquo;s the last time you changed your Wi-Fi password? Right.) WEP didn&rsquo;t help matters either by simply concatenating the key with the initialization vector &ndash; which is to say, it sort of mashed its secret-sauce bits together and hoped for the best.</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Initialization_vector">Initialization Vector (IV)</a>: fixed-size input to a <a href="https://en.wikipedia.org/wiki/Cryptographic_primitive">low-level cryptographic algorithm</a>, usually random.</p></blockquote>
<p>Combined with the use of RC4, this left WEP particularly susceptible to <a href="https://en.wikipedia.org/wiki/Related-key_attack">related-key attack</a>. In the case of 128-bit WEP, your Wi-Fi password can be cracked by publicly-available tools in a matter of around <a href="https://eprint.iacr.org/2007/120">60 seconds</a> to <a href="https://www.networkcomputing.com/wireless-infrastructure/fbi-teaches-lesson-how-break-wi-fi-networks">three minutes</a>.</p>
<p>While some devices came to offer 152-bit or 256-bit WEP variants, this failed to solve the fundamental problems of WEP&rsquo;s underlying encryption mechanism.</p>
<p>So, yeah. Let&rsquo;s not do that anymore.</p>
<h2 id="wi-fi-protected-access-wpa">Wi-Fi Protected Access (WPA)</h2>
<p><img src="wpa.png" alt="WPA illustration"></p>
<p>A new, interim standard sought to temporarily &ldquo;patch&rdquo; the problem of WEP&rsquo;s (lack of) security. The name <a href="https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access">Wi-Fi Protected Access (WPA)</a> certainly <em>sounds</em> more secure, so that&rsquo;s a good start; however, WPA first started out with another, more descriptive name.</p>
<p>Ratified in a <a href="https://en.wikipedia.org/wiki/IEEE_802.11i-2004">2004 IEEE standard</a>, <a href="https://en.wikipedia.org/wiki/Temporal_Key_Integrity_Protocol#Beck-Tews_attack">Temporal Key Integrity Protocol (TKIP)</a> uses a dynamically-generated, per-packet key. Each packet sent has a unique temporal 128-bit key, (See? Descriptive!) that solves the susceptibility to related-key attacks brought on by WEP&rsquo;s shared key mashing.</p>
<p>TKIP also implements other measures, such as a <a href="https://en.wikipedia.org/wiki/Message_authentication_code">message authentication code (MAC)</a>. Sometimes known as a checksum, a MAC provides a cryptographic way to verify that messages haven&rsquo;t been changed. In TKIP, an invalid MAC can also trigger rekeying of the session key. If the access point receives an invalid MAC twice within a minute, the attempted intrusion can be countered by changing the key an attacker is trying to crack.</p>
<p>Unfortunately, in order to preserve compatibility with the existing hardware that WPA was meant to &ldquo;patch,&rdquo; TKIP retained the use of the same underlying encryption mechanism as WEP &ndash; the RC4 stream cipher. While it certainly improved on the weaknesses of WEP, TKIP eventually proved vulnerable to new attacks that <a href="https://en.wikipedia.org/wiki/Temporal_Key_Integrity_Protocol#Security">extended previous attacks on WEP</a>. These attacks take a little longer to execute by comparison: for example, <a href="http://dl.aircrack-ng.org/breakingwepandwpa.pdf">twelve minutes</a> in the case of one, and <a href="https://www.rc4nomore.com/">52 hours</a> in another. This is more than sufficient, however, to deem TKIP no longer secure.</p>
<p>WPA, or TKIP, has since been deprecated as well. So let&rsquo;s also not do that anymore.</p>
<p>Which brings us to&hellip;</p>
<h2 id="wi-fi-protected-access-ii-wpa2">Wi-Fi Protected Access II (WPA2)</h2>
<p><img src="wpa2.png" alt="WPA2 illustration"></p>
<p>Rather than spend the effort to come up with an entirely new name, the improved <a href="https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access#WPA2">Wi-Fi Protected Access II (WPA2)</a> standard instead focuses on using a new underlying cipher. Instead of the RC4 stream cipher, WPA2 employs a block cipher called <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Advanced Encryption Standard (AES)</a> to form the basis of its encryption protocol. The protocol itself, abbreviated <a href="https://en.wikipedia.org/wiki/CCMP_(cryptography)">CCMP</a>, draws most of its security from the length of its rather long name (I&rsquo;m kidding): Counter Mode Cipher Block Chaining Message Authentication Code Protocol, which shortens to Counter Mode CBC-MAC Protocol, or CCM mode Protocol, or CCMP. 🤷</p>
<p><a href="https://en.wikipedia.org/wiki/CCM_mode">CCM mode</a> is essentially a combination of a few good ideas. It provides data confidentiality through <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29">CTR mode, or counter mode</a>. To vastly oversimplify, this adds complexity to plaintext data by encrypting the successive values of a count sequence that does not repeat. CCM also integrates <a href="https://en.wikipedia.org/wiki/CBC-MAC">CBC-MAC</a>, a block cipher method for constructing a MAC.</p>
<p>AES itself is on good footing. The AES specification was established in 2001 by the U.S. National Institute of Standards and Technology (NIST) after a five-year competitive selection process during which fifteen proposals for algorithm designs were evaluated. As a result of this process, a family of ciphers called Rijndael (Dutch) was selected, and a subset of these became AES. For the better part of two decades, AES has been used to protect every-day Internet traffic as well as <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Security">certain levels of classified information in the U.S. Government</a>.</p>
<p>While <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Known_attacks">possible attacks on AES</a> have been described, none have yet been proven to be practical in real-world use. The fastest <a href="https://web.archive.org/web/20141230025103/http://research.microsoft.com/en-us/projects/cryptanalysis/aesbc.pdf">attack on AES</a> in public knowledge is a <a href="https://en.wikipedia.org/wiki/Key-recovery_attack">key-recovery attack</a> that improved on brute-forcing AES by a factor of about four. How long would it take? Some <a href="https://web.archive.org/web/20150108165723/https://blog.agilebits.com/2011/08/18/aes-encryption-isnt-cracked/">billions of years</a>.</p>
<h2 id="wi-fi-protected-access-iii-wpa3">Wi-Fi Protected Access III (WPA3)</h2>
<p><img src="wpa3.png" alt="WPA3 illustration"></p>
<p>The next installment of the WPA trilogy has been required for new devices since July 1, 2020. Expected to further enhance the security of WPA2, the <a href="https://www.wi-fi.org/news-events/newsroom/wi-fi-alliance-introduces-wi-fi-certified-wpa3-security">WPA3 standard</a> seeks to improve password security by being more resilient to word list or <a href="https://en.wikipedia.org/wiki/Dictionary_attack">dictionary attacks</a>.</p>
<p>Unlike its predecessors, WPA3 will also offer <a href="https://en.wikipedia.org/wiki/Forward_secrecy">forward secrecy</a>. This adds the considerable benefit of protecting previously exchanged information even if a long-term secret key is compromised. Forward secrecy is already provided by protocols like TLS by using asymmetric keys to establish shared keys. You can learn <a href="/blog/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/">more about TLS in this post</a>.</p>
<p>As WPA2 has not been deprecated, both WPA2 and WPA3 remain your top choices for Wi-Fi security.</p>
<h2 id="if-the-other-ones-suck-why-are-they-still-around">If the other ones suck, why are they still around?</h2>
<p>You may be wondering why your access point even allows you to choose an option other than WPA2 or WPA3. The likely reason is that you&rsquo;re using legacy hardware, which is what tech people call your mom&rsquo;s router.</p>
<p>Since the deprecation of WEP and WPA occurred (in old-people terms) rather recently, it&rsquo;s possible in large organizations as well as your parent&rsquo;s house to find older hardware that still uses these protocols. Even newer hardware may have a business need to support these older protocols.</p>
<p>While I may be able to convince you to invest in a shiny new top-of-the-line Wi-Fi appliance, most organizations are a different story. Unfortunately, many just aren&rsquo;t yet cognizant of the important role cybersecurity plays in meeting customer needs and boosting that bottom line. Additionally, switching to newer protocols may require new internal hardware or firmware upgrades. Especially on complex systems in large organizations, upgrading devices can be financially or strategically difficult.</p>
<h2 id="boost-your-wi-fi-security">Boost your Wi-Fi security</h2>
<p>If it&rsquo;s an option, choose WPA2 or WPA3. Cybersecurity is a field that evolves by the day, and getting stuck in the past can have dire consequences.</p>
<p>If you can&rsquo;t use WPA2 or WPA3, do the best you can to take additional security measures. The best bang for your buck is to use a Virtual Private Network (VPN). Using a VPN is a good idea no matter which type of Wi-Fi encryption you have. On open Wi-Fi (coffee shops) and using WEP, it&rsquo;s plain irresponsible to go without a VPN. Kind of like shouting out your bank details as you order your second cappuccino.</p>
<figure><img src="/posts/wpa-key-wpa2-wpa3-and-wep-key-wi-fi-security-explained/cafewifi.png"
    alt="A cartoon of shouting out your bank details at a coffeeshop.">
</figure>
<p>When possible, ensure you only connect to known networks that you or your organization control. Many cybersecurity attacks are executed when victims connect to an imitation public Wi-Fi access point, also called an evil twin attack, or Wi-Fi phishing. These fake hotspots are easily created using publicly accessible programs and tools. A reputable VPN can help mitigate damage from these attacks as well, but it&rsquo;s always better not to take the risk. If you travel often, consider purchasing a portable hotspot that uses a cellular data plan, or using data SIM cards for all your devices.</p>
<h2 id="much-more-than-just-acronyms">Much more than just acronyms</h2>
<p>WEP, WPA, WPA2, and WPA3 mean a lot more than a bunch of similar letters &ndash; in some cases, it&rsquo;s a difference of billions of years minus about 60 seconds.</p>
<p>On more of a now-ish timescale, I hope I&rsquo;ve taught you something new about the security of your Wi-Fi and how you can improve it!</p>
]]></content></entry><entry><title type="html">What is TLS? Transport Layer Security encryption explained in plain english</title><link href="https://victoria.dev/archive/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/"/><id>https://victoria.dev/archive/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/</id><author><name>Victoria Drake</name></author><published>2020-09-05T04:48:39-06:00</published><updated>2020-09-05T04:48:39-06:00</updated><content type="html"><![CDATA[<p>If you want to have a confidential conversation with someone you know, you might meet up in person and find a private place to talk. If you want to send data confidentially over the Internet, you might have a few more considerations to cover.</p>
<p>TLS, or Transport Layer Security, refers to a protocol. &ldquo;Protocol&rdquo; is a word that means, &ldquo;the way we&rsquo;ve agreed to do things around here,&rdquo; more or less. The &ldquo;transport layer&rdquo; part of TLS simply refers to host-to-host communication, such as how a client and a server interact, in the <a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">Internet protocol suite model</a>.</p>
<p>The TLS protocol attempts to solve these fundamental problems:</p>
<ul>
<li>How do I know you are who you say you are?</li>
<li>How do I know this message from you hasn&rsquo;t been tampered with?</li>
<li>How can we communicate securely?</li>
</ul>
<p>Here&rsquo;s how TLS works, explained in plain English. As with many successful interactions, it begins with a handshake.</p>
<h2 id="getting-to-know-you">Getting to know you</h2>
<p>The basic process of a <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake">TLS handshake</a> involves a client, such as your web browser, and a server, such as one hosting a website, establishing some ground rules for communication. It begins with the client saying hello. Literally. It&rsquo;s called a <em>ClientHello</em> message.</p>
<p>The <em>ClientHello</em> message tells the server which TLS protocol version and <em>cipher suites</em> it supports. While &ldquo;cipher suite&rdquo; sounds like a fancy hotel upgrade, it just refers to a set of algorithms that can be used to secure communications. The server, in a similarly named <em>ServerHello</em> message, chooses the protocol version and cipher suite to use from the choices offered. Other data may also be sent, for example, a <em>session ID</em> if the server supports resuming a previous handshake.</p>
<p><img src="hello-hello.png" alt="A cartoon of a client and server saying hello"></p>
<p>Depending on the cipher suite chosen, the client and server exchange further information in order to establish a shared secret. Often, this process moves the exchange from <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">asymmetric cryptography</a> to <a href="https://en.wikipedia.org/wiki/Symmetric-key_algorithm">symmetric cryptography</a> with varying levels of complexity. Let&rsquo;s explore these concepts at a general level and see why they matter to TLS.</p>
<h2 id="asymmetric-beginnings">Asymmetric beginnings</h2>
<p>This is asymmetry:</p>
<figure><img src="/archive/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/asymmetry-eggs.jpeg"
    alt="A small egg and a big egg"><figcaption>
      <p>Small egg, big egg.</p>
    </figcaption>
</figure>

<p>Asymmetric cryptography is one method by which you can perform <em>authentication</em>. When you authenticate yourself, you answer the fundamental question, &ldquo;How do I know you are who you say you are?&rdquo;</p>
<p>In an asymmetric cryptographic system, you use a pair of keys in order to achieve authentication. These keys are asymmetric. One key is your public key, which, as you would guess, is public. The other is your private key, which &ndash; well, you know.</p>
<p>Typically, during the TLS handshake, the server will provide its public key via its digital certificate, sometimes still called its <em>SSL certificate</em>, though TLS replaces the deprecated Secure Sockets Layer (SSL) protocol. Digital certificates are provided and verified by trusted third parties known as <a href="https://en.wikipedia.org/wiki/Certificate_authority">Certificate Authorities (CA)</a>, which are a whole other article in themselves.</p>
<p>While anyone may encrypt a message using your public key, only your private key can then decrypt that message. The security of asymmetric cryptography relies only on your private key staying private, hence the asymmetry. It&rsquo;s also asymmetric in the sense that it&rsquo;s a one-way trip. Alice can send messages encrypted with your public key to you, but neither of your keys will help you send an encrypted message to Alice.</p>
<h2 id="symmetric-secrets">Symmetric secrets</h2>
<p>Asymmetric cryptography also requires more computational resources than symmetric cryptography. Thus when a TLS handshake begins with an asymmetric exchange, the client and server will use this initial communication to establish a shared secret, sometimes called a <em>session key</em>. This key is symmetric, meaning that both parties use the same shared secret and must maintain that secrecy for the encryption to be secure.</p>
<figure><img src="/archive/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/asym-vs-sym.png"
    alt="A cartoon of public-key cryptography vs. shared-key cryptography"><figcaption>
      <p>Wise man say: share your public key, but keep your shared keys private.</p>
    </figcaption>
</figure>

<p>By using the initial asymmetric communication to establish a session key, the client and server can rely on the session key being known only to them. For the rest of the session, they&rsquo;ll both use this same shared key to encrypt and decrypt messages, which speeds up communication.</p>
<h2 id="secure-sessions">Secure sessions</h2>
<p>A TLS handshake may use asymmetric cryptography or other cipher suites to establish the shared session key. Once the session key is established, the handshaking portion is complete and the session begins.</p>
<p>The <em>session</em> is the duration of encrypted communication between the client and server. During this time, messages are encrypted and decrypted using the session key that only the client and server have. This ensures that communication is secure.</p>
<p>The integrity of exchanged information is maintained by using a checksum. Messages exchanged using session keys have a <a href="https://en.wikipedia.org/wiki/Message_authentication_code">message authentication code (MAC)</a> attached. This is not the same thing as your device&rsquo;s <a href="https://en.wikipedia.org/wiki/MAC_address">MAC address</a>. The MAC is generated and verified using the session key. Because of this, either party can detect if a message has been changed before being received. This solves the fundamental question, &ldquo;How do I know this message from you hasn&rsquo;t been tampered with?&rdquo;</p>
<p>Sessions can end deliberately, due to network disconnection, or from the client staying idle for too long. Once a session ends, it must be re-established via a new handshake or through previously established secrets called <em>session IDs</em> that allow resuming a session.</p>
<h2 id="tls-and-you">TLS and you</h2>
<p>Let&rsquo;s recap:</p>
<ul>
<li>TLS is a cryptographic protocol for providing secure communication.</li>
<li>The process of creating a secure connection begins with a handshake.</li>
<li>The handshake establishes a shared session key that is then used to secure messages and provide message integrity.</li>
<li>Sessions are temporary, and once ended, must be re-established or resumed.</li>
</ul>
<p>This is just a surface-level skim of the very complex cryptographic systems that help to keep your communications secure. For more depth on the topic, I recommend exploring cipher suites and the various <a href="https://en.wikipedia.org/wiki/Cipher_suite#Supported_algorithms">supported algorithms</a>.</p>
<p>The TLS protocol serves a very important purpose in your everyday life. It helps to secure your emails to family, your online banking activities, and the connection by which you&rsquo;re reading this article. The <a href="https://en.wikipedia.org/wiki/HTTPS">HTTPS communication protocol</a> is encrypted using TLS. Every time you see that little lock icon in your URL bar, you&rsquo;re experiencing firsthand all the concepts you&rsquo;ve just read about in this article. Now you know the answer to the last question: &ldquo;How can we communicate securely?&rdquo;</p>
]]></content></entry><entry><title type="html">SQLite in production with WAL</title><link href="https://victoria.dev/posts/sqlite-in-production-with-wal/"/><id>https://victoria.dev/posts/sqlite-in-production-with-wal/</id><author><name>Victoria Drake</name></author><published>2020-03-05T10:14:43-05:00</published><updated>2020-03-05T10:14:43-05:00</updated><content type="html"><![CDATA[<p><em>Update: read the <a href="https://news.ycombinator.com/item?id=27237919">HackerNews discussion</a>.</em></p>
<p><a href="https://sqlite.org/index.html">SQLite</a> (&ldquo;see-quell-lite&rdquo;) is a lightweight Sequel, or Structured Query Language (<a href="https://en.wikipedia.org/wiki/SQL">SQL</a>), database engine. Instead of using the client-server database management system model, SQLite is self-contained in a single file. It is library, database, and data, all in one package.</p>
<p>For certain applications, SQLite is a solid choice for a production database. It&rsquo;s lightweight, ultra-portable, and has no external dependencies. Remember when MacBook Air first came out? It&rsquo;s nothing like that.</p>
<p>SQLite is best suited for production use in applications that:</p>
<ul>
<li>Desire fast and simple set up.</li>
<li>Require high reliability in a small package.</li>
<li>Have, and want to retain, a small footprint.</li>
<li>Are read-heavy but not write-heavy.</li>
<li>Don&rsquo;t need multiple user accounts or features like multiversion concurrency snapshots.</li>
</ul>
<p>If your application can benefit from SQLite&rsquo;s serverless convenience, you may like to know about the different modes available for managing database changes.</p>
<h2 id="with-and-without-wal">With and without WAL</h2>
<p>POSIX <a href="https://linux.die.net/man/2/fsync">system call <code>fsync()</code></a> commits buffered data (data saved in the operating system cache) referred to by a specified file descriptor to permanent storage or disk. This is relevant to understanding the difference between SQLite&rsquo;s two modes, as <code>fsync()</code> will block until the device reports the transfer is complete.</p>
<p>For efficiency, SQLite uses <a href="https://sqlite.org/atomiccommit.html">atomic commits</a> to batch database changes into a single transaction. This enables the apparent writing of many transactions to a database file simultaneously. Atomic commits are performed using one of two modes: a rollback journal, or a write-ahead log (WAL).</p>
<h3 id="rollback-journal">Rollback journal</h3>
<p>A <a href="https://www.sqlite.org/lockingv3.html#rollback">rollback journal</a> is essentially a back-up file created by SQLite before write changes occur on a database file. It has the advantage of providing high reliability by helping SQLite restore the database to its original state in case a write operation is compromised during the disk-writing process.</p>
<p>Assuming a cold cache, SQLite first needs to read the relevant pages from a database file before it can write to it. Information is read out into the operating system cache, then transferred into user space. SQLite obtains a reserved lock on the database file, preventing other processes from writing to the database. At this point, other processes may still read from the database.</p>
<p>SQLite creates a separate file, the rollback journal, with the original content of the pages that will be changed. Initially existing in the cache, the rollback journal is written to persistent disk storage with <code>fsync()</code> to enable SQLite to restore the database should its next operations be compromised.</p>
<p>SQLite then obtains an exclusive lock preventing other processes from reading or writing, and writes the page changes to the database file in cache. Since writing to disk is slower than interaction with the cache, writing to disk doesn&rsquo;t occur immediately. The rollback journal continues to exist until changes are safely written to disk, with a second <code>fsync()</code>. From a user-space process point of view, the change to the disk (the COMMIT, or end of the transaction) happens instantaneously once the rollback journal is deleted - hence, atomic commits. However, the two <code>fsync()</code> operations required to complete the COMMIT make this option, from a transactional standpoint, slower than SQLite&rsquo;s lesser known WAL mode.</p>
<h3 id="write-ahead-logging-wal">Write-ahead logging (WAL)</h3>
<p>While the rollback journal method uses a separate file to preserve the original database state, the <a href="https://www.sqlite.org/wal.html">WAL method</a> uses a separate WAL file to instead record the changes. Instead of a COMMIT depending on writing changes to disk, a COMMIT in WAL mode occurs when a record of one or more commits is appended to the WAL. This has the advantage of not requiring blocking read or write operations to the database file in order to make a COMMIT, so more transactions can happen concurrently.</p>
<p>WAL mode introduces the concept of the checkpoint, which is when the WAL file is synced to persistent storage before all its transactions are transferred to the database file. You can optionally specify when this occurs, but SQLite provides reasonable defaults. The checkpoint is the WAL version of the atomic commit.</p>
<p>In WAL mode, write transactions are performed faster than in the traditional rollback journal mode. Each transaction involves writing the changes only once to the WAL file instead of twice - to the rollback journal, and then to disk - before the COMMIT signals that the transaction is over.</p>
<h2 id="the-simplicity-of-sqlite">The simplicity of SQLite</h2>
<p>For medium-sized read-heavy applications, SQLite may be a great choice. Using SQLite in WAL mode may make it an even better one. Benchmarks on the smallest EC2 instance, with no provisioned <a href="https://en.wikipedia.org/wiki/IOPS">IOPS</a>, put this little trooper at 400 write transactions per second, and thousands of reads. That&rsquo;s some perfectly adequate capability, in a perfectly compact package.</p>
]]></content></entry><entry><title type="html">Multithreaded Python: slithering through an I/O bottleneck</title><link href="https://victoria.dev/posts/multithreaded-python-slithering-through-an-i/o-bottleneck/"/><id>https://victoria.dev/posts/multithreaded-python-slithering-through-an-i/o-bottleneck/</id><author><name>Victoria Drake</name></author><published>2020-02-28T09:31:02-05:00</published><updated>2020-02-28T09:31:02-05:00</updated><content type="html"><![CDATA[<p>I recently developed a project that I called <a href="https://github.com/victoriadrake/hydra-link-checker">Hydra</a>: a multithreaded link checker written in Python. Unlike many Python site crawlers I found while researching, Hydra uses only standard libraries, with no external dependencies like BeautifulSoup. It&rsquo;s intended to be run as part of a CI/CD process, so part of its success depended on being fast.</p>
<p>Multiple threads in Python is a bit of a bitey subject (not sorry) in that the Python interpreter doesn&rsquo;t actually let multiple threads execute at the same time. Python&rsquo;s <a href="https://wiki.python.org/moin/GlobalInterpreterLock">Global Interpreter Lock</a>, or GIL, prevents multiple threads from executing Python bytecodes at once. Each thread that wants to execute must first wait for the GIL to be released by the currently executing thread. The GIL is pretty much the microphone in a low-budget conference panel, except where no one gets to shout.</p>
<p>This has the advantage of preventing <a href="https://en.wikipedia.org/wiki/Race_condition">race conditions</a>. It does, however, lack the performance advantages afforded by running multiple tasks in parallel. (If you&rsquo;d like a refresher on concurrency, parallelism, and multithreading, see <a href="/blog/concurrency-parallelism-and-the-many-threads-of-santa-claus/">Concurrency, parallelism, and the many threads of Santa Claus</a>.) While I prefer Go for its convenient first-class primitives that support concurrency (see <a href="https://tour.golang.org/concurrency/1">Goroutines</a>), this project&rsquo;s recipients were more comfortable with Python. I took it as an opportunity to test and explore!</p>
<p>Simultaneously performing multiple tasks in Python isn&rsquo;t impossible; it just takes a little extra work. For Hydra, the main advantage is in overcoming the input/output (I/O) bottleneck.</p>
<p>In order to get web pages to check, Hydra needs to go out to the Internet and fetch them. When compared to tasks that are performed by the CPU alone, going out over the network is comparatively slower. How slow?</p>
<p>Here are approximate timings for tasks performed on a typical PC:</p>
<table>
  <thead>
      <tr>
          <th></th>
          <th>Task</th>
          <th>Time</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>CPU</td>
          <td>execute typical instruction</td>
          <td>1/1,000,000,000 sec = 1 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>fetch from L1 cache memory</td>
          <td>0.5 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>branch misprediction</td>
          <td>5 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>fetch from L2 cache memory</td>
          <td>7 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>Mutex lock/unlock</td>
          <td>25 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>fetch from main memory</td>
          <td>100 nanosec</td>
      </tr>
      <tr>
          <td>Network</td>
          <td>send 2K bytes over 1Gbps network</td>
          <td>20,000 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>read 1MB sequentially from memory</td>
          <td>250,000 nanosec</td>
      </tr>
      <tr>
          <td>Disk</td>
          <td>fetch from new disk location (seek)</td>
          <td>8,000,000 nanosec   (8ms)</td>
      </tr>
      <tr>
          <td>Disk</td>
          <td>read 1MB sequentially from disk</td>
          <td>20,000,000 nanosec  (20ms)</td>
      </tr>
      <tr>
          <td>Network</td>
          <td>send packet US to Europe and back</td>
          <td>150,000,000 nanosec (150ms)</td>
      </tr>
  </tbody>
</table>
<p>Peter Norvig first published these numbers some years ago in <a href="http://norvig.com/21-days.html#answers">Teach Yourself Programming in Ten Years</a>. Since computers and their components change year over year, the exact numbers shown above aren&rsquo;t the point. What these numbers help to illustrate is the difference, in orders of magnitude, between operations.</p>
<p>Compare the difference between fetching from main memory and sending a simple packet over the Internet. While both these operations occur in less than the blink of an eye (literally) from a human perspective, you can see that sending a simple packet over the Internet is over a million times slower than fetching from RAM. It&rsquo;s a difference that, in a single-thread program, can quickly accumulate to form troublesome bottlenecks.</p>
<p>In Hydra, the task of parsing response data and assembling results into a report is relatively fast, since it all happens on the CPU. The slowest portion of the program&rsquo;s execution, by over six orders of magnitude, is network latency. Not only does Hydra need to fetch packets, but whole web pages! One way of improving Hydra&rsquo;s performance is to find a way for the page fetching tasks to execute without blocking the main thread.</p>
<p>Python has a couple options for doing tasks in parallel: multiple processes, or multiple threads. These methods allow you to circumvent the GIL and speed up execution in a couple different ways.</p>
<h2 id="multiple-processes">Multiple processes</h2>
<p>To execute parallel tasks using multiple processes, you can use Python&rsquo;s <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor"><code>ProcessPoolExecutor</code></a>. A concrete subclass of <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor"><code>Executor</code></a> from the <a href="https://docs.python.org/3/library/concurrent.futures.html"><code>concurrent.futures</code> module</a>, <code>ProcessPoolExecutor</code> uses a pool of processes spawned with the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing"><code>multiprocessing</code> module</a> to avoid the GIL.</p>
<p>This option uses worker subprocesses that maximally default to the number of processors on the machine. The <code>multiprocessing</code> module allows you to maximally parallelize function execution across processes, which can really speed up compute-bound (or <a href="https://en.wikipedia.org/wiki/CPU-bound">CPU-bound</a>) tasks.</p>
<p>Since the main bottleneck for Hydra is I/O and not the processing to be done by the CPU, I&rsquo;m better served by using multiple threads.</p>
<h2 id="multiple-threads">Multiple threads</h2>
<p>Fittingly named, Python&rsquo;s <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor"><code>ThreadPoolExecutor</code></a> uses a pool of threads to execute asynchronous tasks. Also a subclass of <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor"><code>Executor</code></a>, it uses a defined number of maximum worker threads (at least five by default, according to the formula <code>min(32, os.cpu_count() + 4)</code>) and reuses idle threads before starting new ones, making it pretty efficient.</p>
<p>Here is a snippet of Hydra with comments showing how Hydra uses <code>ThreadPoolExecutor</code> to achieve parallel multithreaded bliss:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># Create the Checker class</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Checker</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Queue of links to be checked</span>
</span></span><span style="display:flex;"><span>    TO_PROCESS <span style="color:#f92672">=</span> Queue()
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Maximum workers to run</span>
</span></span><span style="display:flex;"><span>    THREADS <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Maximum seconds to wait for HTTP response</span>
</span></span><span style="display:flex;"><span>    TIMEOUT <span style="color:#f92672">=</span> <span style="color:#ae81ff">60</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__init__</span>(self, url):
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Create the thread pool</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>pool <span style="color:#f92672">=</span> futures<span style="color:#f92672">.</span>ThreadPoolExecutor(max_workers<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>THREADS)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run</span>(self):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Run until the TO_PROCESS queue is empty</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            target_url <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>TO_PROCESS<span style="color:#f92672">.</span>get(block<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, timeout<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># If we haven&#39;t already checked this link</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> target_url[<span style="color:#e6db74">&#34;url&#34;</span>] <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>visited:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Mark it as visited</span>
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>visited<span style="color:#f92672">.</span>add(target_url[<span style="color:#e6db74">&#34;url&#34;</span>])
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Submit the link to the pool</span>
</span></span><span style="display:flex;"><span>                job <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>pool<span style="color:#f92672">.</span>submit(self<span style="color:#f92672">.</span>load_url, target_url, self<span style="color:#f92672">.</span>TIMEOUT)
</span></span><span style="display:flex;"><span>                job<span style="color:#f92672">.</span>add_done_callback(self<span style="color:#f92672">.</span>handle_future)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> Empty:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>            print(e)
</span></span></code></pre></div><p>You can view the full code in <a href="https://github.com/victoriadrake/hydra-link-checker">Hydra&rsquo;s GitHub repository</a>.</p>
<h2 id="single-thread-to-multithread">Single thread to multithread</h2>
<p>If you&rsquo;d like to see the full effect, I compared the run times for checking my website between a prototype single-thread program, and the <del>multiheaded</del>multithreaded Hydra.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>time python3 slow-link-check.py https://victoria.dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>real    17m34.084s
</span></span><span style="display:flex;"><span>user    11m40.761s
</span></span><span style="display:flex;"><span>sys     0m5.436s
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>time python3 hydra.py https://victoria.dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>real    0m15.729s
</span></span><span style="display:flex;"><span>user    0m11.071s
</span></span><span style="display:flex;"><span>sys     0m2.526s
</span></span></code></pre></div><p>The single-thread program, which blocks on I/O, ran in about seventeen minutes. When I first ran the multithreaded version, it finished in 1m13.358s - after some profiling and tuning, it took a little under sixteen seconds. Again, the exact times don&rsquo;t mean all that much; they&rsquo;ll vary depending on factors such as the size of the site being crawled, your network speed, and your program&rsquo;s balance between the overhead of thread management and the benefits of parallelism.</p>
<p>The more important thing, and the result I&rsquo;ll take any day, is a program that runs some orders of magnitude faster.</p>
]]></content></entry><entry><title type="html">Breaking bottlenecks 🍾</title><link href="https://victoria.dev/posts/breaking-bottlenecks/"/><id>https://victoria.dev/posts/breaking-bottlenecks/</id><author><name>Victoria Drake</name></author><published>2020-02-25T12:50:29-05:00</published><updated>2020-02-25T12:50:29-05:00</updated><content type="html"><![CDATA[<p><em>I recently gave a lecture on the benefits of building non-blocking processes. This is a write-up of the full talk, minus any &ldquo;ums&rdquo; that may have occurred.</em></p>
<p>I&rsquo;ve been helping out a group called the Open Web Application Security Project (OWASP). They&rsquo;re a non-profit foundation that produces some of the foremost application testing guides and cybersecurity resources. OWASP&rsquo;s publications, checklists, and reference materials are a help to security professionals, penetration testers, and developers all over the world. Most of the individual teams that create these materials are run almost entirely by volunteers.</p>
<p>OWASP is a great group doing important work. I&rsquo;ve seen this firsthand as part of the core team that produces the Web Security Testing Guide. However, while OWASP inspires in its large volunteer base, it lacks in the area of central organization.</p>
<p>This lack of organization was most recently apparent in the group&rsquo;s website, <a href="https://owasp.org">OWASP.org</a>. A big organization with an even bigger website to match, OWASP.org enjoys hundreds of thousands of visitors. Unfortunately, many of its pages - individually managed by disparate projects - are infrequently updated. Some are abandoned. The website as a whole lacks a centralized quality assurance process, and as a result, OWASP.org is peppered with broken links.</p>
<h2 id="the-trouble-with-broken-links">The trouble with broken links</h2>
<p>Customers don&rsquo;t like broken links; attackers really do. That&rsquo;s because broken links are a security vulnerability. Broken links can signal opportunities for attacks like <a href="https://edoverflow.com/2017/broken-link-hijacking/">broken link hijacking</a> and <a href="https://www.hackerone.com/blog/Guide-Subdomain-Takeovers">subdomain takeovers</a>. At their least effective, these attacks can be embarrassing; at their worst, severely damaging to businesses and organizations. One OWASP group, the Application Security Verification Standard (ASVS) project, writes about <a href="https://github.com/OWASP/ASVS/blob/d9e0ac99828ef3c1e9233bd8a1f691f2a6958aa3/4.0/en/0x18-V10-Malicious.md#v103-deployed-application-integrity-controls">integrity controls</a> that can help to mitigate the likelihood of these attacks. This knowledge, unfortunately, has not yet propagated throughout the rest of OWASP yet.</p>
<p>This is the story of how I created a fast and efficient tool to help OWASP solve this problem.</p>
<h2 id="the-job">The job</h2>
<p>I took on the task of creating a program that could run as part of a CI/CD process to detect and report broken links. The program needed to:</p>
<ul>
<li>Find and enumerate all the broken links on OWASP.org in a report.</li>
<li>Keep track of the parent pages the broken links were on so they could be fixed.</li>
<li>Run efficiently as part of a CI/CD pipeline.</li>
</ul>
<p>Essentially; I need to build a web crawler.</p>
<p>My original journey through this process was also in Python, as that was a comfortable language choice for everyone in the OWASP group. Personally, I prefer to use Go for higher performance as it offers more convenient concurrency primitives. Between the task and this talk, I wrote three programs: a prototype single-thread Python program, a multithreaded Python program, and a Go program using goroutines. We&rsquo;ll see a comparison of how each worked out near the end of the talk - first, let&rsquo;s explore how to build a web crawler.</p>
<h2 id="prototyping-a-web-crawler">Prototyping a web crawler</h2>
<p>Here&rsquo;s what our web crawler will need to do:</p>
<ol>
<li>Get the HTML data of the first page of the website (for example, <code>https://victoria.dev</code>)</li>
<li>Check all of the links on the page
<ol>
<li>Keep track of the links we&rsquo;ve already visited so we don&rsquo;t end up checking them twice</li>
<li>Record any broken links we find</li>
</ol>
</li>
<li>Fetch more HTML data from any valid links on the page, as long as they&rsquo;re in the same domain (<code>https://victoria.dev</code> and not <code>https://github.com</code>, for instance)</li>
<li>Repeat step #2 until all of the links on the site have been checked</li>
</ol>
<p>Here&rsquo;s what the execution flow will look like:</p>
<figure class="screenshot"><img src="/posts/breaking-bottlenecks/execution_flow.png"
    alt="A flow chart showing program execution">
</figure>

<p>As you can see, the nodes &ldquo;GET page&rdquo; -&gt; &ldquo;HTML&rdquo; -&gt; &ldquo;Parse links&rdquo; -&gt; &ldquo;Valid link&rdquo; -&gt; &ldquo;Check visited&rdquo; all form a loop. These are what enable our web crawler to continue crawling until all the links on the site have been accounted for in the &ldquo;Check visited&rdquo; node. When the crawler encounters links it&rsquo;s already checked, it will &ldquo;Stop.&rdquo; This loop will become more important in a moment.</p>
<p>For now, the question on everyone&rsquo;s mind (I hope): how do we make it fast?</p>
<h2 id="how-fast-can-you-do-the-thing">How fast can you do the thing</h2>
<p>Here are some approximate timings for tasks performed on a typical PC:</p>
<table>
  <thead>
      <tr>
          <th>Type</th>
          <th>Task</th>
          <th>Time</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>CPU</td>
          <td>execute typical instruction</td>
          <td>1/1,000,000,000 sec = 1 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>fetch from L1 cache memory</td>
          <td>0.5 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>branch misprediction</td>
          <td>5 nanosec</td>
      </tr>
      <tr>
          <td>CPU</td>
          <td>fetch from L2 cache memory</td>
          <td>7 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>Mutex lock/unlock</td>
          <td>25 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>fetch from main memory</td>
          <td>100 nanosec</td>
      </tr>
      <tr>
          <td>RAM</td>
          <td>read 1MB sequentially from memory</td>
          <td>250,000 nanosec</td>
      </tr>
      <tr>
          <td>Disk</td>
          <td>fetch from new disk location (seek)</td>
          <td>8,000,000 nanosec   (8ms)</td>
      </tr>
      <tr>
          <td>Disk</td>
          <td>read 1MB sequentially from disk</td>
          <td>20,000,000 nanosec  (20ms)</td>
      </tr>
      <tr>
          <td>Network</td>
          <td>send packet US to Europe and back</td>
          <td>150,000,000 nanosec (150ms)</td>
      </tr>
  </tbody>
</table>
<p>Peter Norvig first published these numbers some years ago in <a href="http://norvig.com/21-days.html#answers">Teach Yourself Programming in Ten Years</a>. They typically crop up now and then in articles titled along the lines of, &ldquo;Latency numbers every developer should know.&rdquo;</p>
<p>Since computers and their components change year over year, the exact numbers shown above aren&rsquo;t the point. What these numbers help to illustrate is the difference, in orders of magnitude, between operations.</p>
<p>Compare the difference between fetching from main memory and sending a simple packet over the Internet. While both these operations occur in less than the blink of an eye (literally) from a human perspective, you can see that sending a simple packet over the Internet is over a million times slower than fetching from RAM. It&rsquo;s a difference that, in a single-thread program, can quickly accumulate to form troublesome bottlenecks.</p>
<h2 id="bottleneck-network-latency">Bottleneck: network latency</h2>
<p>The numbers above mean that the difference in time it takes to send something over the Internet compared to fetching data from main memory is over six orders of magnitude. Remember the loop in our execution chart? The &ldquo;GET page&rdquo; node, in which our crawler fetches page data over the network, is going to be <em>a million times slower</em> than the next slowest thing in the loop!</p>
<p>We don&rsquo;t need to run our prototype to see what that means in practical terms; we can estimate it. Let&rsquo;s take OWASP.org, which has upwards of 12,000 links, as an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>      150 milliseconds
</span></span><span style="display:flex;"><span> x 12,000 links
</span></span><span style="display:flex;"><span>---------
</span></span><span style="display:flex;"><span>1,800,000 milliseconds (30 minutes)
</span></span></code></pre></div><p>A whole half hour, just for the network tasks. It may even be much slower than that, since web pages are frequently much larger than a packet. This means that in our single-thread prototype web crawler, our biggest bottleneck is network latency. Why is this problematic?</p>
<h3 id="feedback-loops">Feedback loops</h3>
<p>I previously wrote about <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/">feedback loops</a>. In essence, in order to improve at doing anything, you first need to be able to get feedback from your last attempt. That way, you have the necessary information to make adjustments and get closer to your goal on your next iteration.</p>
<p>As a software developer, bottlenecks can contribute to long and inefficient feedback loops. If I&rsquo;m waiting on a process that&rsquo;s part of a CI/CD pipeline, in our bottlenecked web crawler example, I&rsquo;d be sitting around for a minimum of a half hour before learning whether or not changes in my last push were successful, or whether they broke <code>master</code> (hopefully <code>staging</code>).</p>
<p>Multiply a slow and inefficient feedback loop by many runs per day, over many days, and you&rsquo;ve got a slow and inefficient developer. Multiply that by many developers in an organization bottlenecked on the same process, and you&rsquo;ve got a slow and inefficient company.</p>
<h3 id="the-cost-of-bottlenecks">The cost of bottlenecks</h3>
<p>To add insult to injury, not only are you waiting on a bottlenecked process to run; you&rsquo;re also paying to wait. Take the serverless example - AWS Lambda, for instance. Here&rsquo;s a chart showing the cost of functions by compute time and CPU usage.</p>
<figure><img src="/posts/breaking-bottlenecks/lambda-chart.png"
    alt="Chart showing Total Lambda compute cost by function execution"><figcaption>
      <p>Source: <a href="https://serverless.com/blog/understanding-and-controlling-aws-lambda-costs/">Understanding and Controlling AWS Lambda Costs</a></p>
    </figcaption>
</figure>

<p>Again, the numbers change over the years, but the main concepts remain the same: the bigger the function and the longer its compute time, the bigger the cost. For applications taking advantage of serverless, these costs can add up dramatically.</p>
<p>Bottlenecks are a recipe for failure, for both productivity and the bottom line.</p>
<p>The good news is that bottlenecks are mostly unnecessary. If we know how to identify them, we can strategize our way out of them. To understand how, let&rsquo;s get some tacos.</p>
<h2 id="tacos-and-threading">Tacos and threading</h2>
<p>Everyone, meet Bob. He&rsquo;s a gopher who works at the taco stand down the street as the cashier. Say &ldquo;Hi,&rdquo; Bob.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮   ╔══════════════╗
</span></span><span style="display:flex;"><span>🌮      Hi I&#39;m Bob                          🌳
</span></span><span style="display:flex;"><span>🌮   ╚══════════════╝ \
</span></span><span style="display:flex;"><span>🌮                     🐹 🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>Bob works very hard at being a cashier, but he&rsquo;s still just one gopher. The customers who frequent Bob&rsquo;s taco stand can eat tacos really quickly; but in order to get the tacos to eat them, they&rsquo;ve got to order them through Bob. Here&rsquo;s what our bottlenecked, single-thread taco stand currently looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵🧑💵🧑💵🧑💵🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>As you can see, all the customers are queued up, right out the door. Poor Bob handles one customer&rsquo;s transaction at a time, starting and finishing with that customer completely before moving on to the next. Bob can only do so much, so our taco stand is rather inefficient at the moment. How can we make Bob faster?</p>
<p>We can try splitting the queue:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮         🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮         🧑💵🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>Now Bob can do some multitasking. For example, he can start a transaction with a customer in one queue; then, while that customer counts their bills, Bob can pop over to the second queue and get started there. This arrangement, known as a <a href="https://en.wikipedia.org/wiki/Concurrency_(computer_science)">concurrency model</a>, helps Bob go a little bit faster by jumping back and forth between lines. However, it&rsquo;s still just one Bob, which limits our improvement possibilities. If we were to make four queues, they&rsquo;d all be shorter; but Bob would be very thinly stretched between them. Can we do better?</p>
<p>We could get two Bobs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>With twice the Bobs, each can handle a queue of his own. This is our most efficient solution for our taco stand so far, since two Bobs can handle much more than one Bob can, even if each customer is still attended to one at a time.</p>
<p>We can do even better than that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮      🐹 🧑💵🧑💵🧑💵
</span></span><span style="display:flex;"><span>🌮                                          🌳
</span></span><span style="display:flex;"><span>🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮🌮
</span></span></code></pre></div><p>With quadruple the Bobs, we have some very short queues, and a much more efficient taco stand. In computing, the concept of having multiple workers do tasks in parallel is called <a href="https://en.wikipedia.org/wiki/Multithreading_(computer_architecture)">multithreading</a>.</p>
<p>In Go, we can apply this concept using goroutines. Here are some illustrative snippets from my Go solution.</p>
<h2 id="setting-up-a-go-web-crawler">Setting up a Go web crawler</h2>
<p>In order to share data between our <a href="https://tour.golang.org/concurrency/1">goroutines</a>, we&rsquo;ll need to create some data structures. Our <code>Checker</code> structure will be shared, so it will have a <code>Mutex</code> (<a href="https://en.wikipedia.org/wiki/Mutual_exclusion">mutual exclusion</a>) to allow our goroutines to lock and unlock it. The <code>Checker</code> structure will also hold a list of <code>brokenLinks</code> results, and <code>visitedLinks</code>. The latter will be a map of strings to booleans, which we&rsquo;ll use to directly and efficiently check for visited links. By using a map instead of iterating over a list, our <code>visitedLinks</code> lookup will have a constant complexity of O(1) as opposed to a linear complexity of O(n), thus avoiding the creation of another bottleneck. For more on time complexity, see my <a href="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/">coffee-break introduction to time complexity of algorithms</a> article.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Checker</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">startDomain</span>             <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">brokenLinks</span>             []<span style="color:#a6e22e">Result</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">visitedLinks</span>            <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">bool</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">workerCount</span>, <span style="color:#a6e22e">maxWorkers</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">Mutex</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Page allows us to retain parent and sublinks</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Page</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">parent</span>, <span style="color:#a6e22e">loc</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Result adds error information for the report</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Result</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Page</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">reason</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">code</span>   <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To extract links from HTML data, here&rsquo;s a parser I wrote on top of <a href="https://pkg.go.dev/golang.org/x/net/html?tab=doc">package <code>html</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Extract links from HTML</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">parent</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">string</span>) ([]<span style="color:#66d9ef">string</span>, []<span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">doc</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">html</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">data</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Could not parse: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">goodLinks</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">badLinks</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">f</span> <span style="color:#66d9ef">func</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">html</span>.<span style="color:#a6e22e">Node</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">f</span> = <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">html</span>.<span style="color:#a6e22e">Node</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">html</span>.<span style="color:#a6e22e">ElementNode</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">checkKey</span>(string(<span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Data</span>)) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">Attr</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">checkAttr</span>(string(<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">Key</span>)) {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">formatURL</span>(<span style="color:#a6e22e">parent</span>, <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">Val</span>)
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">badLinks</span> = append(<span style="color:#a6e22e">badLinks</span>, <span style="color:#a6e22e">j</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">goodLinks</span> = append(<span style="color:#a6e22e">goodLinks</span>, <span style="color:#a6e22e">j</span>)
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">FirstChild</span>; <span style="color:#a6e22e">c</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span>; <span style="color:#a6e22e">c</span> = <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">NextSibling</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">c</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">f</span>(<span style="color:#a6e22e">doc</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">goodLinks</span>, <span style="color:#a6e22e">badLinks</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If you&rsquo;re wondering why I didn&rsquo;t use a more full-featured package for this project, I highly recommend <a href="https://www.theregister.com/2016/03/23/npm_left_pad_chaos/">the story of <code>left-pad</code></a>. The short of it: more dependencies, more problems.</p>
<p>Here are snippets of the <code>main</code> function, where we pass in our starting URL and create a queue (or <a href="https://tour.golang.org/concurrency/2">channels</a>, in Go) to be filled with links for our goroutines to process.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">startURL</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;url&#34;</span>, <span style="color:#e6db74">&#34;http://example.com&#34;</span>, <span style="color:#e6db74">&#34;full URL of site&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">firstPage</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Page</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">parent</span>: <span style="color:#f92672">*</span><span style="color:#a6e22e">startURL</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">loc</span>:    <span style="color:#f92672">*</span><span style="color:#a6e22e">startURL</span>,
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">toProcess</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">Page</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">toProcess</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">firstPage</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wg</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>
</span></span></code></pre></div><p>The last significant piece of the puzzle is to create our workers, which we&rsquo;ll do here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">toProcess</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">checker</span>.<span style="color:#a6e22e">addWorker</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">🐹</span> <span style="color:#66d9ef">go</span> <span style="color:#a6e22e">worker</span>(<span style="color:#a6e22e">i</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">checker</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">wg</span>, <span style="color:#a6e22e">toProcess</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">checker</span>.<span style="color:#a6e22e">workerCount</span> &gt; <span style="color:#a6e22e">checker</span>.<span style="color:#a6e22e">maxWorkers</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>) <span style="color:#75715e">// throttle down</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
</span></span></code></pre></div><p>A <a href="https://golang.org/pkg/sync/#WaitGroup">WaitGroup</a> does just what it says on the tin: it waits for our group of goroutines to finish. When they have, we&rsquo;ll know our Go web crawler has finished checking all the links on the site.</p>
<h2 id="did-we-do-the-thing-fast">Did we do the thing fast</h2>
<p>Here&rsquo;s a comparison of the three programs I wrote on this journey. First, the prototype single-thread Python version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>time python3 slow-link-check.py https://victoria.dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>real 17m34.084s
</span></span><span style="display:flex;"><span>user 11m40.761s
</span></span><span style="display:flex;"><span>sys     0m5.436s
</span></span></code></pre></div><p>This finished crawling my website in about seventeen-and-a-half minutes, which is rather long for a site at least an order of magnitude smaller than OWASP.org.</p>
<p>The multithreaded Python version did a bit better:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>time python3 hydra.py https://victoria.dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>real 1m13.358s
</span></span><span style="display:flex;"><span>user 0m13.161s
</span></span><span style="display:flex;"><span>sys     0m2.826s
</span></span></code></pre></div><p>My multithreaded Python program (which I dubbed <a href="https://github.com/victoriadrake/hydra-link-checker">Hydra</a>) finished in one minute and thirteen seconds.</p>
<p>How did Go do?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>time ./go-link-check --url=https://victoria.dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>real 0m7.926s
</span></span><span style="display:flex;"><span>user 0m9.044s
</span></span><span style="display:flex;"><span>sys     0m0.932s
</span></span></code></pre></div><p>At just under eight seconds, I found the Go version to be extremely palatable.</p>
<h2 id="breaking-bottlenecks">Breaking bottlenecks</h2>
<p>As fun as it is to simply enjoy the speedups, we can directly relate these results to everything we&rsquo;ve learned so far. Consider taking a process that used to soak up seventeen minutes and turning it into an eight-second-affair instead. Not only will that give developers a much shorter and more efficient feedback loop, it will give companies the ability to develop faster, and thus grow more quickly - while costing less. To drive the point home: a process that runs in seventeen-and-a-half minutes when it could take eight seconds will also cost over a hundred and thirty times as much to run!</p>
<p>A better work day for developers, and a better bottom line for companies. There&rsquo;s a lot of benefit to be had in making functions, code, and processes as efficient as possible - by breaking bottlenecks.</p>
]]></content></entry><entry><title type="html">Concurrency, parallelism, and the many threads of Santa Claus 🎅</title><link href="https://victoria.dev/archive/concurrency-parallelism-and-the-many-threads-of-santa-claus/"/><id>https://victoria.dev/archive/concurrency-parallelism-and-the-many-threads-of-santa-claus/</id><author><name>Victoria Drake</name></author><published>2019-12-23T19:29:01-05:00</published><updated>2019-12-23T19:29:01-05:00</updated><content type="html"><![CDATA[<p>Consider the following: Santa brings toys to all the good girls and boys.</p>
<p>There are <a href="https://en.wikipedia.org/wiki/Demographics_of_the_world#Current_population_distribution">7,713,468,100 people</a> in the world in 2019, <a href="https://en.wikipedia.org/wiki/Demographics_of_the_world#Age_structure">around 26.3%</a> of which are under 15 years old. This works out to 2,028,642,110 children (persons under 15 years of age) in the world this year.</p>
<p>Santa doesn&rsquo;t seem to visit children of every religion, so we&rsquo;ll generalize and only include Christians and non-religious folks. Collectively that makes up <a href="https://en.wikipedia.org/wiki/List_of_religious_populations#Adherent_estimates_in_2019">approximately 44.72%</a> of the population. If we assume that all kids take after their parents, then 907,208,751.6 children would appear to be Santa-eligible.</p>
<p>What percentage of those children are good? It&rsquo;s impossible to know; however, we can work on a few assumptions. One is that Santa Claus functions more on optimism than economics and would likely have prepared for the possibility that every child is a good child in any given year. Thus, he would be prepared to give a toy to every child. Let&rsquo;s assume it&rsquo;s been a great year and that all 907,208,751.6 children are getting toys.</p>
<p>That&rsquo;s a lot of presents, and, as we know, they&rsquo;re all made by Santa&rsquo;s elves at his North <del>China</del> Pole workshop. Given that there are 365 days in a year and one of them is Christmas, let&rsquo;s assume that Santa&rsquo;s elves collectively have 364 days to create and gift wrap 907,208,752 (rounded up) presents. That works out to 2,492,331.74 presents per day.</p>
<p>Almost two-and-a-half million presents per day is a heavy workload for any workshop. Let&rsquo;s look at two paradigms that Santa might employ to hit this goal: concurrency, and parallelism.</p>
<h2 id="a-sequential-process">A sequential process</h2>
<p>Suppose that Santa&rsquo;s workshop is staffed by exactly one, very hard working, very tired elf. The production of one present involves four steps:</p>
<ol>
<li>Cutting wood</li>
<li>Assembly and glueing</li>
<li>Painting</li>
<li>Gift-wrapping</li>
</ol>
<p>With a single elf, only one step for one present can be happening at any instance in time. If the elf were to produce one present at a time from beginning to end, that process would be executed <em>sequentially</em>. It&rsquo;s not the most efficient method for producing two-and-a-half million presents per day; for instance, the elf would have to wait around doing nothing while the glue on the present was drying before moving on to the next step.</p>
<p><img src="sequence.png" alt="Illustration of sequence"></p>
<h2 id="concurrency">Concurrency</h2>
<p>In order to be more efficient, the elf works on all presents <em>concurrently</em>.</p>
<p>Instead of completing one present at a time, the elf first cuts all the wood for all the toys, one by one. When everything is cut, the elf assembles and glues the toys together, one after the other. This <a href="https://en.wikipedia.org/wiki/Concurrent_computing">concurrent processing</a> means that the glue from the first toy has time to dry (without needing more attention from the elf) while the remaining toys are glued together. The same goes for painting, one toy at a time, and finally wrapping.</p>
<p><img src="concurrency.png" alt="Illustration of concurrency"></p>
<p>Since one elf can only do one task at a time, a single elf is using the day as efficiently as possible by concurrently producing presents.</p>
<h2 id="parallelism">Parallelism</h2>
<p>Hopefully, Santa&rsquo;s workshop has more than just one elf. With more elves, more toys can be built simultaneously over the course of a day. This simultaneous work means that the presents are being produced in <em>parallel</em>. <a href="https://en.wikipedia.org/wiki/Parallel_computing">Parallel processing</a> carried out by multiple elves means more work happens at the same time.</p>
<p><img src="parallel.png" alt="Illustration of parallel processes"></p>
<p>Elves working in parallel can also employ concurrency. One elf can still tackle only one task at a time, so it&rsquo;s most efficient to have multiple elves concurrently producing presents.</p>
<p>Of course, if Santa&rsquo;s workshop has, say, two-and-a-half million elves, each elf would only need to finish a maximum of one present per day. In this case, working sequentially doesn&rsquo;t detract from the workshop&rsquo;s efficiency. There would still be 7,668.26 elves left over to fetch coffee and lunch.</p>
<h2 id="santa-claus-and-threading">Santa Claus, and threading</h2>
<p>After all the elves&rsquo; hard work is done, it&rsquo;s up to Santa Claus to deliver the presents &ndash; all 907,208,752 of them.</p>
<p>Santa doesn&rsquo;t need to make a visit to every kid; just to the one household tree. So how many trees does Santa need to visit? Again with broad generalization, we&rsquo;ll say that the average number of children per household worldwide is <a href="https://en.wikipedia.org/wiki/Demographics_of_the_world#Total_fertility_rate">2.45, based on the year&rsquo;s predicted fertility rates</a>. That makes 370,289,286.4 houses to visit. Let&rsquo;s round that up to 370,289,287.</p>
<p>How long does Santa have? The lore says one night, which means one earthly rotation, and thus 24 hours. <a href="https://www.noradsanta.org/en/">NORAD confirms</a>.</p>
<p>This means Santa must visit 370,289,287 households in 24 hours (86,400 seconds), at a rate of 4,285.75 households per second, nevermind the time it takes to put presents under the tree and grab a cookie.</p>
<p>Clearly, Santa doesn&rsquo;t exist in our dimension. This is especially likely given that despite being chubby and plump, he fits down a chimney (with a lit fire, while remaining unhurt) carrying a sack of toys containing presents for all the household&rsquo;s children. We haven&rsquo;t even considered the fact that his sleigh carries enough toys for every believing boy and girl around the world, and flies.</p>
<p>Does Santa exist outside our rules of physics? How could one entity manage to travel around the world, delivering packages, in under 24 hours at a rate of 4,285.75 households per second, and still have time for milk and cookies and kissing mommy?</p>
<p>One thing is certain: Santa uses the Internet. No other technology has yet enabled packages to travel quite so far and quite so quickly. Even so, attempting to reach upwards of four thousand households per second is no small task, even with even the best gigabit Internet hookup the North Pole has to offer. How might Santa increase his efficiency?</p>
<p>There&rsquo;s clearly only one logical conclusion to this mystery: Santa Claus is a multithreaded process.</p>
<h2 id="a-single-thread">A single thread</h2>
<p>Let&rsquo;s work outward. Think of a <a href="https://en.wikipedia.org/wiki/Thread_(computing)">thread</a> as one particular task, or the most granular sequence of instructions that Santa might execute. One thread might execute the task, <code>put present under tree</code>. A thread is a component of a process, in this case, Santa&rsquo;s process of delivering presents.</p>
<p>If Santa Claus is <a href="https://en.wikipedia.org/wiki/Thread_(computing)#Single_threading">single-threaded</a>, he, as a process, would only be able to accomplish one task at a time. Since he&rsquo;s old and a bit forgetful, he probably has a set of instructions for delivering presents, as well as a schedule to abide by. These two things guide Santa&rsquo;s thread until his process is complete.</p>
<p><img src="single.png" alt="A single Santa Claus emoji"></p>
<p>Single-threaded Santa Claus might work something like this:</p>
<ol>
<li>Land sleigh at Timmy&rsquo;s house</li>
<li>Get Timmy&rsquo;s present from sleigh</li>
<li>Enter house via chimney</li>
<li>Locate Christmas tree</li>
<li>Place Timmy&rsquo;s present under Christmas tree</li>
<li>Exit house via chimney</li>
<li>Take off in sleigh</li>
</ol>
<p>Rinse and repeat&hellip; another 370,289,286 times.</p>
<h2 id="multithreading">Multithreading</h2>
<p><a href="https://en.wikipedia.org/wiki/Thread_(computing)#Multithreading">Multithreaded</a> Santa Claus, by contrast, is the <a href="https://dc.fandom.com/wiki/Jonathan_Osterman_(Watchmen)">Doctor Manhattan</a> of the North Pole. There&rsquo;s still only one Santa Claus in the world; however, he has the amazing ability to multiply his consciousness and accomplish multiple instruction sets of tasks simultaneously. These additional task workers, or worker threads, are created and controlled by the main process of Santa delivering presents.</p>
<p><img src="cover.png" alt="Multiple Santa threads"></p>
<p>Each worker thread acts independently to complete its instructions. Since they all belong to Santa&rsquo;s consciousness, they share Santa&rsquo;s memory and know everything that Santa knows, including what planet they&rsquo;re running around on, and where to get the presents from.</p>
<p>With this shared knowledge, each thread is able to execute its set of instructions in parallel with the other threads. This multithreaded parallelism makes the one and only Santa Claus as efficient as possible.</p>
<p>If an average present delivery run takes an hour, Santa need only spawn 4,286 worker threads. With each making one delivery trip per hour, Santa will have completed all 370,289,287 trips by the end of the night.</p>
<p>Of course, in theory, Santa could even spawn 370,289,287 worker threads, each flying to one household to deliver presents for all the children in it! That would make Santa&rsquo;s process extremely efficient, and also explain how he manages to consume all those milk-dunked cookies without getting full. 🥛🍪🍪🍪</p>
<h2 id="an-efficient-and-merry-multithreaded-christmas">An efficient and merry multithreaded Christmas</h2>
<p>Thanks to modern computing, we now finally understand how Santa Claus manages the seemingly-impossible task of delivering toys to good girls and boys the world-over. From my family to yours, I hope you have a wonderful Christmas. Don&rsquo;t forget to hang up your stockings on the router shelf.</p>
<p>Of course, none of this explains how reindeer manage to fly.</p>
]]></content></entry><entry><title type="html">A coffee-break introduction to time complexity of algorithms</title><link href="https://victoria.dev/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/"/><id>https://victoria.dev/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/</id><author><name>Victoria Drake</name></author><published>2018-05-30T14:08:28-04:00</published><updated>2018-05-30T14:08:28-04:00</updated><content type="html"><![CDATA[<p>Just like writing your very first <code>for</code> loop, understanding time complexity is an integral milestone to learning how to write efficient complex programs. Think of it as having a superpower that allows you to know exactly what type of program might be the most efficient in a particular situation - before even running a single line of code.</p>
<p>The fundamental concepts of complexity analysis are well worth studying. You&rsquo;ll be able to better understand how the code you&rsquo;re writing will interact with the program&rsquo;s input, and as a result, you&rsquo;ll spend a lot less wasted time writing slow and problematic code. It won&rsquo;t take long to go over all you need to know in order to start writing more efficient programs - in fact, we can do it in about fifteen minutes. You can go grab a coffee right now (or tea, if that&rsquo;s your thing) and I&rsquo;ll take you through it before your coffee break is over. Go ahead, I&rsquo;ll wait.</p>
<p>All set? Let&rsquo;s do it!</p>
<h2 id="what-is-time-complexity-anyway">What is &ldquo;time complexity&rdquo; anyway</h2>
<p>The time complexity of an algorithm is an <strong>approximation</strong> of how long that algorithm will take to process some input. It describes the efficiency of the algorithm by the magnitude of its operations. This is different than the number of times an operation repeats; I&rsquo;ll expand on that later. Generally, the fewer operations the algorithm has, the faster it will be.</p>
<p>We write about time complexity using <a href="https://en.wikipedia.org/wiki/Big_O_notation">Big O notation</a>, which looks something like <em>O</em>(<em>n</em>). There&rsquo;s rather a lot of math involved in its formal definition, but informally we can say that Big O notation gives us our algorithm&rsquo;s approximate run time in the <strong>worst case</strong>, or in other words, its upper bound.<sup>[<a href="#references">2</a>]</sup> It is inherently relative and comparative.<sup>[<a href="#references">3</a>]</sup> We&rsquo;re describing the algorithm&rsquo;s efficiency relative to the increasing size of its input data, <em>n</em>. If the input is a string, then <em>n</em> is the length of the string. If it&rsquo;s a list of integers, <em>n</em> is the length of the list.</p>
<p>It&rsquo;s easiest to picture what Big O notation represents with a graph:</p>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph.png"
    alt="A graph showing different classes of time complexity"><figcaption>
      <p>Lines made with the very excellent Desmos graph calculator. You can <a href="https://www.desmos.com/calculator/xpfyjl1lbn">play with this graph here</a>.</p>
    </figcaption>
</figure>

<p>Here are the main important points to remember as you read the rest of this article:</p>
<ul>
<li>Time complexity is an approximation</li>
<li>An algorithm&rsquo;s time complexity approximates its worst case run time</li>
</ul>
<h2 id="determining-time-complexity">Determining time complexity</h2>
<p>There are different classes of complexity that we can use to quickly understand an algorithm. I&rsquo;ll illustrate some of these classes using nested loops and other examples.</p>
<h2 id="polynomial-time-complexity">Polynomial time complexity</h2>
<p>A <strong>polynomial</strong>, from the Greek <em>poly</em> meaning &ldquo;many,&rdquo; and Latin <em>nomen</em> meaning &ldquo;name,&rdquo; describes an expression comprised of constant variables, and addition, multiplication, and exponentiation to a non-negative integer power.<sup>[<a href="#references">4</a>]</sup> That&rsquo;s a super math-y way to say that it contains variables usually denoted by letters and symbols that look like these:</p>
<p><img src="polynomial.png" alt="A polynomial example"></p>
<p>The below classes describe polynomial algorithms. Some have food examples.</p>
<h3 id="constant">Constant</h3>
<p>A <strong>constant time</strong> algorithm doesn&rsquo;t change its running time in response to the input data. No matter the size of the data it receives, the algorithm takes the same amount of time to run. We denote this as a time complexity of <em>O</em>(1).</p>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph%281%29.png"
    alt="A graph showing constant time complexity.">
</figure>

<p>Here&rsquo;s one example of a constant algorithm that takes the first item in a slice.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">takeCupcake</span>(<span style="color:#a6e22e">cupcakes</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cupcakes</span>[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><figure><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/cupcakes.png"
    alt="Types of cupcakes"><figcaption>
      <p>Choice of flavours are: vanilla cupcake, strawberry cupcake, mint chocolate cupcake, lemon cupcake, and wibbly wobbly, timey wimey cupcake.</p>
    </figcaption>
</figure>

<p>With this constant-time algorithm, no matter how many cupcakes are on offer, you just get the first one. Oh well. Flavours are overrated anyway.</p>
<h3 id="linear">Linear</h3>
<p>The running duration of a <strong>linear</strong> algorithm is constant. It will process the input in <em>n</em> number of operations. This is often the best possible (most efficient) case for time complexity where all the data must be examined.</p>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph%28n%29.png"
    alt="A graph showing linear time complexity.">
</figure>

<p>Here&rsquo;s an example of code with time complexity of <em>O</em>(<em>n</em>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">eatChips</span>(<span style="color:#a6e22e">bowlOfChips</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">chip</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">chip</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">bowlOfChips</span>; <span style="color:#a6e22e">chip</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// dip chip</span>
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here&rsquo;s another example of code with time complexity of <em>O</em>(<em>n</em>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">eatChips</span>(<span style="color:#a6e22e">bowlOfChips</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">chip</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">chip</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">bowlOfChips</span>; <span style="color:#a6e22e">chip</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// double dip chip</span>
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It doesn&rsquo;t matter whether the code inside the loop executes once, twice, or any number of times. Both these loops process the input by a constant factor of <em>n</em>, and thus can be described as linear.</p>
<figure><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/dip.png"
    alt="Lifeguard MIQ the chip says no double dipping"><figcaption>
      <p>Don&rsquo;t double dip in a shared bowl.</p>
    </figcaption>
</figure>

<h3 id="quadratic">Quadratic</h3>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph%28n2%29.png"
    alt="A graph showing quadratic time complexity">
</figure>

<p>Now here&rsquo;s an example of code with time complexity of <em>O</em>(<em>n</em><sup>2</sup>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">pizzaDelivery</span>(<span style="color:#a6e22e">pizzas</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">pizza</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">pizza</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">pizzas</span>; <span style="color:#a6e22e">pizza</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// slice pizza</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">slice</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">slice</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">pizza</span>; <span style="color:#a6e22e">slice</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// eat slice of pizza</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Because there are two nested loops, or nested linear operations, the algorithm process the input <em>n</em><sup>2</sup> times.</p>
<h3 id="cubic">Cubic</h3>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph%28n3%29.png"
    alt="A graph showing cubic time complexity">
</figure>

<p>Extending on the previous example, this code with three nested loops has time complexity of <em>O</em>(<em>n</em><sup>3</sup>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">pizzaDelivery</span>(<span style="color:#a6e22e">boxesDelivered</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">pizzaBox</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">pizzaBox</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">boxesDelivered</span>; <span style="color:#a6e22e">pizzaBox</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// open box</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">pizza</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">pizza</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">pizzaBox</span>; <span style="color:#a6e22e">pizza</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// slice pizza</span>
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">slice</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">slice</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">pizza</span>; <span style="color:#a6e22e">slice</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// eat slice of pizza</span>
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><figure><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/unsliced.png"
    alt="A pizza pie in a box with a pizza slicer dependency"><figcaption>
      <p>Seriously though, who delivers unsliced pizza??</p>
    </figcaption>
</figure>

<h3 id="logarithmic">Logarithmic</h3>
<p>A <strong>logarithmic</strong> algorithm is one that reduces the size of the input at every step.
We denote this time complexity as <em>O</em>(log <em>n</em>), where <strong>log</strong>, the logarithm function, is this shape:</p>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph%28logn%29.png"
    alt="A graph showing logarithmic time complexity">
</figure>

<p>One example of this is a <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">binary search algorithm</a> that finds the position of an element within a sorted array. Here&rsquo;s how it would work, assuming we&rsquo;re trying to find the element <em>x</em>:</p>
<ol>
<li>If <em>x</em> matches the middle element <em>m</em> of the array, return the position of <em>m</em></li>
<li>If <em>x</em> doesn&rsquo;t match <em>m</em>, see if <em>m</em> is larger or smaller than <em>x</em>
<ul>
<li>If larger, discard all array items greater than <em>m</em></li>
<li>If smaller, discard all array items smaller than <em>m</em></li>
</ul>
</li>
<li>Continue by repeating steps 1 and 2 on the remaining array until <em>x</em> is found</li>
</ol>
<p>I find the clearest analogy for understanding binary search is imagining the process of locating a book in a bookstore aisle. If the books are organized by author&rsquo;s last name and you want to find &ldquo;Terry Pratchett,&rdquo; you know you need to look for the &ldquo;P&rdquo; section.</p>
<p>You can approach the shelf at any point along the aisle and look at the author&rsquo;s last name there. If you&rsquo;re looking at a book by Neil Gaiman, you know you can ignore all the rest of the books to your left, since no letters that come before &ldquo;G&rdquo; in the alphabet happen to be &ldquo;P.&rdquo; You would then move down the aisle to the right any amount, and repeat this process until you&rsquo;ve found the Terry Pratchett section, which should be rather sizable if you&rsquo;re at any decent bookstore because wow did he write a lot of books.</p>
<h3 id="quasilinear">Quasilinear</h3>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph%28nlogn%29.png"
    alt="A graph showing quasilinear time complexity">
</figure>

<p>Often seen with sorting algorithms, the time complexity <em>O</em>(<em>n</em> log <em>n</em>) can describe a data structure where each operation takes <em>O</em>(log <em>n</em>) time. One example of this is <a href="https://en.wikipedia.org/wiki/Quicksort">quick sort</a>, a divide-and-conquer algorithm.</p>
<p>Quick sort works by dividing up an unsorted array into smaller chunks that are easier to process. It sorts the sub-arrays, and thus the whole array. Think about it like trying to put a deck of cards in order. It&rsquo;s faster if you split up the cards and get five friends to help you.</p>
<h3 id="non-polynomial-time-complexity">Non-polynomial time complexity</h3>
<p>The below classes of algorithms are non-polynomial.</p>
<h3 id="factorial">Factorial</h3>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph%28nfac%29.png"
    alt="A graph showing factorial time complexity">
</figure>

<p>An algorithm with time complexity <em>O</em>(<em>n</em>!) often iterates through all permutations of the input elements. One common example is a <a href="https://en.wikipedia.org/wiki/Brute-force_search">brute-force search</a> seen in the <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem#Computing_a_solution">travelling salesman problem</a>. It tries to find the least costly path between a number of points by enumerating all possible permutations and finding the ones with the lowest cost.</p>
<h3 id="exponential">Exponential</h3>
<p>An <strong>exponential</strong> algorithm often also iterates through all subsets of the input elements. It is denoted <em>O</em>(2<sup><em>n</em></sup>) and is often seen in brute-force algorithms. It is similar to factorial time except in its rate of growth, which as you may not be surprised to hear, is exponential. The larger the data set, the more steep the curve becomes.</p>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/graph%282n%29.png"
    alt="A graph showing exponential time complexity">
</figure>

<p>In cryptography, a brute-force attack may systematically check all possible elements of a password by iterating through subsets. Using an exponential algorithm to do this, it becomes incredibly resource-expensive to brute-force crack a long password versus a shorter one. This is one reason that a long password is considered more secure than a shorter one.</p>
<p>There are further time complexity classes less commonly seen that I won&rsquo;t cover here, but you can read about these and find examples in <a href="https://en.wikipedia.org/wiki/Time_complexity#Table_of_common_time_complexities">this handy table</a>.</p>
<h3 id="recursion-time-complexity">Recursion time complexity</h3>
<p>As I described in my article <a href="/blog/understanding-array.prototype.reduce-and-recursion-using-apple-pie/">explaining recursion using apple pie</a>, a recursive function calls itself under specified conditions. Its time complexity depends on how many times the function is called and the time complexity of a single function call. In other words, it&rsquo;s the product of the number of times the function runs and a single execution&rsquo;s time complexity.</p>
<p>Here&rsquo;s a recursive function that eats pies until no pies are left:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">eatPies</span>(<span style="color:#a6e22e">pies</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pies</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pies</span>
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">eatPies</span>(<span style="color:#a6e22e">pies</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The time complexity of a single execution is constant. No matter how many pies are input, the program will do the same thing: check to see if the input is 0. If so, return, and if not, call itself with one fewer pie.</p>
<p>The initial number of pies could be any number, and we need to process all of them, so we can describe the input as <em>n</em>. Thus, the time complexity of this recursive function is the product <em>O</em>(<em>n</em>).</p>
<figure><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/piespile.png"
    alt="A pile of pizza boxes with pies to be eaten"><figcaption>
      <p>This function&rsquo;s return value is zero, plus some indigestion.</p>
    </figcaption>
</figure>

<h3 id="worst-case-time-complexity">Worst case time complexity</h3>
<p>So far, we&rsquo;ve talked about the time complexity of a few nested loops and some code examples. Most algorithms, however, are built from many combinations of these. How do we determine the time complexity of an algorithm containing many of these elements strung together?</p>
<p>Easy. We can describe the total time complexity of the algorithm by finding the largest complexity among all of its parts. This is because the slowest part of the code is the bottleneck, and time complexity is concerned with describing the worst case for the algorithm&rsquo;s run time.</p>
<p>Say we have a program for an office party. If our program looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">takeCupcake</span>(<span style="color:#a6e22e">cupcakes</span> []<span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Have cupcake number&#34;</span>,<span style="color:#a6e22e">cupcakes</span>[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cupcakes</span>[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">eatChips</span>(<span style="color:#a6e22e">bowlOfChips</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Have some chips!&#34;</span>)
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">chip</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">chip</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">bowlOfChips</span>; <span style="color:#a6e22e">chip</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// dip chip</span>
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;No more chips.&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">pizzaDelivery</span>(<span style="color:#a6e22e">boxesDelivered</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Pizza is here!&#34;</span>)
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">pizzaBox</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">pizzaBox</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">boxesDelivered</span>; <span style="color:#a6e22e">pizzaBox</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// open box</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">pizza</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">pizza</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">pizzaBox</span>; <span style="color:#a6e22e">pizza</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// slice pizza</span>
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">slice</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">slice</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">pizza</span>; <span style="color:#a6e22e">slice</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// eat slice of pizza</span>
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Pizza is gone.&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">eatPies</span>(<span style="color:#a6e22e">pies</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pies</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Someone ate all the pies!&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pies</span>
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Eating pie...&#34;</span>)
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">eatPies</span>(<span style="color:#a6e22e">pies</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">takeCupcake</span>([]<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>})
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">eatChips</span>(<span style="color:#ae81ff">23</span>)
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">pizzaDelivery</span>(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">eatPies</span>(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Food gone. Back to work!&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can describe the time complexity of all the code by the complexity of its most complex part. This program is made up of functions we&rsquo;ve already seen, with the following time complexity classes:</p>
<table>
  <thead>
      <tr>
          <th>Function</th>
          <th>Class</th>
          <th>Big O</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>takeCupcake</code></td>
          <td>constant</td>
          <td><em>O</em>(1)</td>
      </tr>
      <tr>
          <td><code>eatChips</code></td>
          <td>linear</td>
          <td><em>O</em>(<em>n</em>)</td>
      </tr>
      <tr>
          <td><code>pizzaDelivery</code></td>
          <td>cubic</td>
          <td><em>O</em>(<em>n</em><sup>3</sup>)</td>
      </tr>
      <tr>
          <td><code>eatPies</code></td>
          <td>linear (recursive)</td>
          <td><em>O</em>(<em>n</em>)</td>
      </tr>
  </tbody>
</table>
<p>To describe the time complexity of the entire office party program, we choose the worst case. This program would have the time complexity <em>O</em>(<em>n</em><sup>3</sup>).</p>
<p>Here&rsquo;s the office party soundtrack, just for fun.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Have cupcake number <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>Have some chips!
</span></span><span style="display:flex;"><span>No more chips.
</span></span><span style="display:flex;"><span>Pizza is here!
</span></span><span style="display:flex;"><span>Pizza is gone.
</span></span><span style="display:flex;"><span>Eating pie...
</span></span><span style="display:flex;"><span>Eating pie...
</span></span><span style="display:flex;"><span>Eating pie...
</span></span><span style="display:flex;"><span>Someone ate all the pies!
</span></span><span style="display:flex;"><span>Food gone. Back to work!
</span></span></code></pre></div><h2 id="p-vs-np-np-complete-and-np-hard">P vs NP, NP-complete, and NP-hard</h2>
<p>You may come across these terms in your explorations of time complexity. Informally, <strong>P</strong> (for Polynomial time), is a class of problems that is quick to solve. <strong>NP</strong>, for Nondeterministic Polynomial time, is a class of problems where the answer can be quickly verified in polynomial time. NP encompasses P, but also another class of problems called <strong>NP-complete</strong>, for which no fast solution is known.<sup>[<a href="#references">5</a>]</sup> Outside of NP but still including NP-complete is yet another class called <strong>NP-hard</strong>, which includes problems that no one has been able to verifiably solve with polynomial algorithms.<sup>[<a href="#references">6</a>]</sup></p>
<figure class="screenshot"><img src="/posts/a-coffee-break-introduction-to-time-complexity-of-algorithms/pnpeuler.svg"
    alt="Euler diagram"><figcaption>
      <p>P vs NP Euler diagram, <a href="https://commons.wikimedia.org/w/index.php?curid=3532181">by Behnam Esfahbod, CC BY-SA 3.0</a></p>
    </figcaption>
</figure>

<p><a href="https://en.wikipedia.org/wiki/P_versus_NP_problem">P versus NP</a> is an unsolved, open question in computer science.</p>
<p>Anyway, you don&rsquo;t generally need to know about NP and NP-hard problems to begin taking advantage of understanding time complexity. They&rsquo;re a whole other Pandora&rsquo;s box.</p>
<h2 id="approximate-the-efficiency-of-an-algorithm-before-you-write-the-code">Approximate the efficiency of an algorithm before you write the code</h2>
<p>So far, we&rsquo;ve identified some different time complexity classes and how we might determine which one an algorithm falls into. So how does this help us before we&rsquo;ve written any code to evaluate?</p>
<p>By combining a little knowledge of time complexity with an awareness of the size of our input data, we can take a guess at an efficient algorithm for processing our data within a given time constraint. We can base our estimation on the fact that a modern computer can perform some hundreds of millions of operations in a second.<sup>[<a href="#references">1</a>]</sup> The following table from the <a href="#references">Competitive Programmer&rsquo;s Handbook</a> offers some estimates on required time complexity to process the respective input size in a time limit of one second.</p>
<table>
  <thead>
      <tr>
          <th>Input size</th>
          <th>Required time complexity for 1s processing time</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>n ≤ 10</td>
          <td><em>O</em>(<em>n</em>!)</td>
      </tr>
      <tr>
          <td>n ≤ 20</td>
          <td><em>O</em>(2<sup><em>n</em></sup>)</td>
      </tr>
      <tr>
          <td>n ≤ 500</td>
          <td><em>O</em>(<em>n</em><sup>3</sup>)</td>
      </tr>
      <tr>
          <td>n ≤ 5000</td>
          <td><em>O</em>(<em>n</em><sup>2</sup>)</td>
      </tr>
      <tr>
          <td>n ≤ 10<sup>6</sup></td>
          <td><em>O</em>(<em>n</em> log <em>n</em>) or <em>O</em>(<em>n</em>)</td>
      </tr>
      <tr>
          <td>n is large</td>
          <td><em>O</em>(1) or <em>O</em>(log <em>n</em>)</td>
      </tr>
  </tbody>
</table>
<p>Keep in mind that time complexity is an approximation, and not a guarantee. We can save a lot of time and effort by immediately ruling out algorithm designs that are unlikely to suit our constraints, but we must also consider that Big O notation doesn&rsquo;t account for <strong>constant factors</strong>. Here&rsquo;s some code to illustrate.</p>
<p>The following two algorithms both have <em>O</em>(<em>n</em>) time complexity.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">makeCoffee</span>(<span style="color:#a6e22e">scoops</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">scoop</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">scoop</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">scoops</span>; <span style="color:#a6e22e">scoop</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// add instant coffee</span>
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">makeStrongCoffee</span>(<span style="color:#a6e22e">scoops</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">scoop</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">scoop</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#a6e22e">scoops</span>; <span style="color:#a6e22e">scoop</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// add instant coffee</span>
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The first function makes a cup of coffee with the number of scoops we ask for. The second function also makes a cup of coffee, but it triples the number of scoops we ask for. To see an illustrative example, let&rsquo;s ask both these functions for a cup of coffee with a million scoops.</p>
<p>Here&rsquo;s the output of the Go test:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>Benchmark_makeCoffee-4          <span style="color:#ae81ff">1000000000</span>               0.29 ns/op
</span></span><span style="display:flex;"><span>Benchmark_makeStrongCoffee-4    <span style="color:#ae81ff">1000000000</span>               0.86 ns/op
</span></span></code></pre></div><p>Our first function, <code>makeCoffee</code>, completed in an average 0.29 nanoseconds. Our second function, <code>makeStrongCoffee</code>, completed in an average of 0.86 nanoseconds. While those may both seem like pretty small numbers, consider that the stronger coffee took near three times longer to make. This should make sense intuitively, since we asked it to triple the scoops. Big O notation alone wouldn&rsquo;t tell you this, since the constant factor of the tripled scoops isn&rsquo;t accounted for.</p>
<h2 id="improve-time-complexity-of-existing-code">Improve time complexity of existing code</h2>
<p>Becoming familiar with time complexity gives us the opportunity to write code, or refactor code, to be more efficient. To illustrate, I&rsquo;ll give a concrete example of one way we can refactor a bit of code to improve its time complexity.</p>
<p>Let&rsquo;s say a bunch of people at the office want some pie. Some people want pie more than others. The amount that everyone wants some pie is represented by an <code>int</code> &gt; 0:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">diners</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">88</span>, <span style="color:#ae81ff">87</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">42</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">34</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">43</span>, <span style="color:#ae81ff">56</span>}
</span></span></code></pre></div><p>Unfortunately, we&rsquo;re bootstrapped and there are only three forks to go around. Since we&rsquo;re a cooperative bunch, the three people who want pie the most will receive the forks to eat it with. Even though they&rsquo;ve all agreed on this, no one seems to want to sort themselves out and line up in an orderly fashion, so we&rsquo;ll have to make do with everybody jumbled about.</p>
<p>Without sorting the list of diners, return the three largest integers in the slice.</p>
<p>Here&rsquo;s a function that solves this problem and has <em>O</em>(<em>n</em><sup>2</sup>) time complexity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">giveForks</span>(<span style="color:#a6e22e">diners</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span> <span style="color:#75715e">// make a slice to store diners who will receive forks</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">withForks</span> []<span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">// loop over three forks</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// variables to keep track of the highest integer and where it is</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">max</span>, <span style="color:#a6e22e">maxIndex</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// loop over the diners slice</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">diners</span> {
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// if this integer is higher than max, update max and maxIndex</span>
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">n</span>] &gt; <span style="color:#a6e22e">max</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">max</span> = <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">n</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">maxIndex</span> = <span style="color:#a6e22e">n</span>
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// remove the highest integer from the diners slice for the next loop</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">diners</span> = append(<span style="color:#a6e22e">diners</span>[:<span style="color:#a6e22e">maxIndex</span>], <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">maxIndex</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// keep track of who gets a fork</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">withForks</span> = append(<span style="color:#a6e22e">withForks</span>, <span style="color:#a6e22e">max</span>)
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">withForks</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This program works, and eventually returns diners <code>[88 87 56]</code>. Everyone gets a little impatient while it&rsquo;s running though, since it takes rather a long time (about 120 nanoseconds) just to hand out three forks, and the pie&rsquo;s getting cold. How could we improve it?</p>
<p>By thinking about our approach in a slightly different way, we can refactor this program to have <em>O</em>(<em>n</em>) time complexity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">giveForks</span>(<span style="color:#a6e22e">diners</span> []<span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span> <span style="color:#75715e">// make a slice to store diners who will receive forks</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">withForks</span> []<span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">// create variables for each fork</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">first</span>, <span style="color:#a6e22e">second</span>, <span style="color:#a6e22e">third</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">// loop over the diners</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">diners</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// assign the forks</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">first</span> {
</span></span><span style="display:flex;"><span>   <span style="color:#a6e22e">third</span> = <span style="color:#a6e22e">second</span>
</span></span><span style="display:flex;"><span>   <span style="color:#a6e22e">second</span> = <span style="color:#a6e22e">first</span>
</span></span><span style="display:flex;"><span>   <span style="color:#a6e22e">first</span> = <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">i</span>]
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">second</span> {
</span></span><span style="display:flex;"><span>   <span style="color:#a6e22e">third</span> = <span style="color:#a6e22e">second</span>
</span></span><span style="display:flex;"><span>   <span style="color:#a6e22e">second</span> = <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">i</span>]
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">i</span>] &gt; <span style="color:#a6e22e">third</span> {
</span></span><span style="display:flex;"><span>   <span style="color:#a6e22e">third</span> = <span style="color:#a6e22e">diners</span>[<span style="color:#a6e22e">i</span>]
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span> }
</span></span><span style="display:flex;"><span> <span style="color:#75715e">// list the final result of who gets a fork</span>
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">withForks</span> = append(<span style="color:#a6e22e">withForks</span>, <span style="color:#a6e22e">first</span>, <span style="color:#a6e22e">second</span>, <span style="color:#a6e22e">third</span>)
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">withForks</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here&rsquo;s how the new program works:</p>
<p>Initially, diner <code>2</code> (the first in the list) is assigned the <code>first</code> fork. The other forks remain unassigned.</p>
<p>Then, diner <code>88</code> is assigned the first fork instead. Diner <code>2</code> gets the <code>second</code> one.</p>
<p>Diner <code>87</code> isn&rsquo;t greater than <code>first</code> which is currently <code>88</code>, but it is greater than <code>2</code> who has the <code>second</code> fork. So, the <code>second</code> fork goes to <code>87</code>. Diner <code>2</code> gets the <code>third</code> fork.</p>
<p>Continuing in this violent and rapid fork exchange, diner <code>16</code> is then assigned the <code>third</code> fork instead of <code>2</code>, and so on.</p>
<p>We can add a print statement in the loop to see how the fork assignments play out:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">87</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">87</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">87</span> <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">87</span> <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">87</span> <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">87</span> <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">87</span> <span style="color:#ae81ff">43</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#ae81ff">88</span> <span style="color:#ae81ff">87</span> 56<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>This program is much faster, and the whole epic struggle for fork domination is over in 47 nanoseconds.</p>
<p>As you can see, with a little change in perspective and some refactoring, we&rsquo;ve made this simple bit of code faster and more efficient.</p>
<p>Well, it looks like our fifteen minute coffee break is up! I hope I&rsquo;ve given you a comprehensive introduction to calculating time complexity. Time to get back to work, hopefully applying your new knowledge to write more effective code! Or maybe just sound smart at your next office party. :)</p>
<h2 id="references">References</h2>
<p>&ldquo;If I have seen further it is by standing on the shoulders of Giants.&rdquo; &ndash;Isaac Newton, 1675</p>
<ol>
<li>Antti Laaksonen. <em><a href="https://cses.fi/book.pdf">Competitive Programmer&rsquo;s Handbook (pdf)</a>,</em> 2017</li>
<li>Wikipedia: <a href="https://en.wikipedia.org/wiki/Big_O_notation">Big O notation</a></li>
<li>StackOverflow: <a href="https://stackoverflow.com/a/487278">What is a plain English explanation of “Big O” notation?</a></li>
<li>Wikipedia: <a href="https://en.wikipedia.org/wiki/Polynomial">Polynomial</a></li>
<li>Wikipedia: <a href="https://en.wikipedia.org/wiki/NP-completeness">NP-completeness</a></li>
<li>Wikipedia: <a href="https://en.wikipedia.org/wiki/NP-hardness">NP-hardness</a></li>
<li><a href="https://www.desmos.com/">Desmos graph calculator</a></li>
</ol>
]]></content></entry><entry><title type="html">Iterating over objects and arrays: frequent errors</title><link href="https://victoria.dev/archive/iterating-over-objects-and-arrays-frequent-errors/"/><id>https://victoria.dev/archive/iterating-over-objects-and-arrays-frequent-errors/</id><author><name>Victoria Drake</name></author><published>2017-05-16T10:46:46+07:00</published><updated>2017-05-16T10:46:46+07:00</updated><content type="html"><![CDATA[<p>Here&rsquo;s <del>some complaining</del> a quick overview of some code that has confounded me more than once. I&rsquo;m told even very experienced developers encounter these situations regularly, so if you find yourself on your third cup of coffee scratching your head over why your code is doing exactly what you told it to do (and not what you <em>want</em> it to do), maybe this post can help you.</p>
<p>The example code is JavaScript, since that&rsquo;s what I&rsquo;ve been working in lately, but I believe the concepts to be pretty universal.</p>
<h2 id="quick-reference-for-equivalent-statements">Quick reference for equivalent statements</h2>
<table>
  <thead>
      <tr>
          <th>This&hellip;</th>
          <th>&hellip;is the same as this</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>i++;</code></td>
          <td><code>i = i + 1;</code></td>
      </tr>
      <tr>
          <td><code>i--;</code></td>
          <td><code>i = i - 1;</code></td>
      </tr>
      <tr>
          <td><code>apples += 5</code></td>
          <td><code>apples = apples + 5;</code></td>
      </tr>
      <tr>
          <td><code>apples -= 5</code></td>
          <td><code>apples = apples - 5;</code></td>
      </tr>
      <tr>
          <td><code>apples *= 5</code></td>
          <td><code>apples = apples * 5;</code></td>
      </tr>
      <tr>
          <td><code>apples /= 5</code></td>
          <td><code>apples = apples / 5;</code></td>
      </tr>
  </tbody>
</table>
<h2 id="quick-reference-for-logical-statements">Quick reference for logical statements</h2>
<table>
  <thead>
      <tr>
          <th>This&hellip;</th>
          <th>&hellip;gives this</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>3 == '3'</code></td>
          <td><code>true</code> (type converted)</td>
      </tr>
      <tr>
          <td><code>3 === '3'</code></td>
          <td><code>false</code> (type matters; integer is not a string)</td>
      </tr>
      <tr>
          <td><code>3 != '3'</code></td>
          <td><code>false</code> (type converted, 3: 3)</td>
      </tr>
      <tr>
          <td><code>3 !== '3'</code></td>
          <td><code>true</code> (type matters; integer is not a string)</td>
      </tr>
      <tr>
          <td>||</td>
          <td>logical &ldquo;or&rdquo;: either side evaluated</td>
      </tr>
      <tr>
          <td><code>&amp;&amp;</code></td>
          <td>logical &ldquo;and&rdquo;: both sides evaluated</td>
      </tr>
  </tbody>
</table>
<h2 id="objects">Objects</h2>
<p>Given a breakfast object that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">breakfast</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;eggs&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;waffles&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;fruit&#39;</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;blueberries&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;strawberries&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;coffee&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Or like this:</p>
<p><img src="cover.png#center" alt="Breakfast object."></p>
<h3 id="iterate-over-object-properties">Iterate over object properties</h3>
<p>We can iterate through each breakfast item using a for loop as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">item</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">breakfast</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;item: &#39;</span>, <span style="color:#a6e22e">item</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This produces:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>item: eggs
</span></span><span style="display:flex;"><span>item: waffles
</span></span><span style="display:flex;"><span>item: fruit
</span></span><span style="display:flex;"><span>item: coffee
</span></span></code></pre></div><h3 id="get-object-property-value">Get object property value</h3>
<p>We can access the value of the property or nested properties (in this example, the number of items) like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;How many waffles? &#39;</span>, <span style="color:#a6e22e">breakfast</span>[<span style="color:#e6db74">&#39;waffles&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;How many strawberries? &#39;</span>, <span style="color:#a6e22e">breakfast</span>[<span style="color:#e6db74">&#39;fruit&#39;</span>][<span style="color:#e6db74">&#39;strawberries&#39;</span>])
</span></span></code></pre></div><p>Or equivalent syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;How many waffles? &#39;</span>, <span style="color:#a6e22e">breakfast</span>.<span style="color:#a6e22e">waffles</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;How many strawberries? &#39;</span>, <span style="color:#a6e22e">breakfast</span>.<span style="color:#a6e22e">fruit</span>.<span style="color:#a6e22e">strawberries</span>)
</span></span></code></pre></div><p>This produces:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>How many waffles?  <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>How many strawberries?  <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><h3 id="get-object-property-from-the-value">Get object property from the value</h3>
<p>If instead I want to access the property via the value, for example, to find out which items are served in twos, I can do so by iterating like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">item</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">breakfast</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">breakfast</span>[<span style="color:#a6e22e">item</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Two of: &#39;</span>, <span style="color:#a6e22e">item</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Which gives us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>Two of:  eggs
</span></span><span style="display:flex;"><span>Two of:  waffles
</span></span></code></pre></div><h3 id="alter-nested-property-values">Alter nested property values</h3>
<p>Say I want to increase the number of fruits in breakfast, because sugar is bad for me and I like things that are bad for me. I can do that like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fruits</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">breakfast</span>[<span style="color:#e6db74">&#39;fruit&#39;</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">f</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">fruits</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fruits</span>[<span style="color:#a6e22e">f</span>] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">fruits</span>);
</span></span></code></pre></div><p>Which gives us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">{</span> blueberries: 6, strawberries: <span style="color:#ae81ff">2</span> <span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="arrays">Arrays</h2>
<p>Given an array of waffles that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wafflesIAte</span> <span style="color:#f92672">=</span> [ <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">11</span> ];
</span></span></code></pre></div><p>Or like this:</p>
<p><img src="iteration-waffles.png" alt="Waffle array."></p>
<h3 id="iterate-through-array-items">Iterate through array items</h3>
<p>We can iterate through each item in the array using a for loop:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">wafflesIAte</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;array index: &#39;</span>, <span style="color:#a6e22e">i</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;item from array: &#39;</span>, <span style="color:#a6e22e">wafflesIAte</span>[<span style="color:#a6e22e">i</span>]);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This produces:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>array index:  <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span>item from array:  <span style="color:#ae81ff">11</span>
</span></span></code></pre></div><p>Some things to remember:
<code>i</code> in the above context is a placeholder; we could substitute anything we like (<code>x</code>, <code>n</code>, <code>underpants</code>, etc). It simply denotes each instance of the iteration.</p>
<p><code>i &lt; wafflesIAte.length</code> tells our for loop to continue as long as <code>i</code> is less than the array&rsquo;s length (in this case, 7).</p>
<p><code>i++</code> is equivalent to <code>i+1</code> and means we&rsquo;re incrementing through our array by one each time. We could also use <code>i+2</code> to proceed with every other item in the array, for example.</p>
<h3 id="access-array-item-by-index">Access array item by index</h3>
<p>We can specify an item in the array using the array index, written as <code>wafflesIAte[i]</code> where <code>i</code> is any index of the array. This gives the item at that location.</p>
<p>Array index always starts with <code>0</code>, which is accessed with <code>wafflesIAte[0]</code>. Using <code>wafflesIAte[1]</code> gives us the second item in the array, which is &ldquo;3&rdquo;.</p>
<h3 id="ways-to-get-mixed-up-over-arrays">Ways to get mixed up over arrays</h3>
<p>Remember that <code>wafflesIAte.length</code> and the index of the last item in the array are different. The former is 7, the latter is <code>6</code>.</p>
<p>When incrementing <code>i</code>, remember that <code>[i+1]</code> and <code>[i]+1</code> are different:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;[i+1] gives next array index: &#39;</span>, <span style="color:#a6e22e">wafflesIAte</span>[<span style="color:#ae81ff">0</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;[i]+1 gives index value + 1: &#39;</span>, <span style="color:#a6e22e">wafflesIAte</span>[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
</span></span></code></pre></div><p>Produces:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">[</span>i+1<span style="color:#f92672">]</span> gives next array index:  <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>+1 gives index value + 1:  <span style="color:#ae81ff">2</span>
</span></span></code></pre></div><h2 id="practice-makes-better">Practice makes&hellip; better</h2>
<p>The more often you code and correct your errors, the better you&rsquo;ll remember it next time!</p>
<p>That&rsquo;s all for now. If you have a correction, best practice, or another common error for me to add, please let me know!</p>
]]></content></entry></feed>