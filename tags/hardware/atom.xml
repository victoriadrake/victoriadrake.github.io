<feed xmlns="http://www.w3.org/2005/Atom"><title>Hardware on victoria.dev</title><link href="https://victoria.dev/tags/hardware/feed.xml" rel="self"/><link href="https://victoria.dev/tags/hardware/"/><updated>2021-08-11T11:37:35+00:00</updated><id>https://victoria.dev/tags/hardware/</id><author><name>Victoria Drake</name><email>hello@victoria.dev</email></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">There are better options for a privacy-respecting phone</title><link href="https://victoria.dev/archive/there-are-better-options-for-a-privacy-respecting-phone/"/><id>https://victoria.dev/archive/there-are-better-options-for-a-privacy-respecting-phone/</id><author><name>Victoria Drake</name></author><published>2021-08-11T11:37:35+00:00</published><updated>2021-08-11T11:37:35+00:00</updated><content type="html"><![CDATA[<p>Whether you think the news of Apple scanning your private devices was a big deal, run-of-the-mill, or something we all should have seen coming, you might be wondering, &ldquo;What now?&rdquo; We know full well that Google is looking at the stuff on your phone too (and Gmail, and&hellip; well, everywhere else) so it’s not like there are other options after Apple&hellip; right?</p>
<p>If a move towards privacy is what we’re after, we know a new off-the-shelf Google phone isn&rsquo;t a better answer &ndash; but there are more options.</p>
<p>If you don&rsquo;t want the details, jump straight to <a href="#the-tldr">The TL;DR</a> at the end.</p>
<h2 id="linux-phones-sort-of">Linux phones (sort of)</h2>
<p>Unless you’re a rather tolerant tech-savvy tinkerer, a Linux phone isn’t one of these options&hellip; yet. I’ve personally been very excited about the bevy of emerging options in this space, from freedom-oriented hardware to fully open source, crowd-developed operating systems.</p>
<p>The current state of these efforts is that this magical mashup just isn’t ready yet. Most Linux phone OS such as Ubuntu Touch, Mobian, Pure OS, etc, are in a &ldquo;mostly working&rdquo; state, with the missing features ranging from &ldquo;lack of reliable push notifications&rdquo; to &ldquo;intermittent Bluetooth connectivity&rdquo; to &ldquo;camera.&rdquo;</p>
<p>If all you need is text messaging and a web browser, yes, you can probably go this route. For most users however, this isn’t going to make daily-driver status.</p>
<p>If a Linux phone would suit you, I recommend getting your hands on a <a href="https://www.pine64.org/pinephone/">PinePhone</a> and running Arch Linux ARM (<a href="https://github.com/dreemurrs-embedded/Pine64-Arch/releases">releases on GitHub</a>) with <a href="https://www.plasma-mobile.org/get/">Plasma Mobile</a>.</p>
<h2 id="de-googled-android">De-googled Android</h2>
<p>For a daily-driver, &ldquo;de-googled&rdquo; Android is your best bet. Android itself (specifically, the Android Open Source Project source code) is based on a modified Linux kernel and is free and open source software. When we typically think of &ldquo;Android phones,&rdquo; we refer to Android devices with Google&rsquo;s proprietary software added to the mix, including Google Play Services. A &ldquo;de-googled&rdquo; Android phone is essentially the Android OS without Google&rsquo;s <del>spyware</del> services included by default.</p>
<p>Keep in mind that this route still involves some DIY. You&rsquo;ll need to install an OS on a device yourself. Don&rsquo;t worry, there are step-by-step guides available &ndash; the most technical thing you&rsquo;ll likely have to do is copy and paste some commands into your terminal.</p>
<p>Free and open source Android OS comes in multiple flavors, and the choice isn&rsquo;t arbitrary. Your selection of a &ldquo;de-googled&rdquo; phone is going to be determined by a couple factors: the hardware device you have or that you want to use, and the apps (software) you want to run on it.</p>
<h3 id="hardware">Hardware</h3>
<p>The phone you may already have (or the one you’re willing to purchase) will influence your choice of operating system (OS).</p>
<h4 id="lineageos">LineageOS</h4>
<p>At the time I’m writing this, if you have an older Pixel or another model of Android phone, your best bet for a hassle-free OS with A-class support will be Lineage. Here’s a link to the <a href="https://wiki.lineageos.org/devices/">LineageOS list of supported devices</a>. Clicking on your device here will get you to some installation instructions for your phone.</p>
<h4 id="grapheneos">GrapheneOS</h4>
<p>If you have a newer Pixel (generation 3 up to the newer 5) then GrapheneOS could be the way to go. <a href="https://grapheneos.org/faq#supported-devices">Here are the devices officially supported by GrapheneOS</a>. They also have <a href="https://grapheneos.org/install/">easy-to-follow installation instructions</a> and help via chat. It is possible to run GrapheneOS on other phones, but not without substantial DIY for which technical knowledge would help.</p>
<p>Generally speaking, GrapheneOS is intended to be a security-hardened operating system targeted at individuals who won&rsquo;t be miffed if there are tradeoffs for mitigating vulnerabilities. If you don&rsquo;t have those requirements or intend to use Google Apps on your phone (see Software), then LineageOS will likely suit you better.</p>
<h4 id="new-phone-who-dis">New phone, who dis?</h4>
<p>If you&rsquo;re looking to purchase a new phone, you have some flexibility. My general recommendation is to pick up last-season&rsquo;s version of the model you want. Not only will this likely be cheaper (and often a great deal if you buy refurbished) but the open source community that develops these operating systems will have had more time to work with the device itself, which could help ensure better compatibility and a smoother set up.</p>
<p>Consider buying a refurbished phone (sometimes called &ldquo;renewed&rdquo;) locally when you can. This can help fund the small businesses that offer them.</p>
<h3 id="software">Software</h3>
<p>What do you <em>need</em> to do on your phone? Privacy and convenience are typically at odds (a far larger topic I won’t dig into right now) so it can help to narrow down the functionality you need. If your needs look something like:</p>
<ul>
<li>Calls and texts</li>
<li>Web browser</li>
<li>Web-based email via browser</li>
</ul>
<p>Then you&rsquo;re good to go, right out of the box, with either LineageOS or GrapheneOS. They&rsquo;ll both include free and open source apps that let you do all these things.</p>
<p>If you want a particular application that doesn&rsquo;t come pre-installed, here&rsquo;s where we get into some nuance. Your choices depend on the level of privacy you&rsquo;d like to maintain. Here are your avenues for installing apps, listed in order of preference.</p>
<h4 id="1-official-apks">1. Official APKs</h4>
<p>Some particularly privacy-focused applications offer an Android Package Kit (APK) that you can download directly in order to install the app. You should only download these when you&rsquo;ve navigated directly to a domain that the organization owns. Here are my favorites:</p>
<ul>
<li><a href="https://signal.org/android/apk/">Signal</a></li>
<li><a href="https://protonapps.com/protonmail-android">ProtonMail</a></li>
</ul>
<p>You can download and install APKs whether you choose LineageOS or GrapheneOS.</p>
<h4 id="2-use-f-droid">2. Use F-Droid</h4>
<p>If you can&rsquo;t find an APK for something you want, search for it on F-Droid.</p>
<p>The <a href="https://f-droid.org/">F-Droid</a> software repository allows you to download and install apps in much the same way that the Google Play store does, with a couple notable differences. All the apps here are free and open source, and no account or profile is required to download them. The F-Droid APK itself can be downloaded and installed from f-droid.org directly on either LineageOS or GrapheneOS.</p>
<p>Just like any open source software, it&rsquo;s up to the user (you) to ensure that you&rsquo;re downloading and installing software you trust. If you want help or advice, F-Droid has a healthy community that you can interact with in lots of ways, including <a href="https://f-droid.org/en/about/">via IRC, Matrix, and the Fediverse</a>.</p>
<p>You can find an app for pretty much anything here: from your general-store type functions such as to-do lists, music players, and maps; to specific niche security applications, and even a tea timer. Here are some well-known choices I can easily recommend:</p>
<ul>
<li><a href="https://f-droid.org/en/packages/com.standardnotes/">Standard Notes</a> (<a href="https://standardnotes.org/">https://standardnotes.org/</a>)</li>
<li><a href="https://f-droid.org/en/packages/im.vector.app/">Element for Matrix</a> (<a href="https://element.io/">https://element.io/</a>)</li>
<li><a href="https://f-droid.org/en/packages/de.tutao.tutanota/">Tutanota</a> (<a href="https://tutanota.com">https://tutanota.com</a>)</li>
</ul>
<h4 id="3-aurora-store">3. Aurora Store</h4>
<p>If you need an app that isn&rsquo;t available on F-Droid, your next stop is the Aurora Store. This is an unofficial client for the Google Play Store that lets you download free applications anonymously, without signing into a Google account. Most applications found in the larger stores can be downloaded this way, without requiring Google&rsquo;s proprietary stuff on your phone.</p>
<p>When loading Aurora Store for the first time, be sure to choose the &ldquo;Anonymous&rdquo; option instead of signing in.</p>
<p>The Aurora Store itself can be <a href="https://f-droid.org/en/packages/com.aurora.store/">installed via F-Droid</a> or <a href="https://auroraoss.com/downloads/AuroraStore/">auroraoss.com</a>. It works on either LineageOS or GrapheneOS &ndash; however, apps that require less private permissions or access will probably work better on LineageOS.</p>
<p>Keep in mind that your phone OS in no way supports these apps directly, or knows what&rsquo;s in them, or what sort of tracking and information exchange they may be up to. It&rsquo;s a slight privacy downgrade, but still better than a fully Google-ified OS.</p>
<h4 id="4-if-you-need-google-apps">4. If you need Google Apps</h4>
<p>If this will be your only phone and you simply must have Google Apps on it (think Google Play Store, Gmail, Calendar, Photos, etc) then go with LineageOS. You can choose to try emulating Google Play Services using <a href="https://lineage.microg.org/">LineageOS for microG</a>, or <a href="https://wiki.lineageos.org/gapps">install the Google Apps add-on</a> when you install LineageOS.</p>
<h2 id="the-tldr">The TL;DR</h2>
<p>Here&rsquo;s the &ldquo;Internet personality quiz&rdquo; version of everything above. You are&hellip;</p>
<ol>
<li><strong>Knowledgeable about Linux;</strong> mostly use a phone for text, calls, and web browser; and potentially want to help develop Linux phone software.
<ul>
<li>Try a Linux phone such as the PinePhone, but consider one of the other options as a back up for when you just need stuff to work.</li>
</ul>
</li>
<li><strong>Security or privacy inclined,</strong> happy to use FOSS apps, or do most things via web browser anyway.
<ul>
<li>Get your hands on a Pixel 3{XL, a, a XL}, Pixel 4{XL, a, a 5G}, or Pixel 5, and use GrapheneOS. <a href="https://grapheneos.org/install/">Installation instructions here</a>.</li>
<li>Optionally, download the <a href="https://f-droid.org/">F-Droid</a> or <a href="https://f-droid.org/en/packages/com.aurora.store/">Aurora Store</a> APKs for apps.</li>
</ul>
</li>
<li><strong>Someone who needs Google Apps to work,</strong> or you want a phone that isn&rsquo;t a Pixel, or you&rsquo;re setting up a device for someone who&rsquo;s fine using Android but needs it to look familiar.
<ul>
<li>Use LineageOS with any of <a href="https://wiki.lineageos.org/devices/">its supported devices</a>. Click on the device name for installation instructions.</li>
<li>If you must have Google Apps and need Google Play Services to work, <a href="https://wiki.lineageos.org/gapps">install the add-on</a> at the same time you install LineageOS.</li>
<li>Optionally, download the <a href="https://f-droid.org/">F-Droid</a> or <a href="https://f-droid.org/en/packages/com.aurora.store/">Aurora Store</a> for installing apps.</li>
</ul>
</li>
</ol>
<p>Whichever route you choose, my advice is to treat this like a learning experiment. You&rsquo;re sort of building your own phone, after all, and gaining all the technological independence that comes with that knowledge. If possible, don&rsquo;t ditch your current phone until you try out one (two?) of these paths. The one you end up liking most could surprise you! It&rsquo;s great to have options.</p>
]]></content></entry><entry><title type="html">How to set up a fresh Ubuntu desktop using only dotfiles and bash scripts</title><link href="https://victoria.dev/archive/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/"/><id>https://victoria.dev/archive/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/</id><author><name>Victoria Drake</name></author><published>2019-08-19T07:58:18-04:00</published><updated>2019-08-19T07:58:18-04:00</updated><content type="html"><![CDATA[<p>One of my most favorite things about open source files on GitHub is the ability to see how others do (what some people might call) mundane things, like set up their <code>.bashrc</code> and other dotfiles. While I&rsquo;m not as enthusiastic about ricing as I was when I first came to the Linux side, I still get pretty excited when I find a config setting that makes things prettier and faster, and thus, better.</p>
<p>I recently came across a few such things, particularly in <a href="https://github.com/tomnomnom">Tom Hudson&rsquo;s</a> dotfiles. Tom seems to like to script things, and some of those things include automatically setting up symlinks, and installing Ubuntu repository applications and other programs. This got me thinking. Could I automate the set up of a new machine to replicate my current one?</p>
<p>Being someone generally inclined to take things apart in order to see how they work, I know I&rsquo;ve messed up my laptop on occasion. (Usually when I&rsquo;m away from home, and my backup hard drive isn&rsquo;t.) On those rare but really inconvenient situations when my computer becomes a shell of its former self, (ba-dum-ching) it&rsquo;d be quite nice to have a fast, simple way of putting Humpty Dumpty back together again, just the way I like.</p>
<p>In contrast to creating a <a href="https://askubuntu.com/questions/19901/how-to-make-a-disk-image-and-restore-from-it-later">disk image and restoring it later</a>, a collection of bash scripts is easier to create, maintain, and move around. They require no special utilities, only an external transportation method. It&rsquo;s like passing along the recipe, instead of the whole bundt cake. (Mmm, cake.)</p>
<p>Additionally, functionality like this would be super useful when setting up a virtual machine, or VM, or even just a virtual private server, or VPS. (Both of which, now that I write this, would probably make more forgiving targets for my more destructive experiments&hellip; live and learn!)</p>
<p>Well, after some grepping and Googling and digging around, I now have a suite of scripts that can do this:</p>
<video controls="controls" poster="cover.jpg">
    <source src="setup.mp4" type="video/mp4" />
</video>
<p>This is the tail end of a test run of the set up scripts on a fresh Ubuntu desktop, loaded off a bootable USB. It had all my programs and settings restored in under three minutes!</p>
<p>This post will cover how to achieve the automatic set up of a computer running Ubuntu Desktop using bash scripts. This exact process was last used on Ubuntu 19.10; see my <a href="https://github.com/victoriadrake/dotfiles">dotfiles master branch</a> for the latest configuration. The majority of the information covered is applicable to all the Linux desktop flavours, though some syntax may differ. The bash scripts cover three main areas: linking dotfiles, installing software from Ubuntu and elsewhere, and setting up the desktop environment. We&rsquo;ll cover each of these areas and go over the important bits so that you can begin to craft your own scripts.</p>
<h2 id="dotfiles">Dotfiles</h2>
<p>Dotfiles are what most Linux enthusiasts call configuration files. They typically live in the user&rsquo;s home directory (denoted in bash scripts with the <a href="https://www.tldp.org/LDP/abs/html/internal.html#BUILTINREF">builtin</a> variable <code>$HOME</code>) and control the appearance and behavior of all kinds of programs. The file names begin with <code>.</code>, which denotes hidden files in Linux (hence &ldquo;dot&rdquo; files). Here are some common dotfiles and ways in which they&rsquo;re useful.</p>
<h3 id="bashrc"><code>.bashrc</code></h3>
<p>The <code>.bashrc</code> file is a list of commands executed at startup by interactive, non-login shells. <a href="https://www.tldp.org/LDP/abs/html/intandnonint.html">Interactive vs non-interactive shells</a> can be a little confusing, but aren&rsquo;t necessary for us to worry about here. For our purposes, any time you open a new terminal, see a prompt, and can type commands into it, your <code>.bashrc</code> was executed.</p>
<p>Lines in this file can help improve your workflow by creating aliases that reduce keystrokes, or by displaying a helpful prompt with useful information. It can even run user-created programs, like <a href="https://github.com/victoriadrake/eddie-terminal">Eddie</a>. For more ideas, you can have a look at <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/.bashrc">my <code>.bashrc</code> file on GitHub</a>.</p>
<h3 id="vimrc"><code>.vimrc</code></h3>
<p>The <code>.vimrc</code> dotfile configures the champion of all text editors, <a href="https://www.vim.org/about.php">Vim</a>. (If you haven&rsquo;t yet wielded the powers of the keyboard shortcuts, I highly recommend <a href="https://vim-adventures.com/">a fun game to learn Vim with</a>.)</p>
<p>In <code>.vimrc</code>, we can set editor preferences such as display settings, colours, and custom keyboard shortcuts. You can take a look at <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/.vimrc">my <code>.vimrc</code> on GitHub</a>.</p>
<p>Other dotfiles may be useful depending on the programs you use, such as <code>.gitconfig</code> or <code>.tmux.conf</code>. Exploring dotfiles on GitHub is a great way to get a sense of what&rsquo;s available and useful to you!</p>
<h2 id="linking-dotfiles">Linking dotfiles</h2>
<p>We can use a script to create symbolic links, or <a href="https://en.wikipedia.org/wiki/Symbolic_link#POSIX_and_Unix-like_operating_systems">symlinks</a> for all our dotfiles. This allows us to keep all the files in a central repository, where they can easily be managed, while also providing a sort of placeholder in the spot that our programs expect the configuration file to be found. This is typically, but not always, the user home directory. For example, since I store my dotfiles on GitHub, I keep them in a directory with a path like <code>~/github/dotfiles/</code> while the files themselves are symlinked, resulting in a path like <code>~/.vimrc</code>.</p>
<p>To programmatically check for and handle any existing files and symlinks, then create new ones, we can use <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/scripts/symlink.sh">this elegant shell script</a>. I compliment it only because I blatantly stole the core of it from <a href="https://github.com/tomnomnom/dotfiles/blob/master/setup.sh">Tom&rsquo;s setup script</a>, so I can&rsquo;t take the credit for how lovely it is.</p>
<p>The <code>symlink.sh</code> script works by attempting to create symlinks for each dotfile in our <code>$HOME</code>. It first checks to see if a symlink already exists, or if a regular file or directory with the same name exists. In the former case, the symlink is removed and remade; in the latter, the file or directory is renamed, then the symlink is made.</p>
<h2 id="installing-software">Installing software</h2>
<p>One of the beautiful things about exploring shell scripts is discovering how much can be achieved using only the command line. As someone whose first exposure to computers was through a graphical operating system, I find working in the terminal to be refreshingly fast.</p>
<p>With Ubuntu, most programs we likely require are available through the default Ubuntu software repositories. We typically search for these with the command <code>apt search &lt;program&gt;</code> and install them with <code>sudo apt install &lt;program&gt;</code>. Some software we&rsquo;d like may not be in the default repositories, or may not be offered there in the most current version. In these cases, we can still install these programs in Ubuntu using a <a href="https://en.wikipedia.org/wiki/Ubuntu#Package_Archives">PPA, or Personal Package Archive</a>. We&rsquo;ll just have to be careful that the PPAs we choose are from the official sources.</p>
<p>If a program we&rsquo;d like doesn&rsquo;t appear in the default repositories or doesn&rsquo;t seem to have a PPA, we may still be able to install it via command line. A quick search for &ldquo;<program> installation command line&rdquo; should get some answers.</p>
<p>Since bash scripts are just a collection of commands that we could run individually in the terminal, creating a script to install all our desired programs is as straightforward as putting all the commands into a script file. I chose to organize my installation scripts between the default repositories, which are installed by <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/scripts/aptinstall.sh">my <code>aptinstall.sh</code> script</a>, and programs that involve external sources, handled with <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/scripts/programs.sh">my <code>programs.sh</code> script</a>.</p>
<h2 id="setting-up-the-desktop-environment">Setting up the desktop environment</h2>
<p>On the recent occasions when I&rsquo;ve gotten a fresh desktop (intentionally or otherwise) I always seem to forget how long it takes to remember, find, and then change all the desktop environment settings. Keyboard shortcuts, workspaces, sound settings, night mode&hellip; it adds up!</p>
<p>Thankfully, all these settings have to be stored somewhere in a non-graphical format, which means that if we can discover how that&rsquo;s done, we can likely find a way to easily manipulate the settings with a bash script. Lo and behold the terminal command, <code>gsettings list-recursively</code>.</p>
<p>There are a heck of a lot of settings for GNOME desktop environment. We can make the list easier to scroll through (if, like me, you&rsquo;re sometimes the type of person to say &ldquo;Just let me look at everything and figure out what I want!&rdquo;) by piping to <code>less</code>: <code>gsettings list-recursively | less</code>. Alternatively, if we have an inkling as to what we might be looking for, we can use <code>grep</code>: <code>gsettings list-recursively | grep 'keyboard'</code>.</p>
<p>We can manipulate our settings with the <code>gsettings set</code> command. It can sometimes be difficult to find the syntax for the setting we want, so when we&rsquo;re first building our script, I recommend using the GUI to make the changes, then finding the <code>gsettings</code> line we changed and recording its value.</p>
<p>For some inspiration, you can view <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/scripts/desktop.sh">my <code>desktop.sh</code> settings script on GitHub</a>.</p>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>Having modular scripts (one for symlinks, two for installing programs, another for desktop settings) is useful for both keeping things organized and for being able to run some but not all of the automated set up. For instance, if I were to set up a VPS in which I only use the command line, I wouldn&rsquo;t need to bother with installing graphical programs or desktop settings.</p>
<p>In cases where I do want to run all the scripts, however, doing so one-by-one is a little tedious. Thankfully, since bash scripts can themselves be run by terminal commands, we can simply write another master script to run them all!</p>
<p>Here&rsquo;s my master script to handle the set up of a new Ubuntu desktop machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>./symlink.sh
</span></span><span style="display:flex;"><span>./aptinstall.sh
</span></span><span style="display:flex;"><span>./programs.sh
</span></span><span style="display:flex;"><span>./desktop.sh
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Get all upgrades</span>
</span></span><span style="display:flex;"><span>sudo apt upgrade -y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## See our bash changes</span>
</span></span><span style="display:flex;"><span>source ~/.bashrc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Fun hello</span>
</span></span><span style="display:flex;"><span>figlet <span style="color:#e6db74">&#34;... and we&#39;re back!&#34;</span> | lolcat
</span></span></code></pre></div><p>I threw in the upgrade line for good measure. It will make sure that the programs installed on our fresh desktop have the latest updates. Now a simple, single bash command will take care of everything!</p>
<p>You may have noticed that, while our desktop now looks and runs familiarly, these scripts don&rsquo;t cover one very important area: our files. Hopefully, you have a back up method for those that involves some form of reliable external hardware. If not, and if you tend to put your work in external repository hosts like GitHub or GitLab, I do have a way to <a href="/posts/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/">automatically clone and back up your GitHub repositories with bash one-liners</a>.</p>
<p>Relying on external repository hosts doesn&rsquo;t offer 100% coverage, however. Files that you wouldn&rsquo;t put in an externally hosted repository (private or otherwise) consequently can&rsquo;t be pulled. Git ignored objects that can&rsquo;t be generated from included files, like private keys and secrets, will not be recreated. Those files, however, are likely small enough that you could fit a whole bunch on a couple encrypted USB flash drives (and if you don&rsquo;t have private key backups, maybe you ought to do that first?).</p>
<p>That said, I hope this post has given you at least some inspiration as to how dotfiles and bash scripts can help to automate setting up a fresh desktop. If you come up with some settings you find useful, please help others discover them by sharing your dotfiles, too!</p>
]]></content></entry></feed>