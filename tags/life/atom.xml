<feed xmlns="http://www.w3.org/2005/Atom"><title>Life on victoria.dev</title><link href="https://victoria.dev/tags/life/feed.xml" rel="self"/><link href="https://victoria.dev/tags/life/"/><updated>2021-10-25T12:17:32+00:00</updated><id>https://victoria.dev/tags/life/</id><author><name>Victoria Drake</name><email>hello@victoria.dev</email></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">My paper to-do strategy</title><link href="https://victoria.dev/posts/my-paper-to-do-strategy/"/><id>https://victoria.dev/posts/my-paper-to-do-strategy/</id><author><name>Victoria Drake</name></author><published>2021-10-25T12:17:32+00:00</published><updated>2021-10-25T12:17:32+00:00</updated><content type="html"><![CDATA[<p>Coding up a to-do app may be the Hello, World of every framework, but when it comes to actually tracking tasks effectively (knock &rsquo;em out not stack &rsquo;em up) there&rsquo;s no app that keeps things front of mind better than an open notebook on your desk.</p>
<p>Here&rsquo;s my stupid-simple strategy for tracking and checking off my to-do list.</p>
<h2 id="one-page-at-a-time">One page at a time</h2>
<p>Plenty of methodologies recommend using sections or different pages of your book for monthly, weekly, and daily views; others advocate for creating sections for each category, such as &ldquo;Home Tasks&rdquo; and &ldquo;Work Tasks&rdquo; and other such time-wasters. All of this is unnecessary.</p>
<p>A to-do list works because it&rsquo;s in your face and hard to miss. When you write things down on different pages, they become easy to miss. Don&rsquo;t do that.</p>
<p>Use one page at a time. Write down one task under another. Don&rsquo;t sort them, prioritize them (yet), or categorize anything. Just write them down on the current page, where you&rsquo;re guaranteed to look when you lay eyes on your notebook next.</p>
<h2 id="intuitive-notation">Intuitive notation</h2>
<p>I use my notebook for two things: short notes (just a bit of information &ndash; nothing to do) and tasks (something to do). This translates to a notation system of three possible states:</p>
<ul>
<li>It&rsquo;s a note, indicated with a bullet point</li>
<li>It&rsquo;s a new task, indicated with a checkbox</li>
<li>It&rsquo;s a completed task, with the checkbox checked and the line struck out (because strike-throughs are <em>satisfying</em>)</li>
</ul>
<p><img src="a9ccelphZv.jpeg" alt="A picture of my task list"></p>
<p>I use a checkbox to distinguish tasks from notes because I&rsquo;m an old-school HTML fan, but you do you.</p>
<p>You may like to add your own embellishments to this: I sometimes denote an urgent item with an asterisk. You might like to use a color pen or highlighter (avoid the bullet journal rabbit hole &ndash; another time-waster). Just keep it simple, repeatable, and intuitive.</p>
<h2 id="when-its-time-to-turn-the-page">When it&rsquo;s time to turn the page</h2>
<p>When life gets busy, you might fill up a page pretty quickly. If one or two tasks haven&rsquo;t yet been crossed off, they&rsquo;re liable to be forgotten. You can avoid this by carrying tasks over to the next page.</p>
<p>It&rsquo;s straightforward: cross out the task on the page that&rsquo;s filled up. Turn the page and write it down there again.</p>
<p><em>That&rsquo;s silly,</em> you might say, <em>that&rsquo;s a waste of energy! By the time I write it down all over again, I could&rsquo;ve done half of it already.</em></p>
<p>&hellip;</p>
<p>I&rsquo;ll wait.</p>
<p>&hellip;</p>
<p>The clever bit about carrying a task over is taking the opportunity to evaluate it. If the task is really a five-minute thing, more often than not, I go ahead and take care of it right there and then. If it&rsquo;s a longer endeavor, the friction of writing it down again gives me the chance to answer the question of whether it&rsquo;s something I feel strongly about doing (and hence whether it&rsquo;s really important that I do it at all). It might not be, and that&rsquo;s fine. I cross it out and don&rsquo;t do it. If it is an important task, carrying it over means it remains front of mind until I can make the time to get it done.</p>
<h2 id="time-well-spent-doing">Time well spent doing</h2>
<p>I&rsquo;ve explored a myriad of task list apps, pre-printed to-do lists and journals, and all kinds of digital notes for tracking work. I consistently keep returning to the feel of pen on paper and an open notebook on my desk. Why? Minimal cognitive load.</p>
<p>No time spent categorizing and labeling tasks in a complicated system. No time spent remembering how to open that app, where you stored that <code>todo.txt</code> file, or deciding whether to write something down under your weekly or daily plan. No tasks lost in an invisible backlog that grows over the years, becoming more and more infeasible.</p>
<p>Just pen and paper, one page at a time, and the satisfaction of getting things done.</p>
]]></content></entry><entry><title type="html">Digital resilience: redundancy for websites and communications</title><link href="https://victoria.dev/posts/digital-resilience-redundancy-for-websites-and-communications/"/><id>https://victoria.dev/posts/digital-resilience-redundancy-for-websites-and-communications/</id><author><name>Victoria Drake</name></author><published>2021-02-22T04:00:43-05:00</published><updated>2021-02-22T04:00:43-05:00</updated><content type="html"><![CDATA[<p>When what seems like half the planet noped out of WhatsApp after its terms of service update, applications like <a href="https://signal.org/download/">Signal</a> (which I highly recommend) saw an unprecedented increase in user traffic. Signal had so many new users sign up that it overwhelmed their existing infrastructure and lead to a 24-hour-ish outage.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Signal is experiencing technical difficulties. We are working hard to restore service as quickly as possible.</p>&mdash; Signal (@signalapp) <a href="https://twitter.com/signalapp/status/1350118809860886528?ref_src=twsrc%5Etfw">January 15, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>The small team responded impressively quickly, especially given that a <a href="https://www.businessinsider.com/whatsapp-facebook-data-signal-download-telegram-encrypted-messaging-2021-1">4,200% spike</a> in new users was utterly implausible before it occurred.</p>
<p>The downside of so many people moving onto this fantastic application is that it caused a brief outage. If you rely solely on a certain application for your communications, brief outages can be debilitating. Even when it seems implausible that your favorite chat, email, or website service could just &ndash; <em>poof</em> &ndash; vanish overnight, recent events have proved it isn&rsquo;t impossible.</p>
<p>Have a backup plan. Have several. Here&rsquo;s how you can improve your digital resiliency for things like websites, messaging, and email.</p>
<h2 id="messaging">Messaging</h2>
<p>I recommend Signal because it is open source, end-to-end encrypted, cross-platform, and offers text, voice, video, and group chat. It&rsquo;s usually very reliable; however, strange things can happen.</p>
<p>It&rsquo;s important to set up a backup plan ahead of any service outages with the people you communicate with the most. Have an agreement for a secondary method of messaging &ndash; ideally another end-to-end encrypted service. Avoid falling back on insecure communications like SMS and social media messaging. Here&rsquo;s a short list for you to explore:</p>
<ul>
<li><a href="https://signal.org/">Signal</a></li>
<li><a href="https://wire.com/">Wire</a></li>
<li><a href="https://getsession.org/">Session</a></li>
</ul>
<p>If you&rsquo;re particularly technically inclined, you can <a href="/blog/create-a-self-hosted-chat-service-with-your-own-matrix-server/">set up your own self-hosted chat service with Matrix</a>.</p>
<p>Having a go-to plan B can help bring peace of mind and ensure you&rsquo;re still able to communicate when strange things happen.</p>
<h2 id="cloud-contacts">Cloud contacts</h2>
<p>Do you know the phone numbers of your closest contacts? While memorizing them might not be practical, storing them solely online is an unnecessary risk. Most services allow you to export your contacts to vCard or CSV format.</p>
<p>I recommend keeping your contacts locally on your device whenever you can. This ensures you still know how to contact people if your cloud provider is unavailable, or if you don&rsquo;t have Internet access.</p>
<p>Full analog redundancy is also possible here. Remember that paper stuff? Write down the phone numbers of your most important contacts so you can access them if your devices run out of battery or otherwise can&rsquo;t turn on (drop your phone much?).</p>
<h2 id="local-email-synchronization">Local email synchronization</h2>
<p>If your email service exists solely online, there&rsquo;s a big email-shaped hole in your life. If you can&rsquo;t log in to your email for any reason &ndash; an outage on their end, a billing error, or your Internet is down &ndash; you&rsquo;ll have no way to access your messages for however long your exile lasts. If you think about all the things you do via email in a day, I think the appropriate reaction to not having local copies is 🤦.</p>
<p>Download an open source email client like <a href="https://www.thunderbird.net/">Thunderbird</a>. Follow <a href="https://support.mozilla.org/en-US/products/thunderbird/download-install-and-migration">instructions to install Thunderbird</a> and set it up with your existing online email service. Your online service provider may have a help document that shows you how to set up Thunderbird.</p>
<p>You can maximize your privacy by <a href="https://support.mozilla.org/kb/thunderbird-telemetry">turning off Thunderbird&rsquo;s telemetry</a>.</p>
<p>To ensure that Thunderbird downloads your email messages and stores them locally on your machine:</p>
<ol>
<li>Click the &ldquo;hamburger&rdquo; overflow menu and go to <strong>Account Settings</strong></li>
<li>Choose <strong>Synchronization &amp; Storage</strong> in the sidebar</li>
<li>Ensure that under <strong>Message Synchronizing,</strong> the checkbox for <strong>Keep messages in all folders for this account on this computer</strong> is checked.</li>
</ol>
<p>You may need to visit each of your folders in order to trigger the initial download.</p>
<p>Some other settings you may want to update:</p>
<ol>
<li>Choose <strong>Composition &amp; Addressing</strong> and uncheck the box next to <strong>Compose messages in HTML format</strong> to send plaintext emails instead.</li>
<li>Under <strong>Return Receipts</strong> choose <strong>Global Preferences.</strong> Select the radio button for <strong>Never send a return receipt.</strong></li>
</ol>
<p>You don&rsquo;t need to start using Thunderbird for all your email tasks. Just make sure you open it up regularly so that your messages sync and download to your machine.</p>
<h2 id="websites">Websites</h2>
<p>I strongly believe you should have <a href="/posts/make-your-own-independent-website/">your own independent website</a> for reasons that go beyond redundancy. To truly make your site resilient, it&rsquo;s important to have your own domain.</p>
<p>If you know that my website is at the address <code>victoria.dev</code>, for example, it doesn&rsquo;t matter whether I&rsquo;m hosting it on GitHub Pages, AWS, Wordpress, or from a server in my basement. If my hosting provider becomes unavailable, my website won&rsquo;t go down with it. Getting back up and running would be as simple as updating my DNS configuration to point to a new host.</p>
<p>Price is hardly an excuse, either. You can buy a domain for <a href="https://www.jdoqocy.com/click-100268310-14326263" target="_blank" rel="noopener noreferrer">less than a cup of coffee</a>
 with my Namecheap affiliate link (thanks!). Namecheap also handles <a href="https://www.namecheap.com/support/knowledgebase/article.aspx/767/10/how-to-change-dns-for-a-domain/">your DNS settings</a>, so it&rsquo;s a one-stop shop.</p>
<p>With your own domain, you can build resiliency for your email address as well. Learn how to set up your custom domain with your email provider. If you need to switch providers in the future, your email address ports to the new service with you. Here are a few quick links for providers I&rsquo;d recommend:</p>
<ul>
<li><a href="https://proton.me/support/custom-domain">ProtonMail: How to use a custom domain with Proton Mail</a></li>
<li><a href="https://tutanota.com/howto/#custom-domain">Tutanota: Adding of custom email domains</a></li>
<li><a href="https://www.fastmail.help/hc/en-us/articles/360058753394-Custom-Domains-with-Fastmail">Fastmail: Custom Domains with Fastmail</a></li>
</ul>
<h2 id="build-your-digital-resiliency">Build your digital resiliency</h2>
<p>I hope you&rsquo;ve found this article useful on your path to building digital resiliency. If you&rsquo;re interested in more privacy topics, you might like to learn about great <a href="/blog/outsourcing-security-with-1password-authy-and-privacy.com/">apps for outsourcing security</a>.</p>
<p>If your threat model includes anonymity or censorship, building digital resiliency is just a first step. The rest is outside the scope of my blog, but here are a few great resources I&rsquo;ve come across:</p>
<ul>
<li><a href="https://www.torproject.org/">Tor Browser</a></li>
<li><a href="https://inteltechniques.com/index.html">IntelTechniques</a></li>
<li><a href="https://cantcancel.me/">Can&rsquo;t Cancel Me</a></li>
<li><a href="https://tails.boum.org/">Tails portable OS</a></li>
</ul>
]]></content></entry><entry><title type="html">Make your own independent website</title><link href="https://victoria.dev/posts/make-your-own-independent-website/"/><id>https://victoria.dev/posts/make-your-own-independent-website/</id><author><name>Victoria Drake</name></author><published>2021-01-16T08:41:27-05:00</published><updated>2021-01-16T08:41:27-05:00</updated><content type="html"><![CDATA[<p>The web that raised me was a digital playground in the truest sense. It was made up of HTML experiments frankensteined together by people still figuring it all out.</p>
<p>The beauty of not completely knowing what you&rsquo;re doing is a lack of premature judgement. Without a standard to rise to, you&rsquo;re free to go sideways. Explore. Try things that don&rsquo;t work, without any expectation they <em>will</em> work. An open world with a beginner&rsquo;s mindset.</p>
<p>The web that raised me was a little broken. Things didn&rsquo;t always display the way they were supposed to. That too is part of the beauty. It was just broken enough to make you think for yourself.</p>
<p>1991 was the year of the individual on the web, the <a href="https://en.wikipedia.org/wiki/History_of_the_World_Wide_Web" target="_blank" rel="noopener noreferrer">first year</a>
 any layperson could open a web browser and access the new hypermedia dimension. There were no go-to, search-suggested, centralized websites. There were newsgroups. You had what you made and what your meatspace contacts sent you. In 2021, I think we need a return to that level of individualism. We need to make 2021 the year of the independent web.</p>
<p>That&rsquo;s not to say I think the massive monopolistic platforms are going anywhere. Twitter, Facebook, mainstream &ldquo;news&rdquo; media sites &ndash; they&rsquo;re all a kind of utility now, like plumbing and electricity. They&rsquo;ll find their place in regulation and history. But they are not <em>your website.</em></p>
<p>Your website is the one you create. Where the content, top-to-bottom, is yours alone to shape and present as you please. Your website is your place of self-expression, without follower counts or statistics to game. Your website is for creation, not reaction.</p>
<p>It&rsquo;s all yours, but it doesn&rsquo;t have to seem lonely. Your site can interact with the entire online world through syndication and protocols made possible by this thing we call the Internet. See:</p>
<ul>
<li><a href="https://indieweb.org/POSSE" target="_blank" rel="noopener noreferrer">IndieWeb</a>
 for POSSE, an abbreviation for Publish (on your) Own Site, Syndicate Elsewhere</li>
<li><a href="https://www.w3.org/TR/2017/REC-webmention-20170112/" target="_blank" rel="noopener noreferrer">Webmention</a>
 and <a href="https://github.com/aaronpk/webmention.io" target="_blank" rel="noopener noreferrer">an easy way to implement them</a>
</li>
<li><a href="https://github.com/buckket/twtxt" target="_blank" rel="noopener noreferrer">twtxt</a>
 instances for a decentralized timeline experience</li>
<li><a href="https://neofeed.dev/" target="_blank" rel="noopener noreferrer">Neofeed</a>
, my personal timeline project made for <a href="https://neocities.org/" target="_blank" rel="noopener noreferrer">Neocities</a>
. (It&rsquo;s open source and <a href="https://github.com/victoriadrake/neocities-neofeed" target="_blank" rel="noopener noreferrer">you can help me extend it!</a>
)</li>
</ul>
<p>Your website is your beginning point. The one source of truth for your identity online, from which you can generate and distribute disposable copies to any platform you please. This is what it means to truly own your content. And on the Internet, your content is you.</p>
<p>This is my website. When I first created it, I did so for myself. I had no expectation of visitors. I just knew I&rsquo;d rather have these thoughts and things I&rsquo;ve learned here, out here, made indelible in the folds of the public Internet, instead of on some dark corner of my machine, to be lost forever once I am.</p>
<p>Make your own website. You&rsquo;ll grow your own sense of well-deserved accomplishment and contribute to your independence on the web. You&rsquo;ll learn by doing, by scratching your own itch.</p>
<p>Learn about web technologies. Use them as you would if you were a child holding a pencil or paintbrush for the first time. Experiment, with no expectations other than discovering what you can do to make it delight you.</p>
<hr>
<p>These sites and articles inspired this post and helped me implement webmentions!</p>
<ul>
<li><a href="https://dangillmor.com/2014/04/25/indie-web-important/" target="_blank" rel="noopener noreferrer">Why the Indie Web movement is so important, Dan Gillmor</a>
</li>
<li><a href="https://www.jvt.me/" target="_blank" rel="noopener noreferrer">Jamie Tanna</a>
</li>
<li><a href="https://mxb.dev/blog/" target="_blank" rel="noopener noreferrer">Max Böck</a>
</li>
<li><a href="https://paulrobertlloyd.com/" target="_blank" rel="noopener noreferrer">Paul Robert Lloyd</a>
</li>
<li><a href="https://adhoc.systems/notes" target="_blank" rel="noopener noreferrer">Zachary Dunn</a>
</li>
<li><a href="https://anaulin.org/blog/adding-webmentions/" target="_blank" rel="noopener noreferrer">Adding Webmentions to My Static Hugo Site, Ana Ulin</a>
</li>
<li><a href="https://keithjgrant.com/posts/2019/02/adding-webmention-support-to-a-static-site/" target="_blank" rel="noopener noreferrer">Adding Webmention Support to a Static Site, Keith J Grant</a>
</li>
<li><a href="https://webmention.rocks/" target="_blank" rel="noopener noreferrer">Webmention.rocks</a>
</li>
</ul>
]]></content></entry><entry><title type="html">How to get hired as a software developer</title><link href="https://victoria.dev/posts/how-to-get-hired-as-a-software-developer/"/><id>https://victoria.dev/posts/how-to-get-hired-as-a-software-developer/</id><author><name>Victoria Drake</name></author><published>2021-01-12T05:50:53-05:00</published><updated>2021-01-12T05:50:53-05:00</updated><content type="html"><![CDATA[<p>I&rsquo;m asked this question a lot, so let me be the first to give you the good news: there&rsquo;s no one right answer. As general tech-literacy increases, the culture of the coding industry is steadily, thankfully, moving away from a checklist approach. Instead of degrees and pre-requisites when it comes to deciding whether you&rsquo;re qualified to be hired as a software developer, companies (including my own) are far more concerned with just one question. <strong>What can you do?</strong></p>
<p>There are some general best practices that will make you a far more attractive hire than the majority of applicants, and I&rsquo;ll discuss those in this post. For the most part, however, demonstrating what you&rsquo;re capable of is the best way to increase your chances of getting to the interview and beyond. Here&rsquo;s how to get hired as a software developer.</p>
<h2 id="first-build-projects">First, build projects</h2>
<p>Companies who are primarily focused on getting products built want to see that you&rsquo;ve built products. They don&rsquo;t need to be flashy or for-profit, but they do need to work. I&rsquo;m far more likely to consider a candidate with a colorful bouquet of working code in their GitHub or GitLab or CodePen portfolio. Here are some basic ideas to get you started:</p>
<ul>
<li>Command line utilities that help with tedious tasks, like <a href="/blog/batch-renaming-images-including-image-resolution-with-awk/">renaming image files</a></li>
<li><a href="/blog/hugo-vs-jekyll-an-epic-battle-of-static-site-generator-themes/">Themes</a> for static site generators like Hugo or Jekyll</li>
<li>Automation tools, such as for <a href="/posts/go-automate-your-github-profile-readme/">GitHub Actions</a></li>
</ul>
<p>The best projects you could showcase are ones directly related to the specialty you want to apply for. Show that you have competency with the fundamentals. For instance, if you see yourself focusing on front end, demonstrate that you can build interactive web pages with no fancier tools than HTML, CSS, and vanilla JS. For back end focused developers, show that you know how to create a fundamental tool like an API for a service on a local server. Want to be well-rounded? Create an API with a web page UI.</p>
<p>Spend some time creating a good README. Use screenshots, highlight code snippets, include well-written instructions for local set up. Show that you care about and fully understand your own work.</p>
<p>Explore specific frameworks and libraries if they interest you, but keep in mind that those won&rsquo;t be interesting to a company unless the company already wants to use that framework.</p>
<p>You maximize your chances of getting hired by demonstrating that you already have the ability to learn on your own, build, and then present projects to the world. Out of everything else in this article, this is the one fundamental trait that a company won&rsquo;t want to have to teach you.</p>
<h2 id="next-stand-out">Next, stand out</h2>
<p>Familiarity with the following topics, along with demonstrating that understanding in your own code, will put you miles ahead of most applicants.</p>
<h3 id="reusable-code">Reusable code</h3>
<p>Companies that build products are concerned with getting the most bang for their buck. This is the same idea as wanting to save yourself time when you&rsquo;re creating something individually. If you put a week of effort into building something, it would be nice if you could keep easily using it for a long time afterwards. How can you maximize the return on your efforts?</p>
<p>Be familiar with DRY code. Avoid creating highly customized pieces that only fit a particular use case, peppered with hard-coded variables and dependent on a particular input structure. Avoid writing code that is hard to update in the future. Recognize when you&rsquo;re writing a script or library that could apply in many different situations, and understand how to turn it into a reusable module.</p>
<h3 id="types-and-mutability">Types and mutability</h3>
<p>Besides building projects, debugging them can be a company&rsquo;s most expensive task. It takes a lot of time to hunt down and fix bugs, but you can help reduce that cost by understanding the subtler ways that a lot of bugs occur. Understanding types and mutability &ndash; whether and how an object can be changed &ndash; can help open the door to even greater technical proficiency.</p>
<p>Get familiar with at least one type system. If there&rsquo;s a linter available for your language, use it. Understand how immutable and mutable objects work in the language you use. Be able to describe specific use cases for either one. Understand at a general level how mutability impacts system resources, the difference between referencing and copying, and what it means to be thread-safe.</p>
<h3 id="follow-on-effects">Follow-on effects</h3>
<p>Keep in mind that organizations are made up of people. When you work together with colleagues, your work has an effect on someone else&rsquo;s. Being aware of these effects and demonstrating conscientiousness in this area will help show potential employers that you&rsquo;d benefit the team as a whole.</p>
<p>Consider the second and third-order effects of code you write. Avoid writing code that will unnecessarily slow down a larger system. Understand what blocking means and how to use concurrency or parallelism in your project. Include your thoughts on follow-on effects in your READMEs. Show that you always have the larger project, effort, costs, or organization in mind.</p>
<h2 id="other-nice-to-haves">Other nice-to-haves</h2>
<p>If you&rsquo;ve fully taken advantage of the points above, you&rsquo;re most of the way to getting hired already. Seal the deal with these easy wins.</p>
<h3 id="be-a-friendly-open-source-participant">Be a friendly open source participant</h3>
<p>There&rsquo;s no better way to show a potential employer you can work well on a team than by providing plenty of examples. Get involved with open source projects, contribute features and fixes, and interact with contributors and maintainers. Create a real-life simulation for your future colleagues that leaves no doubt about what you&rsquo;d be like to work with. The further back this history goes, the better, so start right away.</p>
<h3 id="communicate-with-care">Communicate with care</h3>
<p>If you&rsquo;re participating in open source or working remotely, most of your communication with your colleagues is going to take place online in text. Without facial expressions, tone or inflection, this form of communication leaves a lot to be desired. Some extra care on your part can help make sure your message always comes across as intended.</p>
<p>Get into a habit of drafting most everything you write, especially for long-form communication. Putting yourself in the mindset of creating a draft first lets you take all the time you need to craft your message. You can make sure you&rsquo;re choosing appropriate words and coming across with the emotions you intend to convey. Feeling hurried? Remember the golden rule of online communication: you <em>never</em> need to reply right away. Take a breath, then take your time.</p>
<h2 id="finally-use-your-imagination">Finally, use your imagination</h2>
<p>Software developers are creative people by necessity. Before you can write code, build a project, or design a page, you first have to be able to imagine it! So put that skill to good use.</p>
<p>In every application, every email, every chat message with your potential employer, imagine yourself in their position. What do they care about right now? What current goals does the company have? What information about yourself can you share that would make them feel comfortable hiring you?</p>
<p>Take your best guess, and then ask if you got it right. &ldquo;I think the company is looking for someone to [insert guess here], is that accurate?&rdquo; Show that you have both the capability to anticipate future needs and the desire to identify and solve them.</p>
<h2 id="get-yourself-hired">Get yourself hired</h2>
<p>Admittedly, this post is my own wishlist. Good candidates for software development positions are hard to come by, and people who can rightly say they do everything above are rare. I don&rsquo;t think the discrepancy is due to a lack of ability; perhaps just a lack of information.</p>
<p>I&rsquo;ve seen both sides of the virtual interview table, and this post is a result of me figuring things out the long and circuitous way. I hope this helps you to take a more direct route to getting yourself hired as a software developer.</p>
]]></content></entry><entry><title type="html">How to become a software developer</title><link href="https://victoria.dev/archive/how-to-become-a-software-developer/"/><id>https://victoria.dev/archive/how-to-become-a-software-developer/</id><author><name>Victoria Drake</name></author><published>2021-01-05T04:50:07-06:00</published><updated>2021-01-05T04:50:07-06:00</updated><content type="html"><![CDATA[<p>As a Director of Engineering, I’m a software developer who hires and leads other software developers. It’s not surprising then that I get asked this question a lot, in various forms:</p>
<ul>
<li><em>How do I become a software developer?</em></li>
<li><em>What language or framework should I learn first?</em></li>
<li><em>Where do I start?</em></li>
</ul>
<p>While I’m certain there’s no one right answer for everyone, I’m also certain that the world needs more software developers and systems thinkers.</p>
<p>The best thing I can do to help you lead yourself, learn to code, and become a software developer is to share the most efficient parts of how I did it myself. This is the article I wish I had read when I started coding.</p>
<h2 id="depth-matters">Depth matters</h2>
<p><img src="depth.png" alt="Comic of an iceberg with &ldquo;Enough to build a web app&rdquo; on top and &ldquo;The really interesting stuff&rdquo; on the bottom."></p>
<p>Software is exceedingly complex. Like a good novel that you wish you’d never finish reading, there’s always more to discover and learn. If you don’t want to miss the best parts, don’t be satisfied with surface-level explanations. Always go deeper! Ask why, why, and why again until you get to the fundamentals. Soon enough, you’ll start to see patterns.</p>
<p>By digging deeper, you’ll begin to understand the fundamentals of how things connect, what makes things “fast,” and facets of software operation that you probably can’t even imagine exist. It’s like peeking behind the curtain and seeing a whole world of systems and processes that most people are never aware of.</p>
<p>Going in-depth can expand your mind and your capacity for learning. Keep asking why. Follow every link. Let your curiosity guide you.</p>
<h2 id="hard-stuff-matters">Hard stuff matters</h2>
<p>Giving yourself the chance to be delighted through discovery doesn’t come for free. It takes a lot of hard work to read and compress complicated ideas into your meat brain.</p>
<p><img src="hard-stuff.png" alt="Comic of hammering hard things into your head"></p>
<p>It’s important not to gloss over the hard stuff. In fact, if something seems too hard to understand, you might benefit from doing it first. You might have to get creative to find ways to explain things to yourself, but when you succeed, it makes everything else easier later on.</p>
<p>Analogies are helpful for understanding hard concepts, but they’ll only help you start to understand concepts at a surface level. Remember to go in-depth. Don&rsquo;t stop at the analogy.</p>
<h2 id="writing-matters">Writing matters</h2>
<p>Write right away. Create a habit of explaining everything you learn to yourself in long-form writing. Better than bullet points, writing with a conversational tone engages parts of your brain that help you to process and remember new information. It’s why humans like and remember stories, and it’s a superpower you get for free.</p>
<p>Start by writing for yourself. Write about what interests you. Try something new, even if it seems rudimentary, and write in-depth about what you learn. (<a href="/blog/iteration-in-python-for-list-and-map/">One of my most popular posts</a> is about iteration in Python. When I first wrote it, I considered myself a complete beginner.)</p>
<p>If you want to go a step further, share your writing with the world. Learn in public, <a href="https://victoria.dev">like I do</a>. I often get questions like, &ldquo;how do I choose a theme for my blog?&rdquo; or &ldquo;what platform should I use?&rdquo; or &ldquo;what popular language/framework/topic should I focus on?&rdquo; My answer is: don&rsquo;t worry about it.</p>
<p>Don&rsquo;t fret too much about your blog theme or platform. Pick the easiest option for you to get started with for now. All of that will change and improve as you learn, practice, and find your focus. Just start writing, ideally, yesterday.</p>
<p>Write for yourself by explaining what you’re doing, as if it were past-you teaching future-you — because it is. You will be your first reader, and the first judge of how useful your blog can be. Seek to impress yourself!</p>
<h2 id="the-language-framework-or-version-doesnt-matter">The language, framework, or version doesn’t matter</h2>
<p>Why pigeonhole your abilities before you even start? Pick any software language, framework, or technology that seems to make sense to you when you first read it. Start there.</p>
<p>Remember that it’s important to dig deep and understand the fundamentals. Basic concepts of software transcend languages. Whichever first language you choose, understand functions, variables, return values, iteration, and how immutability works. You’ll find that learning these concepts will make it easier to recognize them in your second language, and learn that too.</p>
<h2 id="your-portfolio-doesnt-matter">Your portfolio doesn’t matter</h2>
<p>If your first objective is to build a portfolio, you may be trying to run before you walk. Building a portfolio to showcase to potential employers is a great goal, but a terrible first step.</p>
<p>If you think of creating a polished portfolio as a first step, you’re liable to spend too much time making it pretty and presentable before focusing on the content. As someone who hires software developers, I can tell you wholeheartedly that I’d rather see clean and well-written code than a flashy front page.</p>
<p><img src="temp-portfolio.png" alt="A comic of an in-progress portfolio, text reads, &ldquo;Portfolio in progress. Watch me build at GitHub.com/me&rdquo;"></p>
<p>Don’t confuse building a portfolio with building projects. Absolutely build projects, right from the beginning. There’s no better way to see the practical application of what you’re learning. Just treat them as first drafts, as training ground, and don’t worry about packaging them up for professional consumption.</p>
<p>By allowing yourself to build some draft projects first, you allow yourself the breathing room to learn from them. Focus on iteration, on making one small thing better each time, and you&rsquo;ll build a portfolio without even realizing it.</p>
<h2 id="focus-on-what-matters">Focus on what matters</h2>
<p>Don’t follow this advice blindly; rather, incorporate it into your own systems. Experiment, make it work better than when you found it, then pay it forward by writing down what you&rsquo;ve learned for someone else to read!</p>
<p>Here are my favorite books for reading or listening to if you want to cultivate a learning mindset. See <a href="/bookshelf/">non-coding books for coders</a>.</p>
<p>If this article benefits you in some way, I encourage you to write about it! The process of learning how to learn is never finished. You can be the next iteration.</p>
]]></content></entry><entry><title type="html">So you&amp;#39;re the family tech support</title><link href="https://victoria.dev/archive/so-youre-the-family-tech-support/"/><id>https://victoria.dev/archive/so-youre-the-family-tech-support/</id><author><name>Victoria Drake</name></author><published>2020-12-21T08:42:24-05:00</published><updated>2020-12-21T08:42:24-05:00</updated><content type="html"><![CDATA[<p>🎄🌟 Happy holidays! 🌟🎄</p>
<p>For those of you seeing relatives this season, chances are that you’re the designated family tech support. If part of your time home for the holidays is spent on software updates and troubleshooting WiFi, here are a few other quick wins to help boost your family&rsquo;s online privacy and security.</p>
<h2 id="1-set-up-a-vpn">1. Set up a VPN</h2>
<p>Using a VPN is Online Safety 101. Choose a reputable provider with a strict no-logging policy, or if you&rsquo;re up for it, <a href="/blog/set-up-a-pi-hole-vpn-on-an-aws-lightsail-instance/">roll your own</a>.</p>
<h2 id="2-introduce-a-password-manager">2. Introduce a password manager</h2>
<p>If your family member uses the same password everywhere (<code>&lt;petname&gt;</code>+<code>&lt;house number&gt;</code>, same as last year) because passwords are hard to remember, introduce them to their new best friend, <a href="https://1password.com/">1Password</a>. Help your family get set up with secure passwords they don&rsquo;t have to write down on Post-It notes &ndash; just one master pass(phrase) is all you need.</p>
<p>When choosing a passphrase, avoid using information easily found on social media accounts, like pet names, favorite sports teams, favorite brands, or birthdays.</p>
<h2 id="3-switch-to-duckduckgo">3. Switch to DuckDuckGo</h2>
<p>Help fight the Internet search monopoly by getting your family to use a search engine that respects their privacy. Go to your browser <strong>Settings</strong> and set your <strong>Default Search Engine</strong> (that uses the URL bar) to <a href="https://duckduckgo.com/">DuckDuckGo</a>. Break the ice with an instant answer feature, like searching &ldquo;calendar&rdquo; so you can <a href="https://duckduckgo.com/?q=Countdown+To+25th+dec+2020&amp;t=canonical&amp;ia=answer">count down to Christmas</a>.</p>
<p>(You might want to search for &ldquo;classic cocktails cheat sheet&rdquo; after all this.)</p>
<h2 id="4-install-a-better-browser-and-blocker">4. Install a better browser and blocker</h2>
<p>While I prefer a <a href="https://pi-hole.net/">Pi-hole</a>, setting one up can be complex. Instead, help set up a privacy-preserving browser like <a href="https://www.mozilla.org/en-US/firefox/new/">Firefox</a> or a wide-spectrum blocking extension like <a href="https://ublockorigin.com/">uBlock Origin</a> <a href="https://github.com/gorhill/uBlock">(GitHub source)</a>.</p>
<p>Your family will get faster page load times, less advertisements interrupting articles and videos, and fewer sneaky trackers leaking browsing habits to big tech, all with near-zero maintenance.</p>
<h2 id="be-a-home-for-the-holidays-hero">Be a home-for-the-holidays hero!</h2>
<p>Help improve your family&rsquo;s security posture this holiday season. A little beefed-up cybersecurity may be one of the best gifts you can give!</p>
<p>I&rsquo;m keeping it short-and-sweet this week. My annual Christmas post drops on December 24, full of warm fuzzy goodness and a tech tip or two. Thank you for <a href="/">being a subscriber</a> &ndash; stay tuned!</p>
]]></content></entry><entry><title type="html">Look mom, I&amp;#39;m a GitHub Action Hero</title><link href="https://victoria.dev/archive/look-mom-im-a-github-action-hero/"/><id>https://victoria.dev/archive/look-mom-im-a-github-action-hero/</id><author><name>Victoria Drake</name></author><published>2020-06-27T09:06:33-04:00</published><updated>2020-06-27T09:06:33-04:00</updated><content type="html"><![CDATA[<p>GitHub recently interviewed me for their blog editorial entitled <a href="https://github.blog/2020-06-26-github-action-hero-victoria-drake/">GitHub Action Hero: Victoria Drake</a>. Here&rsquo;s a behind-the-scenes peek at the original interview questions and my answers.</p>
<h2 id="what-is-the-name-of-your-action-please-include-a-link-too">What is the name of your Action? Please include a link too.</h2>
<p>Among the several Actions I&rsquo;ve built, I have two current favorites. One is <a href="https://github.com/victoriadrake/hugo-remote">hugo-remote</a>, which lets you continuously deploy a Hugo static site from a private source repository to a public GitHub Pages repository. This keeps the contents of the source repository private, such as your unreleased drafts, while still allowing you to have a public open source site using GitHub Pages.</p>
<p>The second is <a href="https://github.com/victoriadrake/django-security-check">django-security-check</a>. It&rsquo;s an effortless way to continuously check that your production Django application is free from a variety of security misconfigurations. You can think of it as your little CI/CD helper for busy projects &ndash; a security linter!</p>
<h2 id="tell-us-a-little-bit-more-about-yourselfhow-did-you-get-started-in-software-tools">Tell us a little bit more about yourself—how did you get started in software tools?</h2>
<p>When I was a kid, I spent several summer vacations coding a huge medieval fantasy world MUD (Multi-User Dungeon, like a multiplayer role-playing game) written in LPC, with friends. It was entirely text-based, and built and played via Telnet. I fell in love with the terminal and learned a lot about object-oriented programming and prototype-based programming early on.</p>
<p>I became a freelance developer and had the privilege of working on a wide variety of client projects. Realizing the difficulty that companies have with hiring experienced developers, I built <a href="https://ApplyByAPI.com">ApplyByAPI.com</a> to help. As you might imagine, it allows candidates to apply for jobs via API, instead of emailing a resume. It&rsquo;s based on the Django framework, so in the process, I learned even more about building reusable units of software.</p>
<p>When I became a co-author and a core maintainer for the <a href="https://github.com/OWASP/wstg">Open Web Application Security Project (OWASP) Web Security Testing Guide (WSTG)</a>, I gained an even broader appreciation for how a prototype-based, repeatable approach can help build secure web applications. Organizations worldwide consider the WSTG the foremost open source resource for testing the security of web applications. We&rsquo;ve applied this thinking via the use of GitHub Actions in our repository &ndash; I&rsquo;ll tell you more about that later.</p>
<p>Whether I&rsquo;m creating an open source tool or leading a development team, my childhood experience still informs how I think about programming today. I strive to create repeatable units of software like GitHub Actions &ndash; only now, I make them for large enterprises in the real world!</p>
<h2 id="what-is-the-story-behind-your-built-github-action-why-did-you-build-this">What is the story behind your built GitHub Action? (Why did you build this?)</h2>
<p>Developers take on a lot of responsibility when it comes to building secure applications these days. I&rsquo;m a full-time senior software developer at a cybersecurity company. I&rsquo;ve found that I&rsquo;m maximally productive when I create systems and processes that help myself and my team make desired outcomes inevitable. So I spend my free time building tools that make it easy for other developers to build secure software as well. My Actions help to automate contained, repeatable units of work that can make a big difference in a developer&rsquo;s day.</p>
<h2 id="do-you-have-future-plans-for-this-or-other-actions">Do you have future plans for this or other Actions?</h2>
<p>Yes! I&rsquo;m always finding ways for tools like GitHub Actions to boost the velocity of technical teams, whether at work or in my open source projects. Remember the Open Web Application Security Project? In the work I&rsquo;ve lead with OWASP, I&rsquo;ve championed the effort to increase automation using GitHub Actions to maintain quality, securely deploy new versions to the web, and even build PDFs of the WSTG. We&rsquo;re constantly looking into new ways that GitHub Actions can make our lives easier and our readers&rsquo; projects more secure.</p>
<h2 id="what-has-been-your-favorite-feature-of-github-actions">What has been your favorite feature of GitHub Actions?</h2>
<p>I like that I can build an Action using familiar and portable technologies, like Docker. Actions are easy for collaborators to work on too, since in the case of a Dockerized Action, you can use any language your team is comfortable with. This is especially useful in large organizations with polyglot teams and environments. There aren&rsquo;t any complicated dependencies for running these portable tasks, and you don&rsquo;t need to learn any special frameworks to get started.</p>
<p>One of my first blog posts about GitHub Actions even describes how I used an Action to run a Makefile! This is especially useful for large legacy applications that want to modernize their pipeline by using GitHub Actions.</p>
<h2 id="what-are-the-biggest-challenges-youve-faced-while-building-your-github-action">What are the biggest challenges you’ve faced while building your GitHub Action?</h2>
<p>The largest challenge of GitHub Actions isn&rsquo;t really in GitHub Actions, but in the transition of legacy software and company culture.</p>
<p>Migrating legacy software is always challenging, particularly with large legacy applications. Moving to modern CI/CD processes requires changes at the software level, team level, and even a shift in thinking when it comes to individual developers. It can help to have a tool like GitHub Actions, which is at once seamlessly modern and familiar, when transitioning legacy code to a modern pipeline.</p>
<h2 id="anything-else-you-would-like-to-share-about-your-experience-any-stories-or-lessons-learned-through-building-your-action">Anything else you would like to share about your experience? Any stories or lessons learned through building your Action?</h2>
<p>I&rsquo;m happiest when I&rsquo;m solving a challenge that makes developing secure software less challenging in the future, both for myself and for the technology organization I&rsquo;m leading. With tools like GitHub Actions, a lot of mental overhead can be offloaded to automatic processes &ndash; like getting a whole other brain, for free! This can massively help organizations that are ready to scale up their development output.</p>
<p>In the realm of cybersecurity, not only does creating portable and reusable software make developers&rsquo; lives easier, it helps to make whole workflows repeatable, which in turn makes software development processes more secure. With smart processes in place, technical teams are happier. As an inevitable result, they&rsquo;ll build better software for customers, too.</p>
]]></content></entry><entry><title type="html">Technical ergonomics for the efficient developer</title><link href="https://victoria.dev/posts/technical-ergonomics-for-the-efficient-developer/"/><id>https://victoria.dev/posts/technical-ergonomics-for-the-efficient-developer/</id><author><name>Victoria Drake</name></author><published>2020-06-22T06:33:28-04:00</published><updated>2020-06-22T06:33:28-04:00</updated><content type="html"><![CDATA[<p>This article isn&rsquo;t going to tell you about saving your neck with a Roost stand, or your wrists with a split keyboard - <a href="https://heronebag.com/blog/next-level-ergonomics-for-remote-work-developers/">I&rsquo;ve already done that</a>. This article is about saving your brain.</p>
<p>When I first began to program full time, I found myself constantly tired from the mental exertion. Programming is hard! Thankfully, you can take some solace in knowing it gets easier with practice, and with a great supporting cast. Some very nice folks who preceded us both came up with tools to make the difficult bits of communicating with computers much easier on our poor human meatbrains.</p>
<p>I invite you to explore these super helpful technical tools. They&rsquo;ll improve your development set up and alleviate much of the mental stress of programming. You soon won&rsquo;t believe you could have done without them.</p>
<h2 id="not-your-average-syntax-highlighting">Not your average syntax highlighting</h2>
<p>If you&rsquo;re still working with syntax highlighting that just picks out variable and class names for you, that&rsquo;s cute. Time to turn it up a notch.</p>
<p><img src="Screenshot_20200612_185858.png" alt="My current VSC theme and syntax highlighting"></p>
<p>In all seriousness, syntax highlighting can make it much easier to find what you&rsquo;re looking for on your screen: the current line, where your current code block starts and ends, or the absolute game-changing which-bracket-set-am-I-in highlight. I primarily use Visual Studio Code, but similar extensions can be found for the major text editors.</p>
<p>The theme pictured in Visual Studio Code above is <a href="https://github.com/victoriadrake/kabukicho-vscode">Kabukichō</a>. I made it.</p>
<h2 id="use-git-hooks">Use Git hooks</h2>
<p>I previously brought you <a href="/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/">an interactive pre-commit checklist in the style of infomercials</a> that&rsquo;s both fun and useful for reinforcing the quality of your commits. But that&rsquo;s not all!</p>
<p>Git hooks are scripts that run automatically at pre-determined points in your workflow. Use them well, and you can save a ton of brainpower. A <code>pre-commit</code> hook remembers to do things like lint and format code, and even runs local tests for you before you indelibly push something embarrassing. Hooks can be a little annoying to share (the <code>.git/hooks</code> directory isn&rsquo;t tracked and thus omitted when you clone or fork a repository) but there&rsquo;s a framework for that: the confusingly-named <a href="https://pre-commit.com/">pre-commit framework</a>, which allows you to create a sharable configuration file of Git hook plugins, not just for <code>pre-commit</code>.</p>
<p>I spend a majority of my time these days coding in Python, so here is my current <code>.pre-commit-config.yaml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">fail_fast: true
repos:
  - repo: https://github.com/DavidAnson/markdownlint-cli2
    rev: v0.1.3
    hooks:
    - id: markdownlint-cli2
      name: markdownlint-cli2
      description: "Checks the style of Markdown/CommonMark files."
      entry: markdownlint-cli2
      language: node
      types: [markdown]
      minimum_pre_commit_version: 0.15.0</span>
</span></span></code></pre></div><p>There are tons of <a href="https://pre-commit.com/hooks.html">supported hooks</a> to explore.</p>
<h2 id="use-a-type-system">Use a type system</h2>
<p>If you write in languages like Python and JavaScript, get yourself an early birthday present and start using a static type system. Not only will this help improve the way you think about code, it can help make type errors clear before running a single line.</p>
<p>For Python, I like using <a href="https://github.com/python/mypy">mypy</a> for static type checking. You can set it up as a <code>pre-commit</code> hook (see above) and it&rsquo;s <a href="https://code.visualstudio.com/docs/python/linting#_mypy">supported in Visual Studio Code too</a>.</p>
<p><a href="https://www.typescriptlang.org/">TypeScript</a> is my preferred way to write JavaScript. You can run the compiler on the command line using Node.js (see <a href="https://github.com/Microsoft/TypeScript">instructions in the repo</a>), it works pretty well <a href="https://code.visualstudio.com/Docs/languages/typescript">with Visual Studio Code</a> out of the box, and of course there are multiple options for <a href="https://code.visualstudio.com/Docs/languages/typescript#_typescript-extensions">extension integrations</a>.</p>
<h2 id="quit-unnecessarily-beating-up-your-meatbrain">Quit unnecessarily beating up your meatbrain</h2>
<p>I mean, you wouldn&rsquo;t stand on your head all day to do your work. It would be rather inconvenient to read things upside down all the time (at least <a href="https://www.youtube.com/watch?v=jKUVpBJalNQ">until your brain adjusted</a>), and in any case you&rsquo;d likely get uncomfortably congested in short order. Working without taking advantage of the technical ergonomic tools I&rsquo;ve given you today is a little like unnecessary inversion - why would you, if you don&rsquo;t have to?</p>
]]></content></entry><entry><title type="html">Outsourcing security with 1Password, Authy, and Privacy.com</title><link href="https://victoria.dev/archive/outsourcing-security-with-1password-authy-and-privacy.com/"/><id>https://victoria.dev/archive/outsourcing-security-with-1password-authy-and-privacy.com/</id><author><name>Victoria Drake</name></author><published>2020-03-16T08:12:32-04:00</published><updated>2020-03-16T08:12:32-04:00</updated><content type="html"><![CDATA[<p>We&rsquo;ve already got enough to deal with without worrying about our cybersecurity. When humans are busy and under stress, we tend to get lax in less-obviously-pressing areas, like the integrity of our online accounts. These areas only become an obvious problem when it&rsquo;s too late for prevention.</p>
<p>Cybersecurity can be fiddly and time-consuming. You might need to reset forgotten passwords, transfer multifactor authentication (MFA) codes to different devices, or deal with the fallout of compromised payment details in the event one of your accounts is still breached.</p>
<p>Thankfully, most of the work necessary to keep up our cybersecurity measures can be outsourced.</p>
<p>Here are three changes you can make to significantly reduce the chances of needing to fiddle with any of these things again.</p>
<h2 id="1password">1Password</h2>
<p><img src="1Password-iOS-FaceID-darkmode.jpg" alt="1Password on an iPhone"></p>
<p>I&rsquo;ve historically avoided password managers because of an irrational knee-jerk reaction to putting all my eggs in one basket. You know what&rsquo;s great for irrational reactions? Education.</p>
<p>To figure out if putting all my passwords into a password manager is more secure than not using one, I set out to see what some smart people wrote about it.</p>
<p>First, we need to know a thing or two about passwords. Troy Hunt figured out almost a decade ago that <a href="https://www.troyhunt.com/only-secure-password-is-one-you-cant/">trying to remember strong passwords doesn&rsquo;t work</a>. In more recent times, Alex Weinert expanded on this in <a href="https://techcommunity.microsoft.com/t5/azure-active-directory-identity/your-pa-word-doesn-t-matter/ba-p/731984">Your Pa$$word doesn&rsquo;t matter</a>. TL;DR: our brains aren&rsquo;t better at passwords than computers, and please use MFA.</p>
<p>So passwords don&rsquo;t matter, but complicated passwords are still better than memorable and guessable ones. Since I&rsquo;ve next to no hope of remembering a dozen variations of <code>p/q2-q4!</code> (I&rsquo;m not a <a href="https://inbox.vuxu.org/tuhs/CAG=a+rj8VcXjS-ftaj8P2_duLFSUpmNgB4-dYwnTsY_8g5WdEA@mail.gmail.com/">chess player</a>), this is a task I can outsource to <a href="https://1password.com/">1Password</a>. I&rsquo;ll still need to remember one, long, complicated master password - 1Password uses this to encrypt my data, so I really can&rsquo;t lose it - but I can handle just one.</p>
<p>Using 1Password specifically has another, decidedly obvious, advantage. I chose 1Password because of their <a href="https://support.1password.com/watchtower/">Watchtower</a> feature. <a href="https://www.troyhunt.com/have-i-been-pwned-is-now-partnering-with-1password/">Thanks to Troy Hunt&rsquo;s Have I Been Pwned</a>, Watchtower will alert you if any of your passwords show up in a breach so you can change them. Passwords still don&rsquo;t completely work, but this is probably the best band-aid there is.</p>
<p>One last bonus is that using a password manager is a heck of a lot more convenient. I don&rsquo;t need to take a few tries to type in a complicated password. I don&rsquo;t end up spending time resetting passwords I&rsquo;ve forgotten on sites I only rarely use.</p>
<p>When tasked with remembering all their own passwords, people typically create simpler passwords that are easier to remember &ndash; and easier to hack. This occurs most frequently on sites that are considered unimportant. Using 1Password and generated passwords, those sites are now also first-class citizens in the land of strong passwords, instead of being half-abandoned and half-open attack vectors.</p>
<p>So, yes, all my eggs are in one basket. A well-protected, complex, and monitored basket.</p>
<h2 id="authy">Authy</h2>
<p>Okay - so it&rsquo;s more like one-and-a-half baskets. 🤷🏻</p>
<p><img src="Authy2019Logo.png" alt="Authy&rsquo;s logo"></p>
<p><a href="https://authy.com/">Authy</a>, from the folks over at <a href="https://www.twilio.com">Twilio</a>, provides a 2FA solution that&rsquo;s more secure than SMS. <a href="https://authy.com/blog/authy-vs-google-authenticator/">Unlike Google Authenticator</a>, you can choose to back up your 2FA codes in case you lose or change your phone. (1Password offers 2FA functionality as well - but, you know, redundancies.)</p>
<p>With Authy, your back up is encrypted with your password, similarly to how 1Password works. This makes it the second password you can&rsquo;t forget, if you don&rsquo;t want to lose access to your codes. If you reset your account, they all go away. I can deal with remembering two passwords; I&rsquo;ll take that trade.</p>
<p>I&rsquo;ve tried other methods of MFA, including hardware keys, which can make accessing accounts on your phone more complicated than I care to put up with. I find the combination of 1Password and Authy to be the most practical combination of convenience and security that yet exists to my knowledge.</p>
<h2 id="privacycom">Privacy.com</h2>
<p><img src="privacy-ephemeral.png" alt="Screenshot of Privacy card"></p>
<p>Finally, there&rsquo;s one last line of defense you can put in place in the unfortunate event that one of your accounts is still compromised. All the strong passwords and MFA in the world won&rsquo;t help if you open the doors yourself, and scams and phishing are a thing.</p>
<p>Since it&rsquo;s rather impractical to use a different real credit card every place you shop, virtual cards are just a great idea. There&rsquo;s no good reason to spend an afternoon (or more) resetting your payment information on every account just to thwart a misbehaving merchant or patch up a data breach from that online shop for cute salt shakers you made a purchase at last year (just me?).</p>
<p>As a bonus, a <a href="https://blog.privacy.com/create-virtual-cards-with-privacy-and-1password/">partnership between 1Password and Privacy.com</a> lets you easily create virtual credit cards using the 1Password extension.</p>
<p>By setting up a separate virtual card for each merchant, in the event that one of those merchants is compromised, you can simply pause or delete that card. None of your other accounts or actual bank details are caught up in the process. Cards can have time-based limits or be one-off burner numbers, making them ideal for setting up subscriptions.</p>
<p>This is the sort of basic functionality that I hope, one day, becomes more prevalent from banks and credit cards. In the meantime, I&rsquo;ll keep using <a href="https://privacy.com/join/Q6V3V">Privacy.com</a>. That&rsquo;s my referral link; if you&rsquo;d like to thank me by using it, we&rsquo;ll both get five bucks as a bonus.</p>
<h2 id="outsource-better-security">Outsource better security</h2>
<p>All together, implementing these changes will probably take up an afternoon, depending on how many accounts you have. It&rsquo;s worth it for the time you&rsquo;d otherwise spend resetting passwords, setting up new devices, or (knock on wood) recovering from compromised banking details. Best of all, you&rsquo;ll have continual protection just running in the background.</p>
<ul>
<li><a href="https://1password.com/">1Password</a></li>
<li><a href="https://authy.com/">Authy</a></li>
<li><a href="https://privacy.com/join/Q6V3V">Privacy.com</a></li>
</ul>
<p>We have the technology. Free up some brain cycles to focus on other things - or simply remove some unnecessary stress from your life by outsourcing the fiddly bits.</p>
<p>Want to give the gift of cybersecurity to someone you know? Get them started with a <a href="/blog/your-cybersecurity-starter-pack/">cybersecurity starter pack</a>.</p>
]]></content></entry><entry><title type="html">Why PixelFed won&amp;#39;t save us from Instagram</title><link href="https://victoria.dev/archive/why-pixelfed-wont-save-us-from-instagram/"/><id>https://victoria.dev/archive/why-pixelfed-wont-save-us-from-instagram/</id><author><name>Victoria Drake</name></author><published>2020-02-16T19:23:20-05:00</published><updated>2020-02-16T19:23:20-05:00</updated><content type="html"><![CDATA[<p><a href="https://pixelfed.org/">PixelFed</a> is a decentralized photo sharing network based on the <a href="https://www.w3.org/TR/activitypub/">ActivityPub</a> protocol, the same one that <a href="https://joinmastodon.org/">Mastodon</a> uses. For a lot of people divorced (or wanting to be) from Instagram over <a href="https://eandt.theiet.org/content/articles/2018/04/instagram-worst-social-network-for-youth-mental-health-report-finds/">mental health concerns</a> and issues like <a href="https://techcrunch.com/2018/05/25/facebook-google-face-first-gdpr-complaints-over-forced-consent/">forced consent to post-GDPR terms</a>, a decentralized social network like PixelFed sounds like an exciting and promising alternative.</p>
<p>Personally, I stopped using Instagram once I accepted the fact that its core premise and integral structure of social interaction was encouraging me to form habits that were harmful to my life goals. I&rsquo;m not alone - studies have shown that people are <a href="https://www.bloomberg.com/opinion/articles/2019-05-01/what-we-want-doesn-t-always-make-us-happy">happier after deleting apps like Facebook</a>. The reasons for this don&rsquo;t differ greatly from why any social network can be bad for you - they&rsquo;re just found in much greater intensity on photo sharing sites, and specifically Instagram.</p>
<p>It is still early days for PixelFed. As I write this I have no way to know what kind of network it will become, or even if it will survive at all. I do know, however, that there are many glaring and fundamental problems that a decentralized photo sharing network like PixelFed won&rsquo;t solve. To elaborate, I&rsquo;m going to discuss what makes Instagram so poisonous to health, why centralized social networks aren&rsquo;t likely to ever be healthy, and why decentralized social networks have <em>a very slim</em> chance of being better.</p>
<h2 id="why-instagram-is-bad-for-your-health">Why Instagram is bad for your health</h2>
<p>Let&rsquo;s start with the basics. Your brain responds very differently to reading text than it does to looking at images.</p>
<p>It doesn&rsquo;t take more than a quick search to find hundreds of articles and studies about how reading <a href="https://www.theguardian.com/books/2014/jan/23/can-reading-make-you-smarter">can make you smarter</a>, <a href="https://bigthink.com/21st-century-spirituality/reading-rewires-your-brain-for-more-intelligence-and-empathy">more empathetic</a>, and <a href="https://n.neurology.org/content/early/2013/07/03/WNL.0b013e31829c5e8a">stave off cognitive decline</a> by <a href="https://www.psychologytoday.com/intl/blog/the-athletes-way/201401/reading-fiction-improves-brain-connectivity-and-function">improving brain connectivity</a>. In essence, reading involves a <a href="https://neuro.hms.harvard.edu/harvard-mahoney-neuroscience-institute/brain-newsletter/and-brain-series/reading-and-brain">multitude of brain regions</a> including the temporal and frontal lobes. There&rsquo;s still a lot to be discovered about the human brain, but here&rsquo;s what we think we know. The frontal lobes <a href="https://www.healthline.com/human-body-maps/frontal-lobe">control important cognitive skills</a> like emotional expression, problem solving, memory, language, judgement, and sexual behaviors. The temporal lobes handle important functions such as <a href="https://www.health.qld.gov.au/abios/asp/btemporal_lobes">the encoding of memory, and processing emotions and visual perception</a>.</p>
<p>In other words, reading text - even on social media - stimulates your brain and makes you think about the information you&rsquo;re taking in. To react to words on a page, you first have to read them and form thoughts about them.</p>
<p>Unlike reading, looking at an image has a very different effect on your brain. <a href="https://neomam.com/interactive/13reasons/">Here&rsquo;s an infographic about infographics</a> that covers some of these effects. Basically, millennia of evolution have produced human brains hardwired to respond quickly to visual stimuli - in less than 1/10 of a second. As the infographic will literally show you, almost 50% of the brain is involved in visual processing, and 70% of all our sensory receptors are in our eyes. That&rsquo;s a lot of resources devoted to quickly processing visuals. Why could this be bad?</p>
<p>Unlike times past, we&rsquo;re no longer (day-to-day) concerned with spotting a tiger in the bushes about to pounce on us. The near-instant processing time needed to discern if that shivering tree branch is the just wind or impending mortal danger is <em>outdated</em> in our current living arrangements. Our brain, however, doesn&rsquo;t know that. It hasn&rsquo;t evolved faster than our technologies or society. The downside to this is that anyone with a little knowledge of this fundamental flaw in the human mind is able to exploit it.</p>
<p><a href="https://web.archive.org/web/20200719034830/https://thenextweb.com/dd/2014/05/21/importance-visual-content-deliver-effectively/">Advertisers</a> <a href="https://www.liveplan.com/blog/2016/01/scientific-reasons-why-you-should-present-your-data-visually/">call</a> <a href="https://www.fastcompany.com/3035856/why-were-more-likely-to-remember-content-with-images-and-video-infogr">this</a> <a href="https://www.canva.com/learn/visual-marketing/">exploitation</a>, &ldquo;<a href="https://blog.bufferapp.com/a-complete-guide-to-creating-awesome-visual-content">visual</a> <a href="https://www.business2community.com/digital-marketing/visual-marketing-pictures-worth-60000-words-01126256">marketing</a>.&rdquo;</p>
<p>These linked articles are stuffed with the same factoids over and over again. &ldquo;The brain processes images 60,000 times faster than text.&rdquo; &ldquo;90% of the information sent to the brain is visual.&rdquo; Whether or not these numbers are accurate, it&rsquo;s clearly provable that visual marketing is on the whole more effective than advertisements without images. There&rsquo;s a reason for it, and it should scare you.</p>
<p>Unlike reading, which involves regions of your brain responsible for comprehension, decision making, and emotional control, <a href="https://doi.org/10.1073/pnas.95.5.2703">images are processed by different areas of the brain</a>. <a href="https://qbi.uq.edu.au/brain/brain-physiology/visual-perception">Visual input travels</a> from our eyes through our optic nerves to the thalamus (or LGN, Lateral Geniculate Nucleus) and the superior colliculus. From the thalamus, it proceeds to the visual cortex at the rear of our brains, where the <a href="https://en.wikipedia.org/wiki/Visual_system">image is processed</a>. Effectively, viewing images does not make us think in the same way that reading does. In other words, it&rsquo;s easy to do.</p>
<p>Let me be clear. This difference in the way words and images are processed is not, in itself, bad. A photo-centric social network is not, in itself, bad. Images and words alike have the power to evoke strong emotions, send powerful messages, spark revolutions, and spur progress. This is good&hellip; if it&rsquo;s used for good.</p>
<p>Instagram, a photo-centric network chock full of product placements, paid sponsorships, and outright advertisements, is a social network primarily designed to bypass your cognitive thinking and <em>sell you stuff.</em></p>
<p>I don&rsquo;t think Instagram started out with the same motivations it has now. Along with all the photo sharing networks that blossomed when Instagram first got popular, I still believe its initial vision was to make sharing photos with your friends fun and easy.</p>
<p>It just got too popular.</p>
<h2 id="why-centralized-networks-are-bad-for-your-health">Why centralized networks are bad for your health</h2>
<p>In the wake of privacy concerns over the last few years, new uproar over algorithm-driven timelines, and the #DeleteFacebook, #DeleteTwitter, and #DeleteInstagram movements, more people today are aware of how networks that make their money on your data are bad for your health. This is in part due to their centralized nature - one hierarchy of authority makes decisions for the whole system, and at the same time, has to support it. It&rsquo;s expensive to support millions of users, so it&rsquo;s no wonder that the network&rsquo;s main concern (and let&rsquo;s just consider the most innocent case) is to remain profitable.</p>
<p>What&rsquo;s a good way to remain profitable?</p>
<blockquote>
<p>Take a human desire, preferably one that has been around for a really long time&hellip; Identify that desire and use modern technology to take out steps. &ndash; Evan Williams, co-founder of Twitter and Blogger</p>
<p><em>Quoted in Wired article, 2013, &ldquo;<a href="https://www.wired.com/2013/09/ev-williams-xoxo/">Twitter Founder Reveals Secret Formula for Getting Rich Online</a>&rdquo;</em></p></blockquote>
<p>There&rsquo;s a book called <em>Hooked: How to Build Habit-Forming Products</em> which, if you&rsquo;re ever in the mood for a good horror flick, you should curl up in bed with some popcorn and read.</p>
<p>The book details a simple model for a habit-forming product. The model is cyclical, and has the following key points: a trigger, an action, variable reward, and investment. In summary, if a product can get you to think of it, leading to some action that is easier to do than to think about, give you a reward for that action <em>some of</em> the time, and then compel you to commit or invest in it - you&rsquo;re hooked.</p>
<p>If you&rsquo;re paying attention, you might notice I&rsquo;ve described Instagram. And Twitter. And Facebook. And every other social network.</p>
<p>There&rsquo;s a reason it&rsquo;s easy to use Instagram, easy to post a tweet, easy to browse Facebook. These products have been designed to make it easy for you to use them. They&rsquo;ve been designed to alter your behavior to better suit the product&rsquo;s goals.</p>
<blockquote>
<p>This industry employs some of the smartest people, thousands of Ph.D. designers, statisticians, engineers. They go to work every day to get us to do this one thing, to undermine our willpower. &ndash; James Williams, co-founder of <a href="https://humanetech.com/">Time Well Spent</a></p>
<p><em>Quoted in Nautilus article, 2017, &ldquo;<a href="https://nautil.us/modern-media-is-a-dos-attack-on-your-free-will-236806/">Modern Media Is a DoS Attack on Your Free Will</a>&rdquo;</em></p></blockquote>
<p>At the heart of the idea of getting you hooked is the concept of a <a href="https://www.nakedcapitalism.com/2018/01/social-media-dopamine-loop-role-software-engineer.html">dopamine feedback loop</a>. Dopamine, an <a href="https://en.wikipedia.org/wiki/Dopamine">organic chemical neurotransmitter</a> in your brain, is thought to be responsible for <a href="https://www.theguardian.com/technology/2018/mar/04/has-dopamine-got-us-hooked-on-tech-facebook-apps-addiction">allowing us to anticipate the reward to an action</a>. It inspires us to get a glass of water when we&rsquo;re thirsty, for example, and may help us to feel good when we take actions towards doing so. Where dopamine is so effectively misused is in the practice of providing <a href="https://techcrunch.com/2012/03/25/want-to-hook-your-users-drive-them-crazy/">variable rewards</a> to drive social media addiction.</p>
<p>Unlike getting a glass of water when you&rsquo;re thirsty, variable rewards are random. It&rsquo;s as if drinking water sometimes, but not always, cured your thirst. This effectively <a href="https://www.smh.com.au/world/social-media-destroying-society-with-dopaminedriven-feedback-loops-exfacebook-vp-20171213-h03jfo.html">programs your mind</a> to pursue the action that results in the unpredictable reward. Since getting the reward isn&rsquo;t guaranteed, you need to make more attempts to achieve success. Social media is designed to make these variable dopamine hits easy to obtain. It&rsquo;s designed to hijack your intellectual independence in order to keep you on the network.</p>
<p><em>Especially</em> when the main goal of a centralized social network is to make a profit, that network is exploiting evolutionary flaws in your brain to make that profit from you. You are literally being hacked.</p>
<p>Now combine this information with the knowledge of how a product comprised primarily of images bypasses your cognitive thinking. Not only are you being hacked, but your main defense system is being easily, laughably, circumvented.</p>
<p>Exploiting users is a particularly compelling temptation for any social networks under pressure to make a profit, and this pressure is amplified in organizations with a centralized structure. Not all centralized networks do this, but undoubtedly, the very successful ones do.</p>
<p>Decentralization is by no means a fix for exploitation and greed, but a decentralized social network might have a few things going for it.</p>
<h2 id="why-decentralized-networks-might-be-slightly-better-for-your-health">Why decentralized networks <em>might</em> be slightly better for your health</h2>
<p>The main issues present in Twitter, Facebook, and Instagram as pertains to social media addiction do not go away on decentralized networks. I&rsquo;m personally, currently, using both Twitter and Mastodon. The former is centralized and the latter is decentralized, but the the same motivations that could get me in trouble on one platform apply to both. Decentralization does not fix the problem.</p>
<p>It <em>might</em> help.</p>
<p>Unlike a centralized, single-hierarchy, definitely-for-profit social network, decentralization has one thing going for it: more people. Specifically, more instance owners who are in control of their instances.</p>
<p>Running a Mastodon instance is a responsibility, should you choose to accept it. Besides the server itself, instances require their own sets of rules and code of conduct, and like the often adopted <a href="https://mastodon.social/about/more">mastodon.social code of conduct</a>, it can be collaboratively drafted by the community. Mastodon provides instance owners with moderation tools and provides users with reporting tools, and there&rsquo;s an expectation that they&rsquo;ll both be used. As with other decentralized social networks, it is the responsibility of the instance owner to moderate and foster a social environment that serves the best interests of the instance users.</p>
<p>Instances typically run on donations, and in the grand scheme of things, are inexpensive to support. Decentralization means that instance owners individually have to bear smaller costs. There&rsquo;s no central body being pressured to make a profit in order to run servers that support millions of users. The effect of this many-owners structure is that decisions that concern any particular instance and rules that it might want to adopt are made by that instance&rsquo;s community, or the instance owner. If a user disagrees with the direction taken, they can communicate directly with the instance owner, or simply move to another instance. There&rsquo;s no &ldquo;take it or leave it,&rdquo; and no forced acceptance of terms. Users always have somewhere else to go.</p>
<p>This, in general, means that over many instances, and via many moderators, more people from diverse backgrounds with a collection of both overlapping and contrasting interests are able to have a voice in how the social network evolves.</p>
<p>If instance owners have their users&rsquo; best interests, not addiction, in mind; if moderators act responsibly, and according to their instance rules, moderate for good; and if a wide and varying selection of instances with differing interests, political viewpoints, and topics continue to be available; then decentralized social networks <em>might</em> be better for your health.</p>
<h2 id="where-this-leaves-pixelfed-and-all-social-networks">Where this leaves PixelFed (and all social networks)</h2>
<p>All social networks have the potential to do more good than harm, but it is up to those who control them to put in the constant, proactive effort required to make that happen. Twitter has recently been making some steps towards becoming a healthier network, like <a href="https://www.cnbc.com/2019/10/30/twitter-bans-political-ads-after-facebook-refused-to-do-so.html">banning political ads</a> and <a href="https://techcrunch.com/2020/02/04/twitters-policy-on-deepfakes-and-manipulated-media-will-only-remove-harmful-tweets-including-voter-suppression/">highlighting manipulated media</a>. I think they&rsquo;re ahead of the curve. With decentralized social networks, there&rsquo;s at least more chances for the possibility that instance owners truly want to do more good than harm with their own little piece of the whole.</p>
<p>While photo sharing networks will, by their essential nature, bypass cognitive thinking and have an advantage over their users that way, there are many design considerations that PixelFed can implement in order to make the network healthier. Features such as comments, likes, timelines, and push notifications can be designed to provide utility more than drive addiction, and there are <a href="https://qz.com/1264547/facebooks-problems-can-be-solved-with-design/">designers more qualified than I</a> who can tell you how.</p>
<p>These networks will have to constantly resist the temptation to take the easy route. They will have to work to avoid success based on the exploitation of their users&rsquo; desires to chase the easy dopamine hit. They will have to prioritize the ability of the social network to add real value to the lives of its users - at the expense of its own potential to garner mindless, meaningless popularity.</p>
<p>This is in no way a condemnation of PixelFed or any other decentralized photo sharing network. Personally, I sincerely hope they succeed in giving users a healthy, safe, and free-as-in-freedom network for sharing photos with friends, and with the rest of the federated community. It will require considered design with mental health at the forefront; the active, caring effort of moderators and instance owners; and ongoing collaboration from the federated community at large to work together to build for the greater good.</p>
<p>A photo-sharing social media network that does more good than harm? It&rsquo;s possible. But it won&rsquo;t be easy.</p>
]]></content></entry><entry><title type="html">The past ten years, or, how to get better at anything</title><link href="https://victoria.dev/posts/the-past-ten-years-or-how-to-get-better-at-anything/"/><id>https://victoria.dev/posts/the-past-ten-years-or-how-to-get-better-at-anything/</id><author><name>Victoria Drake</name></author><published>2019-12-31T08:27:31-04:00</published><updated>2019-12-31T08:27:31-04:00</updated><content type="html"><![CDATA[<p>If you want to get better at anything:</p>
<ol>
<li>Solve your own problems,</li>
<li>Write about it,</li>
<li>Teach others.</li>
</ol>
<h2 id="1-searching-a-decade-ago">1. Searching, a decade ago</h2>
<p>I was a young graduate with newly-minted freedoms, and I was about to fall in love. I had plenty of imagination, a couple handfuls of tenacity, and no sense of direction at all.</p>
<p>For much of my youth, when I encountered a problem, I just sort of bumped up against it. I tried using whatever was in my head from past experiences or my own imagination to find a solution. For some problems, like managing staff duties at work, my experience was sufficient guidance. For other, more complicated problems, it wasn&rsquo;t.</p>
<p>When you don&rsquo;t have a wealth of experience to draw upon, relying on it is a poor strategy. Like many people at my age then, I thought I knew enough. Like many people at my age now, I recognize how insufficient &ldquo;enough&rdquo; can be. A lack of self-directed momentum meant being dragged in any direction life&rsquo;s currents took me. When falling in love turned out to mean falling from a far greater height than I had anticipated, I tumbled on, complacent. When higher-ups at work handed me further responsibilities, I accepted them without considering if I wanted them at all. When, inevitably, life became more and more complicated, I encountered even more problems I didn&rsquo;t know how to solve. I felt stuck.</p>
<p>Though I was morbidly embarrassed about it at the time, I&rsquo;m not shy to say it now. At one point, it had to be pointed out to me that I could search the Internet for the solution to any of my problems. Anything I wanted to solve - interactions with people at work, a floundering relationship, or the practicalities of filing taxes - I was lucky enough to have the greatest collection of human knowledge ever assembled at my disposal.</p>
<p>Instead of bumbling along in the floatsam of my own trial and error, I started to take advantage of the collective experiences of all those who have been here before me. They weren&rsquo;t always right, and I often found information only somewhat similar to my own experience. Still, it always got me moving in the right direction. Eventually, I started to steer.</p>
<p>There&rsquo;s a learning curve, even when just searching for a problem. Distilling the jumble of confusion in your head to the right search terms is a learned skill. It helped me to understand <a href="https://www.google.com/search/howsearchworks/crawling-indexing/">how search engines like Google work</a>:</p>
<blockquote>
<p>We use software known as web crawlers to discover publicly available webpages. Crawlers look at webpages and follow links on those pages, much like you would if you were browsing content on the web. They go from link to link and bring data about those webpages back to Google’s servers&hellip;</p>
<p>When crawlers find a webpage, our systems render the content of the page, just as a browser does. We take note of key signals — from keywords to website freshness — and we keep track of it all in the Search index.</p></blockquote>
<p>Sometimes, I find what I need by using the right keyword. Other times, I discover the keyword by searching for text that might surround it on the content of the page. For software development, I search for the weirdest word or combination of words attached to what I&rsquo;m trying to learn. I rarely find whole solutions in my search results, but I always find direction for solving the problem myself.</p>
<p>Solving my own problems, even just a few little ones at a time, gave me confidence and built momentum. I began to pursue the experiences I wanted, instead of waiting for experiences to happen to me.</p>
<h2 id="2-updating-the-internet-some-years-ago">2. Updating the Internet, some years ago</h2>
<p>I&rsquo;d solved myself out of a doomed relationship and stagnant job. I found myself, rather gleefully, country-hopping with just <a href="https://heronebag.com">one backpack</a> of possessions. I met, though I didn&rsquo;t know it at the time, my future husband. I found a new sense of freedom, of having options, that I knew I never wanted to give up. I had to find a means to sustain myself by working remotely.</p>
<p>When I first tried to make a living on the Internet, I felt like a right amateur. Sitting on the bed, hunched over my laptop, I started a crappy Wordpress blog with a modified theme that didn&rsquo;t entirely work. I posted about how I tried and failed to start a dropshipping business. My site was terrible, and I knew it. My first forays into being a &ldquo;real&rdquo; developer were to solve my own problems: how to get my blog working, how to set up a custom domain, how to get and use a security certificate. I found some guidance in blogs and answers that others had written, but much of it was outdated, or not entirely correct. Still, it helped me.</p>
<p>I can&rsquo;t imagine a world in which people did nothing to pass on their knowledge to future generations. Our stories are all we have beyond instinct and determination.</p>
<p>I stopped posting about dropshipping and started writing about the technical problems I was solving. I wrote about what I tried, and ultimately what worked. I started hearing from people who thanked me for explaining the solution they were looking for. Even in posts where all I&rsquo;d done was link to the correct set of instructions on some other website, people thanked me for leading them to it. I still thought my website was terrible, but I realized I was doing something useful. The more problems I solved, the better I got at solving them, and the more I wrote about it in turn.</p>
<p>One day, someone offered me money for one of my solutions. To my great delight, they weren&rsquo;t the last to do so.</p>
<p>As I built up my skills, I started taking on more challenging offers to solve problems. I discovered, as others have before me, that especially in software development, not every solution is out there waiting for you. The most frustrating part of working on an unsolved problem is that, at least to your knowledge, there&rsquo;s no one about to tell you how to solve it. If you&rsquo;re lucky, you&rsquo;ve at least got a heading from someone&rsquo;s cold trail in an old blog post. If you&rsquo;re lucky and tenacious, you&rsquo;ll find a working solution.</p>
<p>Don&rsquo;t leave it scribbled in the corner of a soon-forgotten notepad, never to ease the path of someone who comes along later. Update that old blog post by commenting on it, or sending a note to the author. Put your solution on the Internet, somewhere. Ideally, blog about it yourself in as much detail as you can recall. Some of the people who find your post might have the same problem, and might even be willing to pay you to solve it. And, if my own experience and some scattered stories hold true, one of the people to who&rsquo;ll come along later, looking for that same solution, will be you.</p>
<h2 id="3-paying-it-forwards-backwards-and-investing-two-years-ago">3. Paying it forwards, backwards, and investing; two years ago</h2>
<p>Already being familiar with how easy it is to stop steering and start drifting, I sought new ways to challenge myself and my skills. I wanted to do more than just sustain my lifestyle. I wanted to offer something to others; something that mattered.</p>
<p>A strange thing started happening when I decided, deliberately, to write an in-depth technical blog about topics I was only beginning to become familiar with. I started to deeply understand some fundamental computer science topics - and trust me, that was strange enough - but odder than that was that others started to see me as a resource. People asked me questions because they thought I had the answers. I didn&rsquo;t, at least, not always - but I knew enough now to not let that stop me. I went to find the answers, to test and understand them, and then I wrote about them to teach those who had asked. I hardly noticed, along the way, that I was learning too.</p>
<p>When someone&rsquo;s outdated blog post leads you to an eventual solution, you can pay them back by posting an update, or blogging about it yourself. When you solve an unsolved problem, you pay it forward by recording that solution for the next person who comes along (sometimes you). In either case, by writing about it - honestly, and with your best effort to be thorough and correct - you end up investing in yourself.</p>
<p>Explaining topics you&rsquo;re interested in to other people helps you find the missing pieces in your own knowledge. It helps you fill those gaps with learning, and integrate the things you learn into a new, greater understanding. Teaching something to others helps you become better at it yourself. Getting better at something - anything - means you have more to offer.</p>
<h2 id="the-past-decade-and-the-next-decade">The past decade, and the next decade</h2>
<p>It&rsquo;s the end of a decade. I went from an aimless drift through life to being captain of my ship. I bettered my environment, learned new skills, made myself a resource, and became a wife to my best friend. I&rsquo;m pretty happy with all of it.</p>
<p>It&rsquo;s the end of 2019. Despite a whole lot of life happening just this year, I&rsquo;ve written one article on this blog for each week since I started in July. That&rsquo;s 23 articles for 23 weeks, plus one Christmas bonus. I hear from people almost every day who tell me that an article I wrote was helpful to them, and it makes me happy and proud to think that I&rsquo;ve been doing something that matters. The first week of January will make this blog two years old.</p>
<p>The past several months have seen me change tack, slightly. I&rsquo;ve become very interested in cybersecurity, and have been lending my skills to the Open Web Application Security Project. I&rsquo;m now an author and maintainer of the <a href="https://github.com/OWASP/wstg">Web Security Testing Guide</a>, version 5. I&rsquo;m pretty happy with that, too.</p>
<p>Next year, I&rsquo;ll be posting a little less, though writing even more, as I pursue an old dream of publishing a book, as well as develop my new cybersecurity interests. I aim to get better at quite a few things. Thankfully, I know just how to do it - and now, so do you:</p>
<ol>
<li>Solve your own problems,</li>
<li>Write about it,</li>
<li>Teach others.</li>
</ol>
<p>Have a very happy new decade, dear reader.</p>
]]></content></entry><entry><title type="html">Three healthy cybersecurity habits</title><link href="https://victoria.dev/archive/three-healthy-cybersecurity-habits/"/><id>https://victoria.dev/archive/three-healthy-cybersecurity-habits/</id><author><name>Victoria Drake</name></author><published>2019-12-26T08:27:31-04:00</published><updated>2019-12-26T08:27:31-04:00</updated><content type="html"><![CDATA[<p>In a similar fashion to everyone getting the flu now and again, the risk of catching a cyberattack is a common one. Both a sophisticated social engineering attack or grammatically-lacking email phishing scam can cause real damage. No one who communicates over the Internet is immune.</p>
<p>Like proper hand washing and getting a flu shot, good habits can lower your risk of inadvertently allowing cybergerms to spread. Since the new year is an inspiring time for beginning new habits, I offer a few suggestions for ways to help protect yourself and those around you.</p>
<h2 id="1-get-a-follow-up">1. Get a follow-up</h2>
<p>Recognizing a delivery method for cyberattack is getting more difficult. Messages with malicious links do not always come from strangers. They may appear to be routine communications, or seem to originate from someone you know or work with. Attacks use subtle but deeply-engrained cognitive biases to override your common sense. Your natural response ensures you click.</p>
<p>Thankfully, there&rsquo;s a simple low-tech habit you can use to deter these attacks: before you act, follow-up.</p>
<p>You may get an email from a friend that needs help, or from your boss who&rsquo;s about to get on a plane. It could be as enticing and mysterious as a direct message from an acquaintance who sends a link asking, &ldquo;Lol. Is this you?&rdquo; It takes presence of mind to override the panic these attacks prey on, but the deterrent itself is quick and straightforward. Send a text message, pick up the phone and call, or walk down the hall, and ask, &ldquo;Did you send me this?&rdquo;</p>
<p>If the message is genuine, there&rsquo;s no harm in a few extra minutes to double check. If it&rsquo;s not, you&rsquo;ll immediately alert the originating party that they may be compromised, and you may have deterred a cyberattack!</p>
<h2 id="2-use-and-encourage-others-to-use-end-to-end-encrypted-messaging">2. Use, and encourage others to use, end-to-end encrypted messaging</h2>
<p>When individuals in a neighborhood get the flu shot, others in that neighborhood are safer for it. Encryption is similarly beneficial. Encourage your friends, coworkers, and Aunt Matilda to switch to an app like Signal. By doing so, you&rsquo;ll reduce everyone&rsquo;s exposure to more exploitable messaging systems.</p>
<p>This doesn&rsquo;t mean that you must stop using other methods of communication entirely. Instead, think of it as a hierarchy. Use Signal for important messages that should be trusted, like requests for money or making travel arrangements. Use all other methods of messaging, like SMS or social sites, only for &ldquo;unimportant&rdquo; communications. Now, if requests or links that seem important come to you through your unimportant methods, you&rsquo;ll be all the more likely to second-guess them.</p>
<h2 id="3-dont-put-that-dirty-usb-plug-into-your-">3. Don&rsquo;t put that dirty USB plug into your ***</h2>
<p>You wouldn&rsquo;t brush your teeth with a toothbrush you found on the sidewalk. Why would you plug in a USB device if you don&rsquo;t know where it&rsquo;s been?! While we might ascribe <a href="https://en.wikipedia.org/wiki/2008_cyberattack_on_United_States">putting a random found USB drive in your computer</a> to a clever exploitation of natural human curiosity, we&rsquo;re no sooner likely to suspect using <a href="https://www.howtogeek.com/444267/how-safe-are-public-charging-stations/">a public phone-charging station</a> or <a href="https://www.theverge.com/2019/8/15/20807854/apple-mac-lightning-cable-hack-mike-grover-mg-omg-cables-defcon-cybersecurity">a USB cable</a> we bought ourselves. Even seemingly-innocuous USB <a href="https://www.cbsnews.com/news/why-your-usb-device-is-a-security-risk/">peripherals</a> or <a href="https://www.us-cert.gov/ncas/current-activity/2010/03/08/Energizer-DUO-USB-Battery-Charger-Software-Allows-Remote-System">rechargeable</a> devices can be a risk.</p>
<p>Unlike email and some file-sharing services that scan and filter files before they reach your computer, plugging in via USB is as direct and <a href="https://www.wired.com/2014/07/usb-security/">unprotected</a> as connection gets. Once this connection is made, the user doesn&rsquo;t need to do anything else for a whole host of bad things to happen. Through USB connections, problems like malware and ransomware can easily infect your computer or phone.</p>
<p>There&rsquo;s no need to swear off the convenience of USB connectivity, or to avoid these devices altogether. Instead of engaging in questionable USB behavior, don&rsquo;t cheap out on USB devices and cables. If it&rsquo;s going to get plugged into your computer, ensure you&rsquo;re being extra cautious. Buy it from the manufacturer (like the Apple Store) or from a reputable company or reseller with supply chain control. When juicing up USB-rechargeables, don&rsquo;t plug them into your computer. Use <a href="https://heronebag.com/blog/40-hours-drive-time-my-road-trip-charging-essentials/">a wall charger with a USB port</a> instead.</p>
<h2 id="practice-healthy-cybersecurity-habits">Practice healthy cybersecurity habits</h2>
<p>Keeping your devices healthy and happy is a matter of practicing good habits. Like battling the flu, good habits can help protect yourself and those around you. Incorporate some conscientious cybersecurity practices in your new year resolutions - or start them right away.</p>
<p>Have a safe and happy holiday!</p>
]]></content></entry><entry><title type="html">The care and feeding of an IoT device</title><link href="https://victoria.dev/archive/the-care-and-feeding-of-an-iot-device/"/><id>https://victoria.dev/archive/the-care-and-feeding-of-an-iot-device/</id><author><name>Victoria Drake</name></author><published>2019-11-27T08:59:35-05:00</published><updated>2019-11-27T08:59:35-05:00</updated><content type="html"><![CDATA[<p>Giving someone a puppy for Christmas might work really well in a movie, but in real life often comes hitched to a multitude of responsibilities that the giftee may not be fully prepared to take on. The same is true for Internet of Things (IoT) devices, including Amazon&rsquo;s Alexa-enabled devices, Google Home, and other Internet-connected appliances like cameras, lightbulbs, and toasters. Yes, they have those now.</p>
<p>Like puppies, IoT devices are still young. Many contain <a href="https://threatpost.com/iot-devices-vulnerable-takeover/144167/">known vulnerabilities</a> that remote attackers can use to gain access to device owners&rsquo; networks. These attacks are sometimes as laughably simple as using a default username and password that the <a href="https://gdpr.report/news/2019/06/12/research-reveals-the-most-vulnerable-iot-devices/">device owner cannot change</a>.</p>
<p>Does all this mean you shouldn&rsquo;t give Grandma Mabel a new app-enabled coffee maker or Ring doorbell for Christmas? Probably, although not necessarily. Like puppies, properly-maintained IoT devices are capable of warming your heart without causing <em>too</em> much havoc; but they take a lot of work to care for. Here are a few responsibilities to keep in mind for the care and feeding of an IoT device.</p>
<h2 id="immature-security">Immature security</h2>
<p>Many manufacturers of IoT devices have not made security a priority. There aren&rsquo;t yet any enforced <a href="https://blog.rapid7.com/2019/03/27/the-iot-cybersecurity-improvement-act-of-2019/">security requirements</a> for this industry, which leaves the protection of your device and the network it&rsquo;s connected to in the hands of the manufacturer.</p>
<p>It&rsquo;s not just obscure no-name toasters, either; malicious third-party apps have snuck onto Amazon&rsquo;s and Google&rsquo;s more reputable devices and enabled attackers to <a href="https://www.cnet.com/news/alexa-and-google-voice-assistants-app-exploits-left-it-vulnerable-to-eavesdropping/">eavesdrop</a> on unsuspecting owners.</p>
<p>Until security regulations are put in place and enforced, it&rsquo;s buyer beware for both devices and third-party applications. To the extent possible, potential owners must do ample research to weed out vulnerable devices and untrustworthy apps.</p>
<h2 id="protecting-your-network">Protecting your network</h2>
<p>If you think hackers aren&rsquo;t likely to find your device in the vast expanse of the Internet, you might be wrong. These days, obscurity doesn&rsquo;t provide security. It&rsquo;s no longer left up to a potential attacker&rsquo;s fallible human eyes to find your insecure front door camera in a cacophony of wireless traffic; <a href="https://money.cnn.com/2013/04/08/technology/security/shodan/index.html">IoT search engines</a> like <a href="https://www.shodan.io/">Shodan</a> will do that for them. Thankfully, these search engines are also used for good, enabling white hat hackers and penetration testers to find and fix insecure devices.</p>
<p>Just like locking your own front door, IoT owners are responsible for locking down access to their devices. This may mean searching through device settings to make sure default credentials are changed, or checking to make sure that a device used on your private home network doesn&rsquo;t by default have public Internet access.</p>
<p>Where the options are available, HTTPS and multifactor authentication should be enabled. The use of a VPN can also keep your devices from being found.</p>
<h2 id="keeping-them-patched">Keeping them patched</h2>
<p>Unlike puppies, many IoT devices are &ldquo;headless&rdquo; and have no inherent way of interfacing with a human. An app-controlled lightbulb, for example, may be all but useless without the software that makes it shine. As convenient as it may be to have your 1500K mood lighting come on automatically at dusk, it also means automatically ceding control of the device to its software developers.</p>
<p>When vulnerabilities in your phone&rsquo;s operating system are discovered and patched, it&rsquo;s likely that automatic updates are pushed and installed overnight, possibly without you even knowing. Your IoT device, on the other hand, may have no such support. In those cases, it&rsquo;s completely up to the user to discover that an update is needed, find and download the patch, then correctly update their device. Even for owners with some technical expertise, this process takes significant effort. Many <a href="https://www.machinedesign.com/industrial-automation/software-updates-are-new-hurdle-iot-security">device owners aren&rsquo;t even aware</a> that their software is dangerously outdated.</p>
<p>In practical terms, this means that users without the time, knowledge, or willingness to keep their devices updated should reconsider owning them. Alternatively, some research can help prospective owners choose devices that receive automatic push updates from their (hopefully responsible) manufacturers over WiFi.</p>
<h2 id="being-responsible">Being responsible</h2>
<p>Raising a healthy and happy IoT device is no small task, especially for potential owners with little time or willingness to put in the required effort. With the proper attention and maintenance, your Internet-connected appliance can bring joy and convenience to your life; but without, it introduces a potential security risk and a whole lot of trouble.</p>
<p>Before getting or giving IoT, be sure the potential owner is up to the task of caring for it.</p>
<p>You can learn more about basic cybersecurity for IoT (as a user or maker) by reading <a href="https://csrc.nist.gov/publications/detail/nistir/8259/draft">NIST&rsquo;s draft guidelines publication</a>.</p>
]]></content></entry><entry><title type="html">On doing great things</title><link href="https://victoria.dev/archive/on-doing-great-things/"/><id>https://victoria.dev/archive/on-doing-great-things/</id><author><name>Victoria Drake</name></author><published>2019-03-08T18:36:15-05:00</published><updated>2019-03-08T18:36:15-05:00</updated><content type="html"><![CDATA[<p>It&rsquo;s International Women&rsquo;s Day, and I&rsquo;m thinking about Grace Hopper.</p>
<p><a href="https://en.m.wikipedia.org/wiki/Grace_Hopper">Grace Hopper</a> was an amazing lady who did great things. She envisioned and helped create programming languages that translate English terms into machine code. She persevered in her intention to join the US Navy from the time she was rejected at 34 years old, to being sworn in to the US Navy Reserve three years later, to retiring with the rank of commander at age 60&hellip; then was recalled (twice) and promoted to the rank of captain at the age of 67. She advocated for distributed networks and developed computer testing standards we use today, among other achievements too numerous to list here.</p>
<p>By my read, throughout her life, she kept her focus on her work. She did great things because she could do them, and felt some duty to do them. Her work speaks for itself.</p>
<p>I recently came across a sizeable rock denoting a rather small, quiet park. It looks like this:</p>
<p><img src="grace-murray-hopper-park.jpeg#center" alt="Signage on a rock denoting Grace Murray Hopper Park"></p>
<p>When I first saw this park, I thought it in no way did this great lady justice. But upon some reflection, its lack of assumption and grandeur grew on me. And today, it drew to the forefront something that&rsquo;s been on my mind.</p>
<p>I try and contribute regularly to the wide world of technology, usually through building things, writing, and mentorship. I sometimes get asked to participate in female-focused tech events. I hear things like, &ldquo;too few developers are women,&rdquo; or &ldquo;we need more women in blockchain,&rdquo; or &ldquo;we need more female coders.&rdquo;</p>
<p>For some time I haven&rsquo;t been sure how to respond, because while my answer isn&rsquo;t &ldquo;yes,&rdquo; it&rsquo;s not exactly &ldquo;no,&rdquo; either. It&rsquo;s really, &ldquo;no, because&hellip;&rdquo; and it&rsquo;s because I&rsquo;m afraid. I&rsquo;m afraid of misrepresenting myself, my values, and my goals.</p>
<p>Discrimination and racism are real things. They exist in the minds and attitudes of a very small percentage of very loud people, as they always will. These people aren&rsquo;t, however, the majority. They are small.</p>
<p>I think that on the infrequent occasions when we encounter these people, we should do our best to lead by example. We should have open minds, tell our stories, listen to theirs. Try and learn something. That&rsquo;s all.</p>
<p>When I present myself, I don&rsquo;t point out that I&rsquo;m a woman. I don&rsquo;t align myself with &ldquo;women in tech&rdquo; or seek to represent them. I don&rsquo;t go to women-only meetings or support organizations that discriminate against men, or anyone at all. It&rsquo;s not because I&rsquo;m insecure as a woman, or ashamed that I&rsquo;m a woman, or some other inflammatory adjective that lately shows up in conjunction with being female. It&rsquo;s because I&rsquo;ve no reason to point out my gender, any more than needing to point out that my hair is black, or that I&rsquo;m short. It&rsquo;s obvious and simultaneously irrelevant.</p>
<p>When I identify with a group, I talk about the go-getters who wake up at 0500 every day and go work out - no matter the weather, or whether they feel like it. I tell stories about the people I met in different countries around the world, who left home, struck out on their own, and had an adventure, because they saw value in the experience. I identify with people who constantly build things, try things, design and make things, and then share those things with the world, because they love to do so. This is how I see myself. This is what matters to me.</p>
<p>Like the unassuming park named after an amazing woman, when truly great things are done, they are done relatively quietly. Not done for the fanfare of announcing them to the world, but for the love of the thing itself. So go do great things, please. The world still needs them.</p>
]]></content></entry><entry><title type="html">How to set up a short feedback loop as a solo coder</title><link href="https://victoria.dev/archive/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/"/><id>https://victoria.dev/archive/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/</id><author><name>Victoria Drake</name></author><published>2018-07-02T10:08:41-04:00</published><updated>2018-07-02T10:08:41-04:00</updated><content type="html"><![CDATA[<p>I&rsquo;ve spent the last couple years as a solo freelance developer. Comparing this experience to previously working in companies, I&rsquo;ve noticed that those of us who work alone can have fewer iterative opportunities for improvement than developers who work on teams. Integral to having opportunities to improve is the concept of a short feedback loop: a process of incorporating new learning from observation and previous experience continuously over a short period of time. This process has to be <em>manufactured</em> by people working mostly alone, instead of, as is often the case, <em>adopted</em> when you join a team.</p>
<p>In this post I hope to share what I&rsquo;ve learned about setting yourself up to improve quickly and continuously as a solo coder.</p>
<h2 id="about-feedback-loops">About feedback loops</h2>
<p>United States Air Force Colonel John Boyd developed the concept of the <a href="https://en.wikipedia.org/wiki/OODA_loop">OODA loop</a>, OODA being an acronym for <em>observe, orient, decide, act</em>. In military operations, this illustrates a process of decision-making based on the constant ingestion of new information:</p>
<p><strong>Observe:</strong> Obtain raw information about unfolding circumstances and the current environment.
<strong>Orient:</strong> Put raw observations in context. Consider such things as relevancy to the current situation and previously gained knowledge and expertise.
<strong>Decide:</strong> Make a plan for moving towards your goal.
<strong>Act:</strong> Execute the plan.</p>
<p>Since it&rsquo;s a loop, the <em>act</em> stage leads directly back into the <em>observe</em> stage. This is the critical &ldquo;feed back&rdquo; concept that enables increasingly successful iterations. It&rsquo;s widely applicable beyond military operations - you may recognize it as the origin of the <a href="https://en.wikipedia.org/wiki/PDCA">PDCA</a> (plan-do-check-act) method.</p>
<p>I like the OODA loop for being a succinct illustration of a general feedback loop. Many concepts and working methods build on the idea of feedback loops, including <a href="https://en.wikipedia.org/wiki/DevOps">DevOps</a> and <a href="https://en.wikipedia.org/wiki/Agile_software_development">Agile software development</a> methods.</p>
<h3 id="development-team-feedback-loop">Development team feedback loop</h3>
<p>Let&rsquo;s look at what some components of a feedback loop for a developer on a team might look like:</p>
<ol>
<li>Direction from product owners or reviews from users</li>
<li>Daily scrum/standup with whole team</li>
<li>Prioritization with developer team</li>
<li>Individual coding and testing</li>
<li>Peer code review</li>
<li>Deployment and performance monitoring</li>
</ol>
<p>Implicit in these steps is the support of co-workers and management - in other words, someone to answer to. How can a solo freelance developer create a similar environment of accountability?</p>
<h3 id="solo-developer-feedback-loop">Solo developer feedback loop</h3>
<p>Here are some possible steps that an individual freelance developer can implement to create a short feedback loop:</p>
<ol>
<li>Build discipline</li>
<li>Clarify concrete top-level goals</li>
<li>Prioritize and plan mid-level and low-level goals</li>
<li>Automate your work</li>
<li>Block out time for code review</li>
<li>Block out time for process review</li>
<li>Update your goals and processes with the results of your reviews</li>
</ol>
<p>I&rsquo;ll cover each of these stages in detail below.</p>
<h2 id="build-discipline">Build discipline</h2>
<p>More of a prerequisite than a stage in itself, building discipline is what enables our short feedback loop to work. Nothing else in this article will be helpful unless we have the skill to do something we don&rsquo;t want to do. Discipline is most certainly a skill. It can be learned, trained, and improved just like any other.</p>
<p>Why is discipline so important? Because when we&rsquo;re crunching to get a project completed this Friday evening, we&rsquo;re not going to want to write a good commit message. We&rsquo;re not going to want to clean up the code comments. We just want to see the darn thing go, <em>Hello, git push -f</em>. It&rsquo;s in those moments that discipline enables us to not miss an opportunity to practice, learn, and improve our work process. Discipline helps us avoid Friday night commits that turn into Monday morning <code>git reset --hard</code>s.</p>
<h2 id="clarify-concrete-top-level-goals">Clarify concrete top-level goals</h2>
<p><img src="feedback-topgoal.png" alt="Envisioning a peanut butter and jelly sandwich"></p>
<p>Whether working for a client or bootstrapping our own best-new-app-ever, we won&rsquo;t be able to measure any progress or improvements without something to measure them against.</p>
<p>When I&rsquo;m discussing a new project with a client, I always speak in terms of concrete achievements. This could take the form of accomplishing a specific feature by a certain date, or deciding what the MVP looks like to a user. This is as much to my benefit as my client&rsquo;s. By agreeing, in writing, <em>what</em> will be achieved and <em>when</em>, my client and I have clearly defined top-level goals and can both assess how the project is progressing. When I&rsquo;m working for myself, I treat myself as I would a client. I make a commitment, in writing, describing what will be achieved, and when. This can be something as simple as a goals list for the week, or as detailed as a kanban board.</p>
<p>The point of having a concrete goal, however, is not to stick to it at all costs. It&rsquo;s important to set an expectation, with ourselves and with our clients, that the goals will be revisited at mutually-agreeable dates over the course of the project. This enables the all-important &ldquo;feed back&rdquo; part of the loop.</p>
<h2 id="prioritize-and-plan-mid-level-and-low-level-goals">Prioritize and plan mid-level and low-level goals</h2>
<p><img src="feedback-stepgoals.png" alt="The components of a peanut butter and jelly sandwich"></p>
<p>Few goals are achieved all in one step. Even the simple process of making a peanut butter and jelly sandwich (a favourite computer programming <a href="https://www.youtube.com/watch?v=y62zj9ozPOM&amp;t=1016s">teaching example</a>) can be broken down into successively smaller, more precise instructions. While we humans may not require the granularity that a computer program does, goals that are chunked into time-boxed, achievable steps are much more easily digested. 🥪</p>
<p>Start with the mid-level goals, and make each step concrete. If the goal is to release a new open source web app, for example, the steps might look like this:</p>
<ol>
<li>Complete app JavaScript</li>
<li>Create front end and stylesheet</li>
<li>Do local tests</li>
<li>Set up cloud server</li>
<li>Deploy app to cloud</li>
<li>Do tests</li>
<li>Add repository to GitHub</li>
<li>Post on Hacker News</li>
<li>Profit!!!</li>
</ol>
<p>Each of the above examples encapsulates many smaller, low-level goals - we can think of these as our to-do list items. For example, &ldquo;Set up cloud server&rdquo; might involve:</p>
<ol>
<li>Research cloud providers</li>
<li>Decide on service and sign up</li>
<li>Set up server/instance</li>
<li>Add integrations</li>
<li>Test deployment</li>
</ol>
<p>Our parameters for chunk sizes and what constitutes a &ldquo;step&rdquo; may be different from one another, and will likely change from project to project. If your mid-level and low-level steps clearly define a concrete path for achieving the top-level goals you set, then you&rsquo;re in good shape. Later on, evaluating the decision process that brought us to these mid-level and low-level goals enables us to bring our feedback loop full circle.</p>
<h2 id="automate-your-work">Automate your work</h2>
<p><img src="feedback-autorobot.png" alt="Peanut butter and jelly sandwich robot"></p>
<p>I recently read a great article entitled <a href="https://queue.acm.org/detail.cfm?id=3197520">Manual Work is a Bug</a>. It discusses a process by which successful developers document and eventually automate their work. The beauty of this idea is in its simplicity. By writing down the things we do manually, we&rsquo;re able to correct and refine our processes. By refining our processes, we can more easily translate them into code snippets and scripts. With a collection of scripts that we can string together, we can automate our work.</p>
<p>Automating work isn&rsquo;t only about saving time. It reduces haven&rsquo;t-had-my-coffee-yet errors, minimizes cognitive load allowing more room for creativity, and allows our processes to be repeatable across collaborators and projects. It help shorten our feedback loop by ensuring we aren&rsquo;t doing the same thing three times in three different ways.</p>
<p>We can begin to automate by starting our own personal wiki. If we build a habit of writing down every manual thing we do, no matter how basic it may seem at the time, we give ourselves more opportunities to spot patterns, and thus possible integrations and improvements.</p>
<p>The first time we do something manually, we write out the steps. The second time, we follow the steps. This gives us the opportunity to correct and refine them based on what we&rsquo;ve learned since the first time. Over successive iterations, we might replace parts of manual commands with variables; we might find handy snippets of bash scripts that automate just a part of our task. As long as we keep revising and improving our personal wiki, we&rsquo;re moving towards automation.</p>
<h2 id="block-out-time-for-code-review">Block out time for code review</h2>
<p><img src="cover_feedback-pbjreview.png" alt="Reviewing a peanut butter and jelly sandwich with a clipboard"></p>
<p>It&rsquo;s all too easy to commit messy code when we work alone. We think, <em>who&rsquo;s going to see it? I&rsquo;ll fix it later.</em> Each time that happens, though, we&rsquo;re building a habit. It&rsquo;s a bad one.</p>
<p>Working alone means there&rsquo;s no one likely to give feedback on our commits when we&rsquo;re doing something that doesn&rsquo;t make sense, or that could be improved. Instead, we have to actively seek out opportunities to improve. Open source communities are amazing for this. There&rsquo;s a wealth of information available to us in terms of coding styles, examples of refactored code, and a smorgasbord of snippets that achieve that-thing-we-were-trying-to-do but in fewer lines. We can learn all we please, if we just block out the time to do it.</p>
<p>Schedule your own code review at a time that makes sense for you and the project you&rsquo;re working on. This might be each time you finish a fix or feature, or at regular intervals daily or weekly. If you have someone who can help, book them. There are also a great many organizations that host chatrooms full of people happy to lend a hand: <a href="https://www.freecodecamp.org/">freeCodeCamp</a> and the <a href="https://github.com/OWASP/wstg">OWASP Web Security Testing Guide</a>, to name a couple.</p>
<p>Do some research on basic best practices for what you&rsquo;re working on. Set yourself a time limit though, and take what you read with a grain of salt. There&rsquo;s a lot of rabbit holes in that field. As a starting point, I&rsquo;d recommend learning about DRY code, and watching <a href="https://www.youtube.com/watch?v=p0O1VVqRSK0&amp;feature=youtu.be&amp;t=330">Uncle Bob demand professionalism in software development</a>.</p>
<h3 id="code-review-checklist">Code review checklist</h3>
<p>Here&rsquo;s my personal code review checklist, based off some general best practices. Feel free to use it as a starting point for your own!</p>
<blockquote>
<p><strong>Victoria&rsquo;s Code Review Extravaganza!</strong></p>
<ul>
<li><input disabled="" type="checkbox"> This solves a high-priority item.</li>
<li><input disabled="" type="checkbox"> This is a complete implementation that follows the specification.</li>
<li><input disabled="" type="checkbox"> Off-topic changes were not included and have been added to backlog.</li>
<li><input disabled="" type="checkbox"> Variable names are meaningful and there are no magic numbers.</li>
<li><input disabled="" type="checkbox"> Correct and useful error messages are returned at every opportunity.</li>
<li><input disabled="" type="checkbox"> No debugging print statements were left in.</li>
<li><input disabled="" type="checkbox"> This code is DRY and modular.</li>
<li><input disabled="" type="checkbox"> This code is secure. Private and public code are well separated.</li>
<li><input disabled="" type="checkbox"> This code is its own documentation, or the documentation is up to date.</li>
<li><input disabled="" type="checkbox"> A five-year-old could follow this, seriously it&rsquo;s that readable.</li>
<li><input disabled="" type="checkbox"> Unit tests successfully pass.</li>
<li><input disabled="" type="checkbox"> Master was merged into the branch and tested.</li>
<li><input disabled="" type="checkbox"> Formatting follows style guidelines.</li>
<li><input disabled="" type="checkbox"> I cannot find any further edge cases or known defects.</li>
<li><input disabled="" type="checkbox"> I would be happy if this code was publicly attributed to me.</li>
<li><input disabled="" type="checkbox"> I fully understand what the code does and the impact of the changes I made.</li>
<li><input disabled="" type="checkbox"> I actually verified that it actually does what I said it does.</li>
</ul></blockquote>
<p><a href="https://dev.to/gonedark/writing-clean-code">Here is an excellent example</a> of cleaning up code with some of the above points in mind.</p>
<h2 id="block-out-time-for-process-review">Block out time for process review</h2>
<p><img src="feedback-robotreview.png" alt="Reviewing sandwich making robot with clipboard"></p>
<p>Just as we learn from reviewing our code, we refine our processes by reviewing them as well. Process review is most beneficial when visited at regular intervals throughout the project, not just after the project&rsquo;s completion. For short-term projects, a good starting point for scheduling process reviews is at each half-mark - once midway through, and again after completion. Long-term projects may have reviews at each quarter-mark.</p>
<h3 id="process-review-questions">Process review questions</h3>
<p>Process review can be as simple as a short list of questions:</p>
<ol>
<li>What were my top-level goals for this period? Did I meet them?</li>
<li>What were my mid-level and low-level goals for this period? Did I meet them?</li>
<li>Would I have been better served with different or more specific goals? Why?</li>
<li>Did I successfully remove or automate obstacles?</li>
<li>Did I stick to my code review schedule? Why or why not?</li>
<li>How might I remove obstacles next time?</li>
</ol>
<p>Setting aside dedicated time for our process review can help us to answer questions like these thoughtfully and honestly. This allows us to squeeze out every bit of learning we can from our review, helping to shorten our feedback loop.</p>
<h2 id="update-your-goals-and-processes-with-the-results-of-your-reviews">Update your goals and processes with the results of your reviews</h2>
<p><img src="feedback-updategoals.png" alt="Adding additional arms to robot while envisioning a multi-layer PB&amp;J"></p>
<p>All the performance data in the world is no good to us if we don&rsquo;t put it into practice. With each successive code review, we can refine and add to our checklist. With what we learn from each process review, we can fine tune and improve our processes. The more we can invent concrete and observable ways to implement our learning, the more success we&rsquo;ll have.</p>
<p>Making a conscious effort to utilize and practice the things we&rsquo;ve learned is the final, vital, component of our feedback loop. The more often we incorporate new learning, the shorter our loop becomes, allowing us to improve that much faster.</p>
]]></content></entry><entry><title type="html">About time</title><link href="https://victoria.dev/archive/about-time/"/><id>https://victoria.dev/archive/about-time/</id><author><name>Victoria Drake</name></author><published>2017-11-22T14:05:14-05:00</published><updated>2017-11-22T14:05:14-05:00</updated><content type="html"><![CDATA[<p>This morning I read an article that&rsquo;s been making the rounds lately: <a href="https://nautil.us/modern-media-is-a-dos-attack-on-your-free-will-236806/">Modern Media Is a DoS Attack on Your Free Will</a>.</p>
<p>It&rsquo;s made me think, which I must admit, I at first didn&rsquo;t like. See, when I wake up in the morning (and subsequently wake up my computer) the first thing I do is go on Twitter to catch up on everything I missed while I was asleep. All this before my first coffee, mind you. Links on Twitter usually lead to stories on Medium, newly released apps on ProductHunt, and enticing sales on a new gadget or two on Amazon. Wherever it goes, in those blissfully half-awake mental recesses, the last thing I&rsquo;m trying to do is think.</p>
<p>However, yesterday, I also happened to listen to a podcast from freeCodeCamp. It was <a href="https://freecodecamp.libsyn.com/ep-7-the-code-im-still-ashamed-of">#7: The code I&rsquo;m still ashamed of</a>. This lead to thoughts on the responsibilities of programmers - the people tasked with designing and building apps and systems meant to steer the very course of your life.</p>
<p>This morning, the combined swirling mess of notions brought on by these two sources of information had, even before my first coffee, the unfortunate effect of making me think.</p>
<p>Mostly, I thought about intention, and time.</p>
<p>I don&rsquo;t believe it&rsquo;s wildly inaccurate to say that when you go about doing something in your daily life, you have a general awareness of your reason for doing it. If you leave your building and go down the street to Starbucks and buy a coffee, more often than not, it&rsquo;s because you wanted a coffee. If you go to the corner store and buy a litre of milk, you probably intend to drink it. If you find yourself nicely dressed on a Friday night waiting at a well-decorated restaurant to meet another human being with whom you share an apparent mutual attraction, I can risk a guess that you&rsquo;re after some form of pleasant human interaction.</p>
<p>In each of these, and many more examples you can think up, the end goal is clearly defined. There is an expected final step to the process; an expected response; a return value.</p>
<p>What is the return value of opening up the Twitter app? Browsing Facebook? Instagram? In fact, any social media?</p>
<p>The concrete answer is that there isn&rsquo;t one. Perhaps in those of us with resilient self-discipline, there may at least be some sort of time limitation. That&rsquo;s the most we can hope for, however, and no wonder - that&rsquo;s what these and other similar services have been <em>designed</em> for. They&rsquo;re built to be open-ended black-holes for our most precious resource&hellip; time.</p>
<blockquote>
<p>In the case of the Analytical Engine we have undoubtedly to lay out a certain capital of analytical labour in one particular line; but this is in order that the engine may bring us in a much larger return in another line.</p>
<p><em>Ada Augusta (Ada Lovelace)</em> - <a href="https://www.fourmilab.ch/babbage/sketch.html">Notes on <em>Sketch of The Analytical Engine</em></a></p></blockquote>
<p>Okay, so I did some more reading. Specifically, #ThrowbackThursday to the mid 1800&rsquo;s and something my good friend Ada Lovelace once scribbled in a book. Widely considered one of the first computer programmers, she and Charles Babbage pioneered many concepts that programmers today take for granted. The one I&rsquo;m going to hang my point on is, I think, nicely encapsulated in the above quote: the things programmers make are supposed to save you time.</p>
<p>Save it. Not lose it.</p>
<p>I think Ada and Charles would agree that, observing the effects of social media apps, clickbait news sites, and many other forms of attention-hogging interactivity that we haven&rsquo;t even classified yet - something&rsquo;s gone horribly wrong.</p>
<p>What if, as programmers, we actually did something about it?</p>
<p>Consider that collectively - no, even individually - we who design and build the workings of modern technology have an <em>incredible</em> amount of power. The next indie app that goes viral on ProductHunt will consume hundreds of hours of time from its users. Where is all that untapped, pure potential going to? Some open-ended, inoffensive amusement? Another advertising platform thinly veiled as a game? Perhaps another drop of oil to smooth the machinery of The Great Engine of Commerce?</p>
<p>I get it - programmers will build what they&rsquo;re paid to build. That&rsquo;s capitalism, that&rsquo;s feeding your family, survival - life. I&rsquo;m not trying to suggest we all quit our jobs, go live in the woods, and volunteer as humanitarians. That would be nice, but it&rsquo;s impractical.</p>
<p>But we all have side projects. Free time. What are you doing with yours?</p>
<hr>
<p>Before I&rsquo;m accused of being too hand-wavy and idealistic, I want to offer a concrete suggestion. Build things that save time. Not in the &ldquo;I&rsquo;ve made yet another to-do list app for you to download,&rdquo; kind of way, but in the &ldquo;Here&rsquo;s a one-liner to automate this mundane thing that would have taken you hours,&rdquo; kind of way. Here, have a <a href="/blog/batch-renaming-images-including-image-resolution-with-awk/">shameless plug</a>.</p>
<p>I also really like this idea from the first article I mentioned, so hang on tight while I bring this full circle:</p>
<blockquote>
<p><strong>What’s one concrete thing companies could do now to stop subverting our attention?</strong></p>
<p>I would just like to know what is the ultimate design goal of that site or that system that’s shaping my behavior or thinking. What are they really designing my experience for? Companies will say that their goal is to make the world open and connected or whatever. These are lofty marketing claims. But if you were to actually look at the dashboards that they’re designing, the high-level metrics they’re designing for, you probably wouldn’t see those things. You’d see other things, like frequency of use, time on site, this type of thing. If there was some way for the app to say, to the user, “Here’s generally what this app wants from you, from an attentional point of view,” that would be huge. It would probably be the primary way I would decide which apps I download and use.</p></blockquote>
<p>There are so many ways I&rsquo;d love to see this put into practice, from the obvious to the subversive. A little <code>position: sticky;</code> banner? A custom meta tag in the header? Maybe a call to action like this takes more introspection and honesty than a lot of app makers are ready for&hellip; but maybe it just takes a little of our time.</p>
]]></content></entry><entry><title type="html">Things you need to know about becoming a Data Scientist</title><link href="https://victoria.dev/archive/things-you-need-to-know-about-becoming-a-data-scientist/"/><id>https://victoria.dev/archive/things-you-need-to-know-about-becoming-a-data-scientist/</id><author><name>Victoria Drake</name></author><published>2017-03-31T13:19:19+09:00</published><updated>2017-03-31T13:19:19+09:00</updated><content type="html"><![CDATA[<p>I recently attended a panel discussion hosted by General Assembly in Singapore entitled, &ldquo;So you want to be a Data Scientist/Analyst&rdquo;. The panel featured professionals in different stages of their careers and offered a wealth of information to an audience of hopefuls, including tips on how to land a job as a data scientist, and stories debunking myths that color this field.</p>
<h2 id="the-panelists">The panelists</h2>
<ul>
<li><strong>Misrab Faizullah-Khan</strong> - VP of Data Science, <em>GO_JEK</em></li>
<li><strong>Anthony Ta</strong> - Data Scientist, <em>Tech in Asia</em></li>
<li><strong>Leow Guo Jun</strong> - Data Scientist, <em>GO_JEK</em></li>
<li><strong>Gabriel Jiang</strong> - Data Scientist</li>
<li><strong>Adam Drake</strong> - Chief Data Officer, <em>Atazzo</em></li>
</ul>
<p>Here&rsquo;s a rundown of the major points discussed, paraphrased for brevity.</p>
<h3 id="whats-a-day-in-the-life-like">What&rsquo;s a day-in-the-life like</h3>
<p>We&rsquo;re mostly &ldquo;data janitors.&rdquo; A large part of working with data begins with and consists of data sanitation. Without quality data, you won&rsquo;t get accurate results. Understanding how data should be sanitized largely encompasses skills that aren&rsquo;t directly related to data analytics. To fully understand the problem you&rsquo;re hoping to solve, you need to talk with the people involved. It&rsquo;s important that everyone understands all the elements of a project, and exactly what those elements are being called. &ldquo;Sales,&rdquo; as an example, may be calculated differently depending on who you&rsquo;re talking to.</p>
<h3 id="whats-a-data-scientist-vs-data-analyst">What&rsquo;s a data &ldquo;scientist&rdquo; vs. data &ldquo;analyst&rdquo;</h3>
<p>It largely depends on the company you work for. &ldquo;Data [insert modifier]&rdquo; is only a recent distinction for a job field that has historically been called &ldquo;Business Analytics.&rdquo; In a smaller company, as with any other position, one person may handle a variety of data-related tasks under the title of &ldquo;Data Scientist.&rdquo; In a larger company with more staff and finer grain specialization, you may have a &ldquo;Data Analyst&rdquo; that handles less technical aspects, and a &ldquo;Data Scientist&rdquo; whose work is very technical and involves quantitative learning or machine learning.</p>
<p>The field of data science/analytics is fresh enough that standard definitions for job titles really haven&rsquo;t been agreed upon yet. When considering a position, focus on the company rather than the title.</p>
<h3 id="should-i-join-a-startup-or-large-company">Should I join a startup or large company</h3>
<p>There&rsquo;s no wrong answer. Being aware of your own working style and preferences will help guide your decision.</p>
<p>Startups generally offer more freedom and less micromanaging. This also means that you&rsquo;ll necessarily receive less guidance, and will need to be able to figure stuff out, learn, and make progress under your own power.</p>
<p>In a big company, you&rsquo;re likely to experience more structure, and be expected to follow very clearly defined pre-existing processes. Your job scope will likely be more focused than it would be at a startup. You&rsquo;ll experience less freedom in general, but also more certainty in what&rsquo;s expected of you.</p>
<p>In the end, especially at the beginning of your career, don&rsquo;t put too much stock in choosing one or the other. If you like the company, big or small, give it a try. If you&rsquo;re not happy there after a few months, then try another one. No career decision is ever permanent.</p>
<p>It&rsquo;s also worthwhile to note that even if you find a company you like the first time around, it&rsquo;s in your best interest to change companies after one or two years. The majority of the salary raises you&rsquo;ll earn in your lifetime will occur in the first ten years of your career. Say you&rsquo;re hired by Company A as a junior data scientist for two years - after two years, you&rsquo;re no longer a junior. You can now earn, say, a 30% higher salary in a data scientist position, but it&rsquo;s unlikely that Company A will give you a 30% raise after two years. At that point it&rsquo;s time to find Company B and put a few more years of experience on your resume, then probably change companies again. You don&rsquo;t earn the big bucks sticking with one company for decades - you&rsquo;ll always be the junior developer.</p>
<p><img src="datasci-offstage.jpg" alt="Talking offstage."></p>
<h3 id="what-do-you-look-for-when-hiring-a-candidate">What do you look for when hiring a candidate</h3>
<p>Overall, the most important skills for a data science candidate are soft skills. Curiosity, tenacity, and good communication skills are vital. Persistence, especially when it comes to adapting to a quickly changing industry, is important. The most promising candidates are passionate enough about the field to be learning everything they can, even outside of their work scope. Hard skills like coding and algorithms can be taught - it&rsquo;s the soft skills that set good candidates apart.</p>
<p>Hacking skills are also vital. This doesn&rsquo;t necessarily mean you can write code. Someone who has a grasp of overall concepts, knows algorithms, and has curiosity enough to continuously learn is going to go farther than someone who can just write code. It takes creativity to build hacking skills on top of being familiar with the basic navigation points. Having the ability to come up with solutions that use available tools in new ways - that&rsquo;s hacking skill.</p>
<p>Design thinking is another important asset. Being able to understand how systems integrate on both technical and business levels is very valuable. If you&rsquo;re able to see the big picture, you&rsquo;re more likely to find different ways to accomplish the overall objective.</p>
<p>You might think that seeing buzzwords on resumes makes you look more attractive as a candidate - more often, it stands out as a red flag. Putting &ldquo;advanced machine learning&rdquo; on your CV and then demonstrating that you don&rsquo;t know basic algorithms doesn&rsquo;t look good. It&rsquo;s your projects and your interests outside of the job you&rsquo;re applying for that say the most about you. Popular topics in this industry change fast - you&rsquo;re better off having a solid grasp of basic fundamentals as well as a broad array of experience than name-dropping whatever&rsquo;s trending.</p>
<h3 id="is-there-a-future-for-humans-in-the-data-science-field-when-will-the-machines-replace-us">Is there a future for humans in the data science field? When will the machines replace us</h3>
<p>This isn&rsquo;t a question unique to data science, and many historical examples already exist. Financial investment is a good example - where you used to have a human do calculations and make predictions, computers now do a lot of that automatically, making decisions about risk and possible payoff every day.</p>
<p>Where humans won&rsquo;t be replaced, just as in other industries that have embraced automation, is in the human element. You&rsquo;ll still need people to handle communication, be creative, be curious, make interpretations and understand problems&hellip; all those things are fundamentally human aspects of enterprise.</p>
<p>Ultimately, machines and more automation will make human work less of a grind. By automating the mundane stuff, like data sanitization for example, human minds are freed up to develop more interesting things.</p>
<h3 id="what-are-the-future-applications-for-data-driven-automation">What are the future applications for data-driven automation</h3>
<p>Legal is a good next candidate for automation. There&rsquo;s a lot there that can be handled by programs using data to assess risk.</p>
<p>Medicine is another field ripe for advances through data. Radiologists, your days are numbered: image detection is coming for you. The whole field of diagnostics is about to drastically change.</p>
<p>A particularly interesting recent application for data science is in language translation. By looking at similarities in sentence structure and colloquial speech across different languages, we&rsquo;re able to sort similar words based on the &ldquo;space&rdquo; they occupy within the language structure.</p>
<p>Insurance - the original data science industry - already is and will continue to become very automated. With increased ability to use data to assess risk, we&rsquo;re beginning to see new creative insurance products being introduced. E-commerce companies can now buy insurance on the risk a customer will return a product - hard to do without the accessibility of data that we have today.</p>
<h3 id="how-do-i-push-data-driven-decisions-and-get-my-boss-to-agree-with-me">How do I push data-driven decisions and get my boss to agree with me</h3>
<p>It&rsquo;s a loaded question. The bottom line is that it depends on the company&rsquo;s data culture and decision path. We&rsquo;ve experienced working for management who say, &ldquo;We&rsquo;ve already made the decisions, we just need the data to prove it.&rdquo; Obviously, that&rsquo;s a tough position to work from.</p>
<p>Generally, ask yourself, &ldquo;Am I making my boss look good?&rdquo; You might hear that and think, &ldquo;Why would I let my boss get all the credit?&rdquo; - but who cares? Let them take the credit. If you&rsquo;re producing good work, you&rsquo;re making your team look good. If you make your team look good, you&rsquo;re indispensible to your team and your boss. People who are indispensible are listened to.</p>
<h3 id="whats-your-best-advice-for-a-budding-data-scientist">What&rsquo;s your best advice for a budding data scientist</h3>
<p>Don&rsquo;t be too keen to define yourself too quickly. If you narrow your focus too much, especially when you&rsquo;re learning, you can get stuck in a situation of having become an expert in &ldquo;Technology A, version 3&rdquo; when companies are looking to hire for experts in version 4. It happens.</p>
<p>A broad understanding of fundamentals will be far more valuable to you on the whole. Maybe you start out writing code, and decide you don&rsquo;t like it, but discover that you&rsquo;re really good at designing big picture stuff and leading teams, and you end up as a technical lead. It could even vary depending on the company you work for - so stay flexible.</p>
<p>Your best bet is to follow what you&rsquo;re passionate about, and try to understand a wide range of overall concepts. Spend the majority of your efforts learning things that are timeless, like the base technologies under hot-topic items like TensorFlow. Arm yourself with a broad understanding of the terrain, different companies, and the products that are out there.</p>
<p>If you focus on learning code specifically, learning one language well makes it easier to learn others. Make sure you understand the basics.</p>
<h3 id="tldr-it">TL;dr it</h3>
<ul>
<li><strong>Adam:</strong> Talk more and don&rsquo;t give up.</li>
<li><strong>Anthony:</strong> [Be] courageous, and hands-on.</li>
<li><strong>Gabriel:</strong> Be creative.</li>
<li><strong>Guo Jun:</strong> It&rsquo;s worth the pain.</li>
<li><strong>Misrab:</strong> Evaluate yourself and maintain a feedback loop.</li>
</ul>
<p><img src="datasci-crowd.jpg" alt="The crowd at GA Singapore"></p>
]]></content></entry></feed>