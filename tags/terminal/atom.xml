<feed xmlns="http://www.w3.org/2005/Atom"><title>Terminal on victoria.dev</title><link href="https://victoria.dev/tags/terminal/feed.xml" rel="self"/><link href="https://victoria.dev/tags/terminal/"/><updated>2021-02-15T01:38:07-05:00</updated><id>https://victoria.dev/tags/terminal/</id><author><name>Victoria Drake</name><email>hello@victoria.dev</email></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">Create a self-hosted chat service with your own Matrix server</title><link href="https://victoria.dev/archive/create-a-self-hosted-chat-service-with-your-own-matrix-server/"/><id>https://victoria.dev/archive/create-a-self-hosted-chat-service-with-your-own-matrix-server/</id><author><name>Victoria Drake</name></author><published>2021-02-15T01:38:07-05:00</published><updated>2021-02-15T01:38:07-05:00</updated><content type="html"><![CDATA[<p><a href="https://matrix.org/docs/guides/introduction">Matrix</a> is an open standard for decentralized real-time communication. The <a href="https://matrix.org/docs/spec/">specification</a> is production-ready and <a href="https://matrix.org/bridges/">bridges</a> to tons of silo products like Slack, Gitter, Telegram, Discord, and even Facebook Messenger. This lets you use Matrix to link together disjoint communities in one place, or create an alternative communication method that works with, but is independent of, communication silos.</p>
<p>You can create your own self-hosted Matrix chat for as little as $3.50 USD per month on an <a href="https://aws.amazon.com/lightsail/">AWS Lightsail</a> instance. Your homeserver can federate with other Matrix servers, giving you a reliable and fault-tolerant means of communication.</p>
<p>Matrix is most widely installed via its <a href="https://element-hq.github.io/synapse/latest/index.html">Synapse</a> homeserver implementation written in Python 3. Dendrite, its second-generation homeserver implementation written in Go, is currently released in beta. Dendrite will provide more memory efficiency and reliability out-of-the-box, making it an excellent choice for running on a virtual instance.</p>
<p>Here&rsquo;s how to set up your own homeserver on AWS Lightsail with Dendrite. You can also <a href="https://github.com/matrix-org/dendrite">contribute to Dendrite today</a>.</p>
<h2 id="create-a-lightsail-instance">Create a Lightsail instance</h2>
<p>Spin up a new Lightsail instance on AWS with Debian as your operating system. It&rsquo;s a good idea to create a new per-instance key for use with SSH. You can do this by with the SSH key pair manager on the instance creation page. Don&rsquo;t forget to download your private key and <code>.gitignore</code> your secrets.</p>
<p>Click <strong>Create Instance.</strong> Wait for the status of your instance to change from <strong>Pending</strong> to <strong>Running</strong>, then click its name to see further information. You&rsquo;ll need the Public IP address.</p>
<p>To enable people including yourself to connect to the instance, go to the Networking tab and add a firewall rule for HTTPS. This will open <code>443</code> so you can connect over IPv4. You can also do this for IPv6.</p>
<h2 id="connect-dns">Connect DNS</h2>
<p>Give your instance a catchier address by <a href="https://www.jdoqocy.com/ds70r09608OQPPRVXSQPOQSRVVVVX" target="_top">buying a domain at Namecheap</a>
 and setting up DNS records.</p>
<ol>
<li>On your domain management page in the <strong>Nameservers</strong> section, choose <strong>Namecheap BasicDNS</strong>.</li>
<li>On the <strong>Advanced DNS</strong> tab, click <strong>Add New Record</strong>.</li>
</ol>
<p>Add an <code>A Record</code> to your Lightsail Public IP. You can use a subdomain if you want one, for example,</p>
<ul>
<li><strong>Type:</strong> <code>A Record</code></li>
<li><strong>Host:</strong> <code>matrix</code></li>
<li><strong>Value:</strong> <code>13.59.251.229</code></li>
</ul>
<p>This points <code>matrix.example.org</code> to your Lightsail instance.</p>
<h2 id="set-up-your-matrix-homeserver">Set up your Matrix homeserver</h2>
<p>Change permissions on the private key you downloaded:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>chmod <span style="color:#ae81ff">600</span> &lt;path/to/key&gt;
</span></span></code></pre></div><p>Then <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-ssh-using-terminal">SSH to your Public IP</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ssh -i &lt;path/to/key&gt; admin@&lt;public ip&gt;
</span></span></code></pre></div><p>Welcome to your instance! You can make it more interesting by downloading some packages you&rsquo;ll need for Dendrite. It&rsquo;s a good idea to use <code>apt</code> for this, but first you&rsquo;ll want to make sure you&rsquo;re getting the latest stuff.</p>
<p><em>Dec 2021 update: As the good people of Mastodon point out, you might like to ensure you&rsquo;re choosing the stable version for Debian. For instance, replace <code>buster</code> below with <a href="https://www.debian.org/releases/">what&rsquo;s &ldquo;stable&rdquo; at the moment</a>.</em></p>
<p>Change your <a href="https://wiki.debian.org/SourcesList">sources list</a> in order to get the newest version of Go:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo vim /etc/apt/sources.list
</span></span></code></pre></div><p>Delete everything except these two lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#a6e22e">deb</span> <span style="color:#a6e22e">http</span>:<span style="color:#e6db74">//</span><span style="color:#a6e22e">cdn</span>-<span style="color:#a6e22e">aws</span>.<span style="color:#a6e22e">deb</span>.<span style="color:#a6e22e">debian</span>.<span style="color:#a6e22e">org</span>/<span style="color:#a6e22e">debian</span> <span style="color:#a6e22e">buster</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">deb</span>-<span style="color:#a6e22e">src</span> <span style="color:#a6e22e">http</span>:<span style="color:#e6db74">//</span><span style="color:#a6e22e">cdn</span>-<span style="color:#a6e22e">aws</span>.<span style="color:#a6e22e">deb</span>.<span style="color:#a6e22e">debian</span>.<span style="color:#a6e22e">org</span>/<span style="color:#a6e22e">debian</span> <span style="color:#a6e22e">buster</span> <span style="color:#a6e22e">main</span>
</span></span></code></pre></div><p>Then replace the distributions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:%<span style="color:#a6e22e">s</span><span style="color:#e6db74">/buster main/</span><span style="color:#a6e22e">testing</span> <span style="color:#a6e22e">main</span> <span style="color:#a6e22e">contrib</span> <span style="color:#a6e22e">non</span>-<span style="color:#a6e22e">free</span>/<span style="color:#a6e22e">g</span>
</span></span></code></pre></div><p>Run <code>sudo apt dist-upgrade</code>. If you&rsquo;re asked about modified configuration files, choose the option to &ldquo;keep the local version currently installed.&rdquo;</p>
<p>Once the upgrade is finished, restart your instance with <code>sudo shutdown -r now</code>.</p>
<p>Go make some coffee, then SSH back in. Get the packages you&rsquo;ll need with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt update
</span></span><span style="display:flex;"><span>sudo apt upgrade
</span></span><span style="display:flex;"><span>sudo apt install -y git golang nginx python3-certbot-nginx
</span></span></code></pre></div><p>You&rsquo;re ready to get Dendrite.</p>
<h2 id="get-dendrite">Get Dendrite</h2>
<p>Clone <a href="https://github.com/matrix-org/dendrite">Dendrite</a> and follow the <a href="https://github.com/matrix-org/dendrite#get-started">README instructions to get started</a>. You&rsquo;ll need to choose whether you want your Matrix instance to be federating. For simplicity, here&rsquo;s how to set up a non-federating deployment to start:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/matrix-org/dendrite
</span></span><span style="display:flex;"><span>cd dendrite
</span></span><span style="display:flex;"><span>./build.sh
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate a Matrix signing key for federation (required)</span>
</span></span><span style="display:flex;"><span>./bin/generate-keys --private-key matrix_key.pem
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate a self-signed certificate (optional, but a valid TLS certificate is normally</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># needed for Matrix federation/clients to work properly!)</span>
</span></span><span style="display:flex;"><span>./bin/generate-keys --tls-cert server.crt --tls-key server.key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Copy and modify the config file - you&#39;ll need to set a server name and paths to the keys</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># at the very least, along with setting up the database connection strings.</span>
</span></span><span style="display:flex;"><span>cp dendrite-config.yaml dendrite.yaml
</span></span></code></pre></div><h2 id="configure-dendrite">Configure Dendrite</h2>
<p>Modify the configuration file you just copied:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo vim dendrite.yaml
</span></span></code></pre></div><p>At minimum, set:</p>
<ul>
<li><code>server name</code> to your shiny new domain name, e.g. <code>matrix.example.org</code></li>
<li><code>disable_federation</code> to true or false</li>
<li><code>registration_disabled</code> to true or false</li>
</ul>
<p>You might like to read the <a href="https://github.com/matrix-org/dendrite/blob/master/docs/FAQ.md">Dendrite FAQ</a>.</p>
<h2 id="configure-nginx">Configure nginx</h2>
<p>Get the required packages if you didn&rsquo;t already install them above:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt install nginx python3-certbot-nginx
</span></span></code></pre></div><p>Create your site&rsquo;s configuration file under <code>sites-available</code> with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd /etc/nginx/sites-available
</span></span><span style="display:flex;"><span>ln -s /etc/nginx/sites-available/&lt;sitename&gt; /etc/nginx/sites-enabled/&lt;sitename&gt;
</span></span><span style="display:flex;"><span>sudo cp default &lt;sitename&gt;
</span></span></code></pre></div><p>Edit your site configuration. Delete the <code>root</code> and <code>index</code> lines if you don&rsquo;t need them, and input your server name.</p>
<p>Your <code>location</code> block should look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">location</span> <span style="color:#e6db74">/</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">proxy_pass</span> <span style="color:#e6db74">https://localhost:8448</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Remove the <code>default</code> with: <code>sudo rm /etc/nginx/sites-enabled/default</code>.</p>
<h2 id="create-self-signed-certificates">Create self-signed certificates</h2>
<p>You can use <a href="https://certbot.eff.org/">Certbot</a> to generate self-signed certificates with <a href="https://letsencrypt.org/">Let&rsquo;s Encrypt</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo certbot --nginx -d &lt;your.site.address&gt;
</span></span></code></pre></div><p>If you don&rsquo;t want to give an email, add the <code>--register-unsafely-without-email</code> flag.</p>
<p>Test your configuration and restart nginx with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo nginx -t
</span></span><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span></code></pre></div><p>Then start up your Matrix server.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># Build and run the server:</span>
</span></span><span style="display:flex;"><span>./bin/dendrite-monolith-server --tls-cert server.crt --tls-key server.key --config dendrite.yaml
</span></span></code></pre></div><p>Your Matrix server is up and running at your web address! If you disabled registration in your configuration, you may need to create a user. You can do this by running the included <code>dendrite/bin/createuser</code>.</p>
<p>You can log on to your new homeserver with any <a href="https://matrix.org/clients/">Matrix client</a>, or Matrix-capable applications like <a href="https://www.pidgin.im/plugins/?publisher=all&amp;query=&amp;type=">Pidgin with the Matrix plugin</a>.</p>
<h2 id="other-troubleshooting">Other troubleshooting</h2>
<h3 id="log-files">Log files</h3>
<p>If you get an error such as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>... [github.com/matrix-org/dendrite/internal/log.go:155] setupFileHook
</span></span><span style="display:flex;"><span>  Couldn&#39;t create directory /var/log/dendrite: &#34;mkdir /var/log/dendrite: permission denied&#34;
</span></span></code></pre></div><p>You&rsquo;ll need to create a spot for your log files. Avoid the bad practice of running stuff with <code>sudo</code> whenever you can. Instead, create the necessary file with the right permissions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo mkdir /var/log/dendrite
</span></span><span style="display:flex;"><span>sudo chown admin:admin /var/log/dendrite
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Build and run the server:</span>
</span></span><span style="display:flex;"><span>./bin/dendrite-monolith-server --tls-cert server.crt --tls-key server.key --config dendrite.yaml
</span></span></code></pre></div><h3 id="unable-to-decrypt">Unable to decrypt</h3>
<p>If you see: <code>Unable to decrypt: The sender's device has not sent us the keys for this message.</code> you may need to verify a user (sometimes yourself).</p>
<ol>
<li>In your client, open the user&rsquo;s profile. Click the lock icon if there is one, or otherwise look for a way to verify them.</li>
<li>You may be asked to see if some emojis presented to both users match if you&rsquo;re using certain clients like Element.</li>
<li>You can then re-request encryption keys for any sent messages.</li>
</ol>
<h2 id="set-up-your-own-matrix-server-today">Set up your own Matrix server today</h2>
<p>I hope you found this introduction to setting up your own Matrix homeserver to be helpful!</p>
]]></content></entry><entry><title type="html">Deceptively simple search-and-replace across multiple files</title><link href="https://victoria.dev/posts/deceptively-simple-search-and-replace-across-multiple-files/"/><id>https://victoria.dev/posts/deceptively-simple-search-and-replace-across-multiple-files/</id><author><name>Victoria Drake</name></author><published>2020-08-25T04:48:39-06:00</published><updated>2020-08-25T04:48:39-06:00</updated><content type="html"><![CDATA[<p>While a multitude of methods exist to search for and replace words in a single file, what do you do when you&rsquo;ve got a string to update across multiple unrelated files, all with different names? You harness the power of command line tools, of course!</p>
<p>First, you&rsquo;ll need to <code>find</code> all the files you want to change. Stringing together what are effectively search queries for <code>find</code> is really only limited by your imagination. Here&rsquo;s a simple example that finds Python files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find . -name <span style="color:#e6db74">&#39;*.py&#39;</span>
</span></span></code></pre></div><p>The <code>-name</code> test searches for a pattern, such as all files ending in <code>.py</code>, but <code>find</code> can do a lot more with other test conditions, including <code>-regex</code> tests. Run <code>find --help</code> to see the multitude of options.</p>
<p>Further tune your search by using <code>grep</code> to get only the files that contain the string you want to change, such as by adding:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>grep -le <span style="color:#e6db74">&#39;\&lt;a whale\&gt;&#39;</span>
</span></span></code></pre></div><p>The <code>-l</code> option gives you just the file names for all files containing a pattern (denoted with <code>-e</code>) that match &ldquo;a whale&rdquo;.</p>
<p>Using Vim&rsquo;s impressive <code>:bufdo</code> lets you run the same command across multiple buffers, interactively working with all of these files without the tedium of opening, saving, and closing each file, one at a time.</p>
<p>Let&rsquo;s plug your powerful <code>find</code>+<code>grep</code> results into Vim with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vim <span style="color:#e6db74">`</span>find . -name <span style="color:#e6db74">&#39;*.py&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-exec grep -le <span style="color:#e6db74">&#39;\&lt;a whale\&gt;&#39;</span> <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span><span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>Using backtick-expansion to pass our search to Vim opens up multiple buffers ready to go. (Do <code>:h backtick-expansion</code> in Vim for more.) Now you can apply the Vim command <code>:bufdo</code> to all of these files and perform actions such as interactive search-and-replace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#a6e22e">bufdo</span> %<span style="color:#a6e22e">s</span><span style="color:#e6db74">/a whale/</span><span style="color:#a6e22e">a</span> <span style="color:#a6e22e">bowl</span> <span style="color:#a6e22e">of</span> <span style="color:#a6e22e">petunias</span>/<span style="color:#a6e22e">gce</span>
</span></span></code></pre></div><p>The <code>g</code> for &ldquo;global&rdquo; will change occurrences of the pattern on all lines. The <code>e</code> will omit errors if the pattern is not found. The <code>c</code> option makes this interactive; if you&rsquo;re feeling confident, you can omit it to make the changes without reviewing each one.</p>
<p>If one of the patterns contains a <code>/</code> character, you can substitute the separator in the above command to make it more readable. Vim will assume the character following the <code>%s</code> is the separator, so for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#a6e22e">bufdo</span> %<span style="color:#a6e22e">s_a</span> <span style="color:#a6e22e">whale_a</span> <span style="color:#a6e22e">bowl</span> <span style="color:#a6e22e">of</span> <span style="color:#a6e22e">peonies</span>/<span style="color:#a6e22e">petunias_gce</span>
</span></span></code></pre></div><p>When you&rsquo;ve finished going through all the buffers, save all the work you&rsquo;ve completed with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#a6e22e">bufdo</span> <span style="color:#a6e22e">wq</span>!
</span></span></code></pre></div><p>Then bask in the glory of your saved time and effort.</p>
]]></content></entry><entry><title type="html">Look mom, I&amp;#39;m a GitHub Action Hero</title><link href="https://victoria.dev/archive/look-mom-im-a-github-action-hero/"/><id>https://victoria.dev/archive/look-mom-im-a-github-action-hero/</id><author><name>Victoria Drake</name></author><published>2020-06-27T09:06:33-04:00</published><updated>2020-06-27T09:06:33-04:00</updated><content type="html"><![CDATA[<p>GitHub recently interviewed me for their blog editorial entitled <a href="https://github.blog/2020-06-26-github-action-hero-victoria-drake/">GitHub Action Hero: Victoria Drake</a>. Here&rsquo;s a behind-the-scenes peek at the original interview questions and my answers.</p>
<h2 id="what-is-the-name-of-your-action-please-include-a-link-too">What is the name of your Action? Please include a link too.</h2>
<p>Among the several Actions I&rsquo;ve built, I have two current favorites. One is <a href="https://github.com/victoriadrake/hugo-remote">hugo-remote</a>, which lets you continuously deploy a Hugo static site from a private source repository to a public GitHub Pages repository. This keeps the contents of the source repository private, such as your unreleased drafts, while still allowing you to have a public open source site using GitHub Pages.</p>
<p>The second is <a href="https://github.com/victoriadrake/django-security-check">django-security-check</a>. It&rsquo;s an effortless way to continuously check that your production Django application is free from a variety of security misconfigurations. You can think of it as your little CI/CD helper for busy projects &ndash; a security linter!</p>
<h2 id="tell-us-a-little-bit-more-about-yourselfhow-did-you-get-started-in-software-tools">Tell us a little bit more about yourself—how did you get started in software tools?</h2>
<p>When I was a kid, I spent several summer vacations coding a huge medieval fantasy world MUD (Multi-User Dungeon, like a multiplayer role-playing game) written in LPC, with friends. It was entirely text-based, and built and played via Telnet. I fell in love with the terminal and learned a lot about object-oriented programming and prototype-based programming early on.</p>
<p>I became a freelance developer and had the privilege of working on a wide variety of client projects. Realizing the difficulty that companies have with hiring experienced developers, I built <a href="https://ApplyByAPI.com">ApplyByAPI.com</a> to help. As you might imagine, it allows candidates to apply for jobs via API, instead of emailing a resume. It&rsquo;s based on the Django framework, so in the process, I learned even more about building reusable units of software.</p>
<p>When I became a co-author and a core maintainer for the <a href="https://github.com/OWASP/wstg">Open Web Application Security Project (OWASP) Web Security Testing Guide (WSTG)</a>, I gained an even broader appreciation for how a prototype-based, repeatable approach can help build secure web applications. Organizations worldwide consider the WSTG the foremost open source resource for testing the security of web applications. We&rsquo;ve applied this thinking via the use of GitHub Actions in our repository &ndash; I&rsquo;ll tell you more about that later.</p>
<p>Whether I&rsquo;m creating an open source tool or leading a development team, my childhood experience still informs how I think about programming today. I strive to create repeatable units of software like GitHub Actions &ndash; only now, I make them for large enterprises in the real world!</p>
<h2 id="what-is-the-story-behind-your-built-github-action-why-did-you-build-this">What is the story behind your built GitHub Action? (Why did you build this?)</h2>
<p>Developers take on a lot of responsibility when it comes to building secure applications these days. I&rsquo;m a full-time senior software developer at a cybersecurity company. I&rsquo;ve found that I&rsquo;m maximally productive when I create systems and processes that help myself and my team make desired outcomes inevitable. So I spend my free time building tools that make it easy for other developers to build secure software as well. My Actions help to automate contained, repeatable units of work that can make a big difference in a developer&rsquo;s day.</p>
<h2 id="do-you-have-future-plans-for-this-or-other-actions">Do you have future plans for this or other Actions?</h2>
<p>Yes! I&rsquo;m always finding ways for tools like GitHub Actions to boost the velocity of technical teams, whether at work or in my open source projects. Remember the Open Web Application Security Project? In the work I&rsquo;ve lead with OWASP, I&rsquo;ve championed the effort to increase automation using GitHub Actions to maintain quality, securely deploy new versions to the web, and even build PDFs of the WSTG. We&rsquo;re constantly looking into new ways that GitHub Actions can make our lives easier and our readers&rsquo; projects more secure.</p>
<h2 id="what-has-been-your-favorite-feature-of-github-actions">What has been your favorite feature of GitHub Actions?</h2>
<p>I like that I can build an Action using familiar and portable technologies, like Docker. Actions are easy for collaborators to work on too, since in the case of a Dockerized Action, you can use any language your team is comfortable with. This is especially useful in large organizations with polyglot teams and environments. There aren&rsquo;t any complicated dependencies for running these portable tasks, and you don&rsquo;t need to learn any special frameworks to get started.</p>
<p>One of my first blog posts about GitHub Actions even describes how I used an Action to run a Makefile! This is especially useful for large legacy applications that want to modernize their pipeline by using GitHub Actions.</p>
<h2 id="what-are-the-biggest-challenges-youve-faced-while-building-your-github-action">What are the biggest challenges you’ve faced while building your GitHub Action?</h2>
<p>The largest challenge of GitHub Actions isn&rsquo;t really in GitHub Actions, but in the transition of legacy software and company culture.</p>
<p>Migrating legacy software is always challenging, particularly with large legacy applications. Moving to modern CI/CD processes requires changes at the software level, team level, and even a shift in thinking when it comes to individual developers. It can help to have a tool like GitHub Actions, which is at once seamlessly modern and familiar, when transitioning legacy code to a modern pipeline.</p>
<h2 id="anything-else-you-would-like-to-share-about-your-experience-any-stories-or-lessons-learned-through-building-your-action">Anything else you would like to share about your experience? Any stories or lessons learned through building your Action?</h2>
<p>I&rsquo;m happiest when I&rsquo;m solving a challenge that makes developing secure software less challenging in the future, both for myself and for the technology organization I&rsquo;m leading. With tools like GitHub Actions, a lot of mental overhead can be offloaded to automatic processes &ndash; like getting a whole other brain, for free! This can massively help organizations that are ready to scale up their development output.</p>
<p>In the realm of cybersecurity, not only does creating portable and reusable software make developers&rsquo; lives easier, it helps to make whole workflows repeatable, which in turn makes software development processes more secure. With smart processes in place, technical teams are happier. As an inevitable result, they&rsquo;ll build better software for customers, too.</p>
]]></content></entry><entry><title type="html">Command line tricks for managing your messy open source repository</title><link href="https://victoria.dev/posts/command-line-tricks-for-managing-your-messy-open-source-repository/"/><id>https://victoria.dev/posts/command-line-tricks-for-managing-your-messy-open-source-repository/</id><author><name>Victoria Drake</name></author><published>2020-02-17T08:05:06-05:00</published><updated>2020-02-17T08:05:06-05:00</updated><content type="html"><![CDATA[<p>Effective collaboration, especially in open source software development, starts with effective organization. To make sure that nothing gets missed, the general rule, &ldquo;one issue, one pull request&rdquo; is a nice rule of thumb.</p>
<p>Instead of opening an issue with a large scope like, &ldquo;Fix all the broken links in the documentation,&rdquo; open source projects will have more luck attracting contributors with several smaller and more manageable issues. In the preceding example, you might scope broken links by section or by page. This allows more contributors to jump in and dedicate small windows of their time, rather than waiting for one person to take on a larger and more tedious contribution effort.</p>
<p>Smaller scoped issues also help project maintainers see where work has been completed and where it hasn&rsquo;t. This reduces the chances that some part of the issue is missed, assumed to be completed, and later leads to bugs or security vulnerabilities.</p>
<p>That&rsquo;s all well and good; but what if you&rsquo;ve already opened several massively-scoped issues, some PRs have already been submitted or merged, and you currently have no idea where the work started or stopped?</p>
<p>It&rsquo;s going to take a little sorting out to get the state of your project back under control. Thankfully, there are a number of command line tools to help you scan, sort, and make sense of a messy repository. Here&rsquo;s a small selection of ones I use.</p>
<p>Jump to:</p>
<ul>
<li><a href="#interactive-search-and-replace-with-vim">Interactive search-and-replace with <code>vim</code></a></li>
<li><a href="#find-dead-links-in-markdown-files-with-a-node-module">Find dead links in Markdown files with a node module</a></li>
<li><a href="#list-subdirectories-with-or-without-a-git-repository-with-find">List subdirectories with or without a git repository with <code>find</code></a></li>
<li><a href="#pull-multiple-git-repositories-from-a-list-with-xargs">Pull multiple git repositories from a list with <code>xargs</code></a></li>
<li><a href="#list-issues-by-number-with-jot">List issues by number with <code>jot</code></a></li>
<li><a href="#cli-powered-open-source-organization">CLI-powered open source organization</a></li>
</ul>
<h2 id="interactive-search-and-replace-with-vim">Interactive search-and-replace with <code>vim</code></h2>
<p>You can open a file in Vim, then interactively search and replace with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:%<span style="color:#a6e22e">s</span><span style="color:#e6db74">/\&lt;word\&gt;/</span><span style="color:#a6e22e">newword</span>/<span style="color:#a6e22e">gc</span>
</span></span></code></pre></div><p>The <code>%</code> indicates to look in all lines of the current file; <code>s</code> is for substitute; <code>\&lt;word\&gt;</code> matches the whole word; and the <code>g</code> for &ldquo;global&rdquo; is for every occurrence. The <code>c</code> at the end will let you view and confirm each change before it&rsquo;s made. You can run it automatically, and much faster, without <code>c</code>; however, you put yourself at risk of complicating things if you&rsquo;ve made a pattern-matching error.</p>
<h2 id="find-dead-links-in-markdown-files-with-a-node-module">Find dead links in Markdown files with a node module</h2>
<p>The <a href="https://github.com/tcort/markdown-link-check">markdown-link-check</a> node module has a great <a href="https://github.com/tcort/markdown-link-check#command-line-tool">CLI buddy</a>.</p>
<p>I use this so often I turned it into a <a href="/blog/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/#bash-functions">Bash alias function</a>. To do the same, add this to your <code>.bashrc</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># Markdown link check in a folder, recursive</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> mlc <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    find $1 -name <span style="color:#ae81ff">\*</span>.md -exec markdown-link-check -p <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Then run with <code>mlc &lt;filename&gt;</code>.</p>
<h2 id="list-subdirectories-with-or-without-a-git-repository-with-find">List subdirectories with or without a git repository with <code>find</code></h2>
<p>Print all subdirectories that are git repositories, or in other words, have a <code>.git</code> in them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find . -maxdepth <span style="color:#ae81ff">1</span> -type d -exec test -e <span style="color:#e6db74">&#39;{}/.git&#39;</span> <span style="color:#e6db74">&#39;;&#39;</span> -printf <span style="color:#e6db74">&#34;is git repo: %p\n&#34;</span>
</span></span></code></pre></div><p>To print all subdirectories that are not git repositories, negate the test with <code>!</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find . -maxdepth <span style="color:#ae81ff">1</span> -type d -exec test <span style="color:#e6db74">&#39;!&#39;</span> -e <span style="color:#e6db74">&#39;{}/.git&#39;</span> <span style="color:#e6db74">&#39;;&#39;</span> -printf <span style="color:#e6db74">&#34;not git repo: %p\n&#34;</span>
</span></span></code></pre></div><h2 id="pull-multiple-git-repositories-from-a-list-with-xargs">Pull multiple git repositories from a list with <code>xargs</code></h2>
<p>I initially used this as part of <a href="/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/">automatically re-creating my laptop with Bash scripts</a>, but it&rsquo;s pretty handy when you&rsquo;re working with cloud instances or Dockerfiles.</p>
<p>Given a file, <code>repos.txt</code> with a repository’s SSH link on each line (and your SSH keys set up), run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>xargs -n1 git clone &lt; repos.txt
</span></span></code></pre></div><p>If you want to pull and push many repositories, I previously wrote about <a href="/posts/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/">how to use a Bash one-liner to manage your repositories</a>.</p>
<h2 id="list-issues-by-number-with-jot">List issues by number with <code>jot</code></h2>
<p>I&rsquo;m a co-author and maintainer for the <a href="https://github.com/OWASP/wstg/">OWASP Web Security Testing Guide</a> repository where I recently took one large issue (yup, it was &ldquo;Fix all the broken links in the documentation&rdquo; - how&rsquo;d you guess?) and broke it up into several smaller, more manageable issues. A whole thirty-seven smaller, more manageable issues.</p>
<p>I wanted to enumerate all the issues that the original one became, but the idea of typing out thirty-seven issue numbers (#275 through #312) seemed awfully tedious and time-consuming. So, in natural programmer fashion, I spent the same amount of time I would have used to type out all those numbers and crafted a way to automate it instead.</p>
<p>The <code>jot</code> utility (<code>apt install athena-jot</code>) is a tiny tool that&rsquo;s a big help when you want to print out some numbers. Just tell it how many you want, and where to start and stop.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># jot [ reps [ begin [ end ] ] ]</span>
</span></span><span style="display:flex;"><span>jot <span style="color:#ae81ff">37</span> <span style="color:#ae81ff">275</span> <span style="color:#ae81ff">312</span>
</span></span></code></pre></div><p>This prints each number, inclusively, from 275 to 312 on a new line. To make these into issue number notations that GitHub and many other platforms automatically recognize and turn into links, you can pipe the output to <code>awk</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>jot <span style="color:#ae81ff">37</span> <span style="color:#ae81ff">275</span> <span style="color:#ae81ff">312</span> | awk <span style="color:#e6db74">&#39;{printf &#34;#&#34;$0&#34;, &#34;}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#275, #276, #277, #278, #279, #280, #281, #282, #283, #284, #285, #286, #287, #288, #289, #290, #291, #292, #293, #295, #296, #297, #298, #299, #300, #301, #302, #303, #304, #305, #306, #307, #308, #309, #310, #311, #312</span>
</span></span></code></pre></div><p>You can also use <code>jot</code> to generate random or redundant data, mainly for development or testing purposes.</p>
<h2 id="cli-powered-open-source-organization">CLI-powered open source organization</h2>
<p>A well-organized open source repository is a well-maintained open source project. Save this post for handy reference, and use your newfound CLI superpowers for good! 🚀</p>
]]></content></entry><entry><title type="html">The surprisingly difficult task of printing newlines in a terminal</title><link href="https://victoria.dev/posts/the-surprisingly-difficult-task-of-printing-newlines-in-a-terminal/"/><id>https://victoria.dev/posts/the-surprisingly-difficult-task-of-printing-newlines-in-a-terminal/</id><author><name>Victoria Drake</name></author><published>2019-12-04T09:17:35-05:00</published><updated>2019-12-04T09:17:35-05:00</updated><content type="html"><![CDATA[<p>Surprisingly, getting computers to give humans readable output is no easy feat. With the introduction of <a href="https://en.wikipedia.org/wiki/Standard_streams">standard streams</a> and specifically standard output, programs gained a way to talk to each other using plain text streams; humanizing and displaying stdout is another matter. Technology throughout the computing age has tried to solve this problem, from the use of <a href="https://en.wikipedia.org/wiki/Computer_terminal#Early_VDUs">ASCII characters in video computer displays</a> to modern shell commands like <code>echo</code> and <code>printf</code>.</p>
<p>These advancements have not been seamless. The job of printing output to a terminal is fraught with quirks for programmers to navigate, as exemplified by the deceptively nontrivial task of expanding an <a href="https://en.wikipedia.org/wiki/Escape_sequence">escape sequence</a> to print newlines. The expansion of the placeholder <code>\n</code> can be accomplished in a multitude of ways, each with its own unique history and complications.</p>
<h2 id="using-echo">Using <code>echo</code></h2>
<p>From its appearance in <a href="https://en.wikipedia.org/wiki/Multics">Multics</a> to its modern-day Unix-like system ubiquity, <code>echo</code> remains a familiar tool for getting your terminal to say &ldquo;Hello world!&rdquo; Unfortunately, inconsistent implementations across operating systems make its usage tricky. Where <code>echo</code> on some systems will automatically expand escape sequences, others require the <code>-e</code> option to do the same:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;the study of European nerves is \neurology&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the study of European nerves is \neurology</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo -e <span style="color:#e6db74">&#34;the study of European nerves is \neurology&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the study of European nerves is</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># eurology</span>
</span></span></code></pre></div><p>Because of these inconsistencies in implementations, <code>echo</code> is considered non-portable. Additionally, its usage in conjunction with user input is relatively easy to corrupt through <a href="https://en.wikipedia.org/wiki/Code_injection#Shell_injection">shell injection attack</a> using command substitutions.</p>
<p>In modern systems, it is retained only to provide compatibility with the many programs that still use it. The <a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html#tag_20_37_16">POSIX specification recommends</a> the use of <code>printf</code> in new programs.</p>
<h2 id="using-printf">Using <code>printf</code></h2>
<p>Since 4th <a href="https://en.wikipedia.org/wiki/Research_Unix#Versions">Edition</a> Unix, the portable <a href="https://en.wikipedia.org/wiki/Printf_(Unix)"><code>printf</code> command</a> has essentially been the new and better <code>echo</code>. It allows you to use <a href="https://en.wikipedia.org/wiki/Printf_format_string#Format_placeholder_specification">format specifiers</a> to humanize input. To interpret backslash escape sequences, use <code>%b</code>. The character sequence <code>\n</code> ensures the output ends with a newline:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>printf <span style="color:#e6db74">&#34;%b\n&#34;</span> <span style="color:#e6db74">&#34;Many females in Oble are \noblewomen&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Many females in Oble are</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># oblewomen</span>
</span></span></code></pre></div><p>Though <code>printf</code> has further options that make it a far more powerful replacement of <code>echo</code>, this utility is not foolproof and can be vulnerable to an <a href="https://en.wikipedia.org/wiki/Uncontrolled_format_string">uncontrolled format string</a> attack. It&rsquo;s important for programmers to ensure they <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">carefully handle user input</a>.</p>
<h2 id="putting-newlines-in-variables">Putting newlines in variables</h2>
<p>In an effort to improve portability amongst compilers, the <a href="https://en.wikipedia.org/wiki/ANSI_C">ANSI C Standard</a> was established in 1983. With <a href="https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html#ANSI_002dC-Quoting">ANSI-C quoting</a> using <code>$'...'</code>, <a href="https://en.wikipedia.org/wiki/Escape_sequences_in_C#Table_of_escape_sequences">escape sequences</a> are replaced in output according to the standard.</p>
<p>This allows us to store strings with newlines in variables that are printed with the newlines interpreted. You can do this by setting the variable, then calling it with <code>printf</code> using <code>$</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>puns<span style="color:#f92672">=</span><span style="color:#e6db74">$&#39;\number\narrow\nether\nice&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>printf <span style="color:#e6db74">&#34;%b\n&#34;</span> <span style="color:#e6db74">&#34;These words started with n but don&#39;t make </span>$puns<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># These words started with n but don&#39;t make</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># umber</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># arrow</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ether</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ice</span>
</span></span></code></pre></div><p>The expanded variable is single-quoted, which is passed literally to <code>printf</code>. As always, it is important to properly handle the input.</p>
<h2 id="bonus-round-shell-parameter-expansion">Bonus round: shell parameter expansion</h2>
<p>In my article explaining <a href="/posts/bash-and-shell-expansions-lazy-list-making/">Bash and braces</a>, I covered the magic of <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">shell parameter expansion</a>. We can use one expansion, <code>${parameter@operator}</code>, to interpret escape sequences, too. We use <code>printf</code>&rsquo;s <code>%s</code> specifier to print as a string, and the <code>E</code> operator will properly expand the escape sequences in our variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>printf <span style="color:#e6db74">&#34;%s\n&#34;</span> <span style="color:#e6db74">${</span>puns@E<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># umber</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># arrow</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ether</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ice</span>
</span></span></code></pre></div><h2 id="the-ongoing-challenge-of-humanizing-output">The ongoing challenge of humanizing output</h2>
<p><a href="https://en.wikipedia.org/wiki/String_interpolation">String interpolation</a> continues to be a chewy problem for programmers. Besides getting languages and shells to agree on what certain placeholders mean, properly using the correct escape sequences requires an eye for detail.</p>
<p>Poor string interpolation can lead to silly-looking output, as well as introduce security vulnerabilities, such as from <a href="https://en.wikipedia.org/wiki/Code_injection">injection attacks</a>. Until the next evolution of the terminal has us talking in emojis, we&rsquo;d best pay attention when printing output for humans.</p>
]]></content></entry><entry><title type="html">Bash and shell expansions: lazy list-making</title><link href="https://victoria.dev/posts/bash-and-shell-expansions-lazy-list-making/"/><id>https://victoria.dev/posts/bash-and-shell-expansions-lazy-list-making/</id><author><name>Victoria Drake</name></author><published>2019-11-18T07:07:24-05:00</published><updated>2019-11-18T07:07:24-05:00</updated><content type="html"><![CDATA[<p>It&rsquo;s that time of year again! When stores start putting up colourful sparkly lit-up plastic bits, we all begin to feel a little festive, and by festive I mean let&rsquo;s go shopping. Specifically, holiday gift shopping! (Gifts for yourself are still gifts, technically.)</p>
<p>Just so this doesn&rsquo;t all go completely madcap, you ought to make some gift lists. Bash can help.</p>
<h2 id="brace-expansion">Brace expansion</h2>
<p>These are not braces: <code>()</code></p>
<p>Neither are these: <code>[]</code></p>
<p><em>These</em> are braces: <code>{}</code></p>
<p>Braces tell Bash to do something with the arbitrary string or strings it finds between them. Multiple strings are comma-separated: <code>{a,b,c}</code>. You can also add an optional preamble and postscript to be attached to each expanded result. Mostly, this can save some typing, such as with common file paths and extensions.</p>
<p>Let&rsquo;s make some lists for each person we want to give stuff to. The following commands are equivalent:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>touch /home/me/gift-lists/Amy.txt /home/me/gift-lists/Bryan.txt /home/me/gift-lists/Charlie.txt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>touch /home/me/gift-lists/<span style="color:#f92672">{</span>Amy,Bryan,Charlie<span style="color:#f92672">}</span>.txt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tree gift-lists
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/home/me/gift-lists
</span></span><span style="display:flex;"><span>├── Amy.txt
</span></span><span style="display:flex;"><span>├── Bryan.txt
</span></span><span style="display:flex;"><span>└── Charlie.txt
</span></span></code></pre></div><p>Oh darn, &ldquo;Bryan&rdquo; spells his name with an &ldquo;i.&rdquo; I can fix that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>mv /home/me/gift-lists/<span style="color:#f92672">{</span>Bryan,Brian<span style="color:#f92672">}</span>.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>renamed <span style="color:#e6db74">&#39;/home/me/gift-lists/Bryan.txt&#39;</span> -&gt; <span style="color:#e6db74">&#39;/home/me/gift-lists/Brian.txt&#39;</span>
</span></span></code></pre></div><h2 id="shell-parameter-expansions">Shell parameter expansions</h2>
<p><a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">Shell parameter expansion</a> allows us to make all sorts of changes to parameters enclosed in braces, like manipulate and substitute text.</p>
<p>There are a few stocking stuffers that all our giftees deserve. Let&rsquo;s make that a variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>STUFF<span style="color:#f92672">=</span><span style="color:#e6db74">$&#39;socks\nlump of coal\nwhite chocolate&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span>$STUFF<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>lump of coal
</span></span><span style="display:flex;"><span>white chocolate
</span></span></code></pre></div><p>Now to add these items to each of our lists with some help from <a href="https://en.wikipedia.org/wiki/Tee_(command)">the <code>tee</code> command</a> to get <code>echo</code> and expansions to play nice.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span>$STUFF<span style="color:#e6db74">&#34;</span> | tee <span style="color:#f92672">{</span>Amy,Brian,Charlie<span style="color:#f92672">}</span>.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat <span style="color:#f92672">{</span>Amy,Brian,Charlie<span style="color:#f92672">}</span>.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>lump of coal
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>lump of coal
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>lump of coal
</span></span><span style="display:flex;"><span>white chocolate
</span></span></code></pre></div><h3 id="pattern-match-substitution">Pattern match substitution</h3>
<p>On second thought, maybe the lump of coal isn&rsquo;t such a nice gift. You can replace it with something better using a pattern match substitution in the form of <code>${parameter/pattern/string}</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>STUFF/lump of coal/candy cane<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> | tee <span style="color:#f92672">{</span>Amy,Brian,Charlie<span style="color:#f92672">}</span>.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat <span style="color:#f92672">{</span>Amy,Brian,Charlie<span style="color:#f92672">}</span>.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span></code></pre></div><p>This replaces the first instance of &ldquo;lump of coal&rdquo; with &ldquo;candy cane.&rdquo; To replace all instances (if there were multiple), use <code>${parameter//pattern/string}</code>. This doesn&rsquo;t change our <code>$STUFF</code> variable, so we can still reuse the original list for someone naughty later.</p>
<h3 id="substrings">Substrings</h3>
<p>While we&rsquo;re improving things, our giftees may not all like white chocolate. We&rsquo;d better add some regular chocolate to our lists just in case. Since I&rsquo;m super lazy, I&rsquo;m just going to hit the up arrow and modify a previous Bash command. Luckily, the last word in the <code>$STUFF</code> variable is  &ldquo;chocolate,&rdquo; which is nine characters long, so I&rsquo;ll tell Bash to keep just that part using <code>${parameter:offset}</code>. I&rsquo;ll use <code>tee</code>&rsquo;s <code>-a</code> flag to <code>a</code>ppend to my existing lists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>STUFF: -9<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> | tee -a <span style="color:#f92672">{</span>Amy,Brian,Charlie<span style="color:#f92672">}</span>.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat <span style="color:#f92672">{</span>Amy,Brian,Charlie<span style="color:#f92672">}</span>.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>chocolate
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>chocolate
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>chocolate
</span></span></code></pre></div><p>You can also:</p>
<table>
  <thead>
      <tr>
          <th>Do this</th>
          <th>With this</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Get substring from <em>n</em> characters onwards</td>
          <td><code>${parameter:n}</code></td>
      </tr>
      <tr>
          <td>Get substring for <em>x</em> characters starting at <em>n</em></td>
          <td><code>${parameter:n:x}</code></td>
      </tr>
  </tbody>
</table>
<p>There! Now our base lists are finished. Let&rsquo;s have some eggnog.</p>
<h3 id="testing-variables">Testing variables</h3>
<p>You know, it may be the eggnog, but I think I started a list for Amy yesterday and stored it in a variable that I might have called <code>amy</code>. Let&rsquo;s see if I did. I&rsquo;ll use the <code>${parameter:?word}</code> expansion. It&rsquo;ll write <code>word</code> to standard error and exit if there&rsquo;s no <code>amy</code> parameter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>amy:?no such<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bash: amy: no such
</span></span></code></pre></div><p>I guess not. Maybe it was Brian instead?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>brian:?no such<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Lederhosen
</span></span></code></pre></div><p>You can also:</p>
<table>
  <thead>
      <tr>
          <th>Do this</th>
          <th>With this</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Substitute <code>word</code> if <code>parameter</code> is unset or null</td>
          <td><code>${parameter:-word}</code></td>
      </tr>
      <tr>
          <td>Substitute <code>word</code> if <code>parameter</code> is not unset or null</td>
          <td><code>${parameter:+word}</code></td>
      </tr>
      <tr>
          <td>Assign <code>word</code> to <code>parameter</code> if <code>parameter</code> is unset or null</td>
          <td><code>${parameter:=word}</code></td>
      </tr>
  </tbody>
</table>
<h3 id="changing-case">Changing case</h3>
<p>That&rsquo;s right! Brian said he wanted some lederhosen and so I made myself a note. This is pretty important, so I&rsquo;ll add it to Brian&rsquo;s list in capital letters with the <code>${parameter^^pattern}</code> expansion. The <code>pattern</code> part is optional. We&rsquo;re only writing to Brian&rsquo;s list, so I&rsquo;ll just use <code>&gt;&gt;</code> instead of <code>tee -a</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>brian^^<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt;&gt; Brian.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat Brian.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>chocolate
</span></span><span style="display:flex;"><span>LEDERHOSEN
</span></span></code></pre></div><p>You can also:</p>
<table>
  <thead>
      <tr>
          <th>Do this</th>
          <th>With this</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Capitalize the first letter</td>
          <td><code>${parameter^pattern}</code></td>
      </tr>
      <tr>
          <td>Lowercase the first letter</td>
          <td><code>${parameter,pattern}</code></td>
      </tr>
      <tr>
          <td>Lowercase all letters</td>
          <td><code>${parameter,,pattern}</code></td>
      </tr>
  </tbody>
</table>
<h3 id="expanding-arrays">Expanding arrays</h3>
<p>You know what, all this gift-listing business is a lot of work. I&rsquo;m just going to make <a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Arrays">an array</a> of things I saw at the store:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>gifts<span style="color:#f92672">=(</span>sweater gameboy wagon pillows chestnuts hairbrush<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>I can use substring expansion in the form of <code>${parameter:offset:length}</code> to make this simple. I&rsquo;ll add the first two to Amy&rsquo;s list, the middle two to Brian&rsquo;s, and the last two to Charlie&rsquo;s. I&rsquo;ll  use <code>printf</code> to help with newlines.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>printf <span style="color:#e6db74">&#39;%s\n&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>gifts[@]:0:2<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt;&gt; Amy.txt
</span></span><span style="display:flex;"><span>printf <span style="color:#e6db74">&#39;%s\n&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>gifts[@]:2:2<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt;&gt; Brian.txt
</span></span><span style="display:flex;"><span>printf <span style="color:#e6db74">&#39;%s\n&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>gifts[@]: -2<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt;&gt; Charlie.txt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cat Amy.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>chocolate
</span></span><span style="display:flex;"><span>sweater
</span></span><span style="display:flex;"><span>gameboy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat Brian.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>chocolate
</span></span><span style="display:flex;"><span>LEDERHOSEN
</span></span><span style="display:flex;"><span>wagon
</span></span><span style="display:flex;"><span>pillows
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat Charlie.txt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>socks
</span></span><span style="display:flex;"><span>candy cane
</span></span><span style="display:flex;"><span>white chocolate
</span></span><span style="display:flex;"><span>chocolate
</span></span><span style="display:flex;"><span>chestnuts
</span></span><span style="display:flex;"><span>hairbrush
</span></span></code></pre></div><p>There! Now we&rsquo;ve got a comprehensive set of super personalized gift lists. Thanks Bash! Too bad it can&rsquo;t do the shopping for us, too.</p>
]]></content></entry><entry><title type="html">A cron job that could save you from a ransomware attack</title><link href="https://victoria.dev/archive/a-cron-job-that-could-save-you-from-a-ransomware-attack/"/><id>https://victoria.dev/archive/a-cron-job-that-could-save-you-from-a-ransomware-attack/</id><author><name>Victoria Drake</name></author><published>2019-11-13T08:27:31-04:00</published><updated>2019-11-13T08:27:31-04:00</updated><content type="html"><![CDATA[<p>It&rsquo;s 2019, and ransomware has become a thing.</p>
<p>Systems that interact with the public, like companies, educational institutions, and public services, are most susceptible. While delivery methods for ransomware vary from the physical realm to communication via social sites and email, all methods only require one person to make one mistake in order for ransomware to proliferate.</p>
<p>Ransomware, as you may have heard, is a malicious program that encrypts your files, rendering them unreadable and useless to you. It can include instructions for paying a ransom, usually by sending cryptocurrency, in order to obtain the decryption key. Successful ransomware attacks typically exploit vital, time-sensitive systems. Victims like public services and medical facilities are more likely to have poor or zero recovery processes, leaving governments or insurance providers to reward attackers with ransom payments.</p>
<p>Individuals, especially less-than-tech-savvy ones, are no less at risk. Ransomware can occlude personal documents and family photos that may only exist on one machine.</p>
<p>Thankfully, a fairly low-tech solution exists for rendering ransomware inept: back up your data!</p>
<p>You could achieve this with a straightforward system like plugging in an external hard drive and dragging files over once a day, but this method has a few hurdles. Manually transferring files may be slow or incomplete, and besides, you&rsquo;ll first have to remember to do it.</p>
<p>In my constant pursuit of automating all the things, there&rsquo;s one tool I often return to for its simplicity and reliability: <code>cron</code>. Cron does one thing, and does it well: it runs commands on a schedule.</p>
<p>I first used it a few months shy of three years ago (Have I really been blogging that long?!) to create <a href="/blog/how-i-created-custom-desktop-notifications-using-terminal-and-cron/">custom desktop notifications on Linux</a>. Using the crontab configuration file, which you can edit by running <code>crontab -e</code>, you can specify a schedule for running any commands you like. Here&rsquo;s what the scheduling syntax looks like, from the <a href="https://en.wikipedia.org/wiki/Cron">Wikipedia cron page</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># ┌───────────── minute (0 - 59)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># │ ┌───────────── hour (0 - 23)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># │ │ ┌───────────── day of the month (1 - 31)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># │ │ │ ┌───────────── month (1 - 12)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># │ │ │ │ ┌───────────── day of the week (0 - 6)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># │ │ │ │ │</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># │ │ │ │ │</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># │ │ │ │ │</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># * * * * * command to execute</span>
</span></span></code></pre></div><p>For example, a cron job that runs every day at 00:00 would look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> * * *
</span></span></code></pre></div><p>To run a job every twelve hours, the syntax is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#ae81ff">0</span> */12 * * *
</span></span></code></pre></div><p>This <a href="https://crontab.guru/">great tool</a> can help you wrap your head around the cron scheduling syntax.</p>
<p>What&rsquo;s a scheduler have to do with backing up? By itself, not much. The simple beauty of cron is that it runs commands - any shell commands, and any scripts that you&rsquo;d normally run on the command line. As you may have gleaned from my other posts, I&rsquo;m of the strong opinion that you can do just about anything on the command line, including backing up your files. Options for storage in this area are plentiful, from near-to-free local and cloud options, as well as paid managed services too numerous to list. For CLI tooling, we have utilitarian classics like <code>rsync</code>, and CLI tools for specific cloud providers like AWS.</p>
<h2 id="backing-up-with-rsync">Backing up with <code>rsync</code></h2>
<p><a href="https://en.wikipedia.org/wiki/Rsync">The <code>rsync</code> utility</a> is a classic choice, and can back up your files to an external hard drive or remote server while making intelligent determinations about which files to update. It uses file size and modification times to recognize file changes, and then only transfers changed files, saving time and bandwidth.</p>
<p>The <a href="https://download.samba.org/pub/rsync/rsync.html"><code>rsync</code> syntax</a> can be a little nuanced; for example, a trailing forward slash will copy just the contents of the directory, instead of the directory itself. I found examples to be helpful in understanding the usage and syntax.</p>
<p>Here&rsquo;s one for backing up a local directory to a local destination, such as an external hard drive:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>rsync -a /home/user/directory /media/user/destination
</span></span></code></pre></div><p>The first argument is the source, and the second is the destination. Reversing these in the above example would copy files from the mounted drive to the local home directory.</p>
<p>The <code>a</code> flag for archive mode is one of <code>rsync</code>&rsquo;s superpowers. Equivalent to flags <code>-rlptgoD</code>, it:</p>
<ul>
<li>Syncs files recursively through directories (<code>r</code>);</li>
<li>Preserves symlinks (<code>l</code>), permissions (<code>p</code>), modification times (<code>t</code>), groups (<code>g</code>), and owner (<code>o</code>); and</li>
<li>Copies device and special files (<code>D</code>).</li>
</ul>
<p>Here&rsquo;s another example, this time for backing up the contents of a local directory to a directory on a remote server using SSH:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>rsync -avze ssh /home/user/directory/ user@remote.host.net:home/user/directory
</span></span></code></pre></div><p>The <code>v</code> flag turns on verbose output, which is helpful if you like realtime feedback on which files are being transferred. During large transfers, however, it can tend to slow things down. The <code>z</code> flag can help with that, as it indicates that files should be compressed during transfer.</p>
<p>The <code>e</code> flag, followed by <code>ssh</code>, tells <code>rsync</code> to use SSH according to the destination instructions provided in the final argument.</p>
<h2 id="backing-up-with-aws-cli">Backing up with AWS CLI</h2>
<p>Amazon Web Services offers a command line interface tool for doing just about everything with your AWS set up, including a straightforward <a href="https://docs.aws.amazon.com/ja_jp/cli/latest/reference/s3/sync.html"><code>s3 sync</code> command</a> for recursively copying new and updated files to your S3 storage buckets. As a storage method for back up data, S3 is a stable and inexpensive choice. You can even <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html">turn on versioning in your bucket</a>.</p>
<p>The <a href="https://docs.aws.amazon.com/ja_jp/cli/latest/reference/s3/index.html#directory-and-s3-prefix-operations">syntax for interacting with directories</a> is fairly straightforward, and you can directly indicate your S3 bucket as an <code>S3Uri</code> argument in the form of <code>s3://mybucket/mykey</code>. To back up a local directory to your S3 bucket, the command is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>aws s3 sync /home/user/directory s3://mybucket
</span></span></code></pre></div><p>Similar to <code>rsync</code>, reversing the source and destination would download files from the S3 bucket.</p>
<p>The <code>sync</code> command is intuitive by default. It will guess the mime type of uploaded files, as well as include files discovered by following symlinks. A variety of options exist to control these and other defaults, even including flags to specify the server-side encryption to be used.</p>
<h2 id="setting-up-your-cronjob-back-up">Setting up your cronjob back up</h2>
<p>You can edit your machine&rsquo;s cron file by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>crontab -e
</span></span></code></pre></div><p>Intuitive as it may be, it&rsquo;s worth mentioning that your back up commands will only run when your computer is turned on and the cron daemon is running. With this in mind, choose a schedule for your cronjob that aligns with times when your machine is powered on, and maybe not overloaded with other work.</p>
<p>To back up to an S3 bucket every day at 8AM, for example, you&rsquo;d put a line in your crontab that looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#ae81ff">0</span> <span style="color:#ae81ff">8</span> * * * aws s3 sync /home/user/directory s3://mybucket
</span></span></code></pre></div><p>If you&rsquo;re curious whether your cron job is currently running, find the PID of cron with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>pstree -ap | grep cron
</span></span></code></pre></div><p>Then run <code>pstree -ap &lt;PID&gt;</code>.</p>
<p>This rabbit hole goes deeper; a quick search can reveal different ways of organizing and scheduling cronjobs, or help you find different utilities to run cronjobs when your computer is asleep. To protect against the possibility of ransomware-affected files being transferred to your back up, incrementally separated archives are a good idea. In essence, however, this basic set up is all you really need to create a reliable, automatic back up system.</p>
<h2 id="dont-feed-the-trolls">Don&rsquo;t feed the trolls</h2>
<p>Humans are fallible; that&rsquo;s why cyberattacks work. The success of a ransomware attack depends on the victim having no choice but to pay up in order to return to business as usual. A highly accessible recent back up undermines attackers who depend on us being unprepared. By blowing away a system and restoring from yesterday&rsquo;s back up, we may lose a day of progress; ransomers, however, gain nothing at all.</p>
<p>For further resources on ransomware defense for users and organizations, check out <a href="https://www.us-cert.gov/Ransomware">CISA&rsquo;s advice on ransomware</a>.</p>
]]></content></entry><entry><title type="html">A lightweight, tool-agnostic CI/CD flow with GitHub Actions</title><link href="https://victoria.dev/posts/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/"/><id>https://victoria.dev/posts/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/</id><author><name>Victoria Drake</name></author><published>2019-10-28T08:28:52-04:00</published><updated>2019-10-28T08:28:52-04:00</updated><content type="html"><![CDATA[<p>Agnostic tooling is the clever notion that you should be able to run your code in various environments. With many continuous integration and continuous development (CI/CD) apps available, agnostic tooling gives developers a big advantage: portability.</p>
<p>Of course, having your CI/CD work <em>everywhere</em> is a tall order. Popular <a href="https://github.com/marketplace/category/continuous-integration">CI apps for GitHub repositories</a> alone use a multitude of configuration languages spanning <a href="https://groovy-lang.org/syntax.html">Groovy</a>, <a href="https://yaml.org/">YAML</a>, <a href="https://github.com/toml-lang/toml">TOML</a>, <a href="https://json.org/">JSON</a>, and more&hellip; all with differing syntax, of course. Porting workflows from one tool to another is more than a one-cup-of-coffee process.</p>
<p>The introduction of <a href="https://github.com/features/actions">GitHub Actions</a> has the potential to add yet another tool to the mix; or, for the right set up, greatly simplify a CI/CD workflow.</p>
<p>Prior to this article, I accomplished my CD flow with several lashed-together apps. I used AWS Lambda to trigger site builds on a schedule. I had Netlify build on push triggers, as well as run image optimization, and then push my site to the public Pages repository. I used Travis CI in the public repository to test the HTML. All this worked in conjunction with GitHub Pages, which actually hosts the site.</p>
<p>I&rsquo;m now using the GitHub Actions beta to accomplish all the same tasks, with one <a href="/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/">portable Makefile</a> of build instructions, and without any other CI/CD apps.</p>
<h2 id="appreciating-the-shell">Appreciating the shell</h2>
<p>What do most CI/CD tools have in common? They run your workflow instructions in a shell environment! This is wonderful, because that means that most CI/CD tools can do anything that you can do in a terminal&hellip; and you can do pretty much <em>anything</em> in a terminal.</p>
<p>Especially for a contained use case like building my static site with a generator like Hugo, running it all in a shell is a no-brainer. To tell the magic box what to do, we just need to write instructions.</p>
<p>While a shell script is certainly the most portable option, I use the still-very-portable <a href="https://en.wikipedia.org/wiki/Make_(software)">Make</a> to write my process instructions. This provides me with some advantages over simple shell scripting, like the use of variables and <a href="https://en.wikipedia.org/wiki/Make_(software)#Macros">macros</a>, and the modularity of <a href="https://en.wikipedia.org/wiki/Makefile#Rules">rules</a>.</p>
<p>I got into the <a href="/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/">nitty-gritty of my Makefile in my last post</a>. Let&rsquo;s look at how to get GitHub Actions to run it.</p>
<h2 id="using-a-makefile-with-github-actions">Using a Makefile with GitHub Actions</h2>
<p>To our point on portability, my magic Makefile is stored right in the repository root. Since it&rsquo;s included with the code, I can run the Makefile locally on any system where I can clone the repository, provided I set the environment variables. Using GitHub Actions as my CI/CD tool is as straightforward as making Make go worky-worky.</p>
<p>I found the <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">GitHub Actions workflow syntax guide</a> to be pretty straightforward, though also lengthy on options. Here&rsquo;s the necessary set up for getting the Makefile to run.</p>
<p>The workflow file at <code>.github/workflows/make-master.yml</code> contains the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">make-master</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schedule</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#39;20 13 * * *&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@master</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run Makefile</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">TOKEN</span>: <span style="color:#ae81ff">${{ secrets.TOKEN }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">make all</span>
</span></span></code></pre></div><p>I&rsquo;ll explain the components that make this work.</p>
<h2 id="triggering-the-workflow">Triggering the workflow</h2>
<p>Actions support multiple <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">triggers for a workflow</a>. Using the <code>on</code> syntax, I&rsquo;ve defined two triggers for mine: a <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushbranchestagsbranches-ignoretags-ignore">push event</a> to the <code>master</code> branch only, and a <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule">scheduled</a> <code>cron</code> job.</p>
<p>Once the <code>make-master.yml</code> file is in your repository, either of your triggers will cause Actions to run your Makefile. To see how the last run went, you can also <a href="https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge">add a fun badge</a> to the README.</p>
<h3 id="one-hacky-thing">One hacky thing</h3>
<p>Because the Makefile runs on every push to <code>master</code>, I sometimes would get errors when the site build had no changes. When Git, via <a href="/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/">my Makefile</a>, attempted to commit to the Pages repository, no changes were detected and the commit would fail annoyingly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>nothing to commit, working tree clean
</span></span><span style="display:flex;"><span>On branch master
</span></span><span style="display:flex;"><span>Your branch is up to date with &#39;origin/master&#39;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nothing to commit, working tree clean
</span></span><span style="display:flex;"><span>Makefile:62: recipe for target &#39;deploy&#39; failed
</span></span><span style="display:flex;"><span>make: *** [deploy] Error 1
</span></span><span style="display:flex;"><span>##[error]Process completed with exit code 2.
</span></span></code></pre></div><p>I came across some solutions that proposed using <code>diff</code> to check if a commit should be made, but this may not work for <a href="https://github.com/benmatselby/hugo-deploy-gh-pages/issues/4">reasons</a>. As a workaround, I simply added the <a href="https://gohugo.io/methods/time/utc/">current UTC time</a> to my index page so that every build would contain a change to be committed.</p>
<h2 id="environment-and-variables">Environment and variables</h2>
<p>You can define the <a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources">virtual environment</a> for your workflow to run in using the <code>runs-on</code> syntax. The <del>obvious best choice</del> one I chose is Ubuntu. Using <code>ubuntu-latest</code> gets me the most updated version, whatever that happens to be when you&rsquo;re reading this.</p>
<p>GitHub sets some <a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables">default environment variables</a> for workflows. The <a href="https://github.com/actions/checkout"><code>actions/checkout</code> action</a> with <code>fetch-depth: 1</code> creates a copy of just the most recent commit your repository in the <code>GITHUB_WORKSPACE</code> variable. This allows the workflow to access the Makefile at <code>GITHUB_WORKSPACE/Makefile</code>. Without using the checkout action, the Makefile won&rsquo;t be found, and I get an error that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>make: *** No rule to make target &#39;all&#39;.  Stop.
</span></span><span style="display:flex;"><span>Running Makefile
</span></span><span style="display:flex;"><span>##[error]Process completed with exit code 2.
</span></span></code></pre></div><p>While there is a <a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication">default <code>GITHUB_TOKEN</code> secret</a>, this is not the one I used. The default is only locally scoped to the current repository. To be able to push to my separate GitHub Pages repository, I created a <a href="https://github.com/settings/tokens">personal access token</a> scoped to <code>public_repo</code> and pass it in as the <code>secrets.TOKEN</code> encrypted variable. For a step-by-step, see <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets">Creating and using encrypted secrets</a>.</p>
<h2 id="portable-tooling">Portable tooling</h2>
<p>The nice thing about using a simple Makefile to define the bulk of my CI/CD process is that it&rsquo;s completely portable. I can run a Makefile anywhere I have access to an environment, which is most CI/CD apps, virtual instances, and, of course, on my local machine.</p>
<p>One of the reasons I like GitHub Actions is that getting my Makefile to run was pretty straightforward. I think the syntax is well done - easy to read, and intuitive when it comes to finding an option you&rsquo;re looking for. For someone already using GitHub Pages, Actions provides a pretty seamless CD experience; and if that should ever change, I can run my Makefile elsewhere. ¯\_(ツ)_/¯</p>
]]></content></entry><entry><title type="html">A portable Makefile for continuous delivery with Hugo and GitHub Pages</title><link href="https://victoria.dev/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/"/><id>https://victoria.dev/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/</id><author><name>Victoria Drake</name></author><published>2019-10-21T09:09:06-04:00</published><updated>2019-10-21T09:09:06-04:00</updated><content type="html"><![CDATA[<p>Fun fact: I first launched this GitHub Pages site 1,018 days ago.</p>
<p>Since then, we&rsquo;ve grown together. From early cringe-worthy commit messages, through eighty-six versions of <a href="https://gohugo.io/">Hugo</a>, and up until last week, a less-than-streamlined multi-app continuous integration and deployment (CI/CD) workflow.</p>
<p>If you know me at all, you know I love to automate things. I&rsquo;ve been using a combination of AWS Lambda, Netlify, and Travis CI to automatically build and publish this site. My workflow for the task includes:</p>
<ul>
<li>Build with <a href="https://gohugo.io/">Hugo</a> on push to master, and on a schedule (Netlify and Lambda);</li>
<li>Optimize and resize images (Netlify);</li>
<li>Test with <a href="https://github.com/gjtorikian/html-proofer">HTMLProofer</a> (Travis CI); and</li>
<li>Deploy to my <a href="/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/">separate, public, GitHub Pages repository</a> (Netlify).</li>
</ul>
<p>Thanks to the introduction of GitHub Actions, I&rsquo;m able to do all the above with just one portable <a href="https://en.wikipedia.org/wiki/Makefile">Makefile</a>.</p>
<p>Next week I&rsquo;ll cover my Actions set up; today, I&rsquo;ll take you through the nitty-gritty of my Makefile so you can write your own.</p>
<h2 id="makefile-portability">Makefile portability</h2>
<p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html">POSIX-standard-flavour Make</a> runs on every Unix-like system out there. <a href="https://en.wikipedia.org/wiki/Make_(software)#Derivatives">Make derivatives</a>, such as <a href="https://www.gnu.org/software/make/">GNU Make</a> and several flavours of BSD Make also run on Unix-like systems, though their particular use requires installing the respective program. To write a truly portable Makefile, mine follows the POSIX standard. (For a more thorough summation of POSIX-compatible Makefiles, I found this article helpful: <a href="https://nullprogram.com/blog/2017/08/20/">A Tutorial on Portable Makefiles</a>.) I run Ubuntu, so I&rsquo;ve tested the portability aspect using the BSD Make programs <code>bmake</code>, <code>pmake</code>, and <code>fmake</code>. Compatibility with non-Unix-like systems is a little more complicated, since shell commands differ. With derivatives such as Nmake, it&rsquo;s better to write a separate Makefile with appropriate Windows commands.</p>
<p>While much of my particular use case could be achieved with shell scripting, I find Make offers some worthwhile advantages. I enjoy the ease of using variables and <a href="https://en.wikipedia.org/wiki/Make_(software)#Macros">macros</a>, and the modularity of <a href="https://en.wikipedia.org/wiki/Makefile#Rules">rules</a> when it comes to organizing my steps.</p>
<p>The writing of rules mostly comes down to shell commands, which is the main reason Makefiles are as portable as they are. The best part is that you can do pretty much <em>anything</em> in a terminal, and certainly handle all the workflow steps listed above.</p>
<h2 id="my-continuous-deployment-makefile">My continuous deployment Makefile</h2>
<p>Here&rsquo;s the portable Makefile that handles my workflow. Yes, I put emojis in there. I&rsquo;m a monster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span><span style="color:#a6e22e">.POSIX</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>DESTDIR<span style="color:#f92672">=</span>public
</span></span><span style="display:flex;"><span>HUGO_VERSION<span style="color:#f92672">=</span>0.58.3
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>OPTIMIZE <span style="color:#f92672">=</span> find <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span> -not -path <span style="color:#e6db74">&#34;*/static/*&#34;</span> <span style="color:#ae81ff">\(</span> -name <span style="color:#e6db74">&#39;*.png&#39;</span> -o -name <span style="color:#e6db74">&#39;*.jpg&#39;</span> -o -name <span style="color:#e6db74">&#39;*.jpeg&#39;</span> <span style="color:#ae81ff">\)</span> -print0 | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#960050;background-color:#1e0010">xargs</span> <span style="color:#960050;background-color:#1e0010">-0</span> <span style="color:#960050;background-color:#1e0010">-P8</span> <span style="color:#960050;background-color:#1e0010">-n2</span> <span style="color:#960050;background-color:#1e0010">mogrify</span> <span style="color:#960050;background-color:#1e0010">-strip</span> <span style="color:#960050;background-color:#1e0010">-thumbnail</span> <span style="color:#e6db74">&#39;1000&gt;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> get_repository clean get build test deploy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> get_repository
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">get_repository</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🛎 Getting Pages repository&#34;</span>
</span></span><span style="display:flex;"><span> git clone https://github.com/victoriadrake/victoriadrake.github.io.git <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> clean
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🧹 Cleaning old build&#34;</span>
</span></span><span style="display:flex;"><span> cd <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span> <span style="color:#f92672">&amp;&amp;</span> rm -rf *
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> get
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">get</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;❓ Checking for hugo&#34;</span>
</span></span><span style="display:flex;"><span> @if ! <span style="color:#f92672">[</span> -x <span style="color:#e6db74">&#34;</span>$$<span style="color:#e6db74">(command -v hugo)&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  echo <span style="color:#e6db74">&#34;🤵 Getting Hugo&#34;</span>;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>     wget -q -P tmp/ https://github.com/gohugoio/hugo/releases/download/v<span style="color:#66d9ef">$(</span>HUGO_VERSION<span style="color:#66d9ef">)</span>/hugo_extended_<span style="color:#66d9ef">$(</span>HUGO_VERSION<span style="color:#66d9ef">)</span>_Linux-64bit.tar.gz;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  tar xf tmp/hugo_extended_<span style="color:#66d9ef">$(</span>HUGO_VERSION<span style="color:#66d9ef">)</span>_Linux-64bit.tar.gz -C tmp/;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sudo mv -f tmp/hugo /usr/bin/;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  rm -rf tmp/;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  hugo version;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> build
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🍳 Generating site&#34;</span>
</span></span><span style="display:flex;"><span> hugo --gc --minify -d <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🧂 Optimizing images&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">$(</span>OPTIMIZE<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> test
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">test</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🍜 Testing HTML&#34;</span>
</span></span><span style="display:flex;"><span> docker run -v <span style="color:#66d9ef">$(</span>GITHUB_WORKSPACE<span style="color:#66d9ef">)</span>/<span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span>/:/mnt 18fgsa/html-proofer mnt --disable-external
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> deploy
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">deploy</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🎁 Preparing commit&#34;</span>
</span></span><span style="display:flex;"><span> @cd <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git config user.email <span style="color:#e6db74">&#34;hello@victoria.dev&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git config user.name <span style="color:#e6db74">&#34;Victoria via GitHub Actions&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git add . <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git status <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git commit -m <span style="color:#e6db74">&#34;🤖 CD bot is helping&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git push -f -q https://<span style="color:#66d9ef">$(</span>TOKEN<span style="color:#66d9ef">)</span>@github.com/victoriadrake/victoriadrake.github.io.git master
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🚀 Site is deployed!&#34;</span>
</span></span></code></pre></div><p>Sequentially, this workflow:</p>
<ol>
<li>Clones the public Pages repository;</li>
<li>Cleans (deletes) the previous build files;</li>
<li>Downloads and installs the specified version of Hugo, if Hugo is not already present;</li>
<li>Builds the site;</li>
<li>Optimizes images;</li>
<li>Tests the built site with HTMLProofer, and</li>
<li>Prepares a new commit and pushes to the public Pages repository.</li>
</ol>
<p>If you&rsquo;re familiar with command line, most of this may look familiar. Here are a couple bits that might warrant a little explanation.</p>
<h3 id="checking-if-a-program-is-already-installed">Checking if a program is already installed</h3>
<p>I think this bit is pretty tidy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ! <span style="color:#f92672">[</span> -x <span style="color:#e6db74">&#34;</span>$$<span style="color:#e6db74">(command -v hugo)&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>I use a negated <code>if</code> conditional in conjunction with <code>command -v</code> to check if an executable (<code>-x</code>) called <code>hugo</code> exists. If one is not present, the script gets the specified version of Hugo and installs it. <a href="https://stackoverflow.com/a/677212">This Stack Overflow answer</a> has a nice summation of why <code>command -v</code> is a more portable choice than <code>which</code>.</p>
<h3 id="image-optimization">Image optimization</h3>
<p>My Makefile uses <code>mogrify</code> to batch resize and compress images in particular folders. It finds them automatically using the file extension, and only modifies images that are larger than the target size of 1000px in any dimension. I wrote more about the <a href="/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/">batch-processing one-liner in this post</a>.</p>
<p>There are a few different ways to achieve this same task, one of which, theoretically, is to take advantage of Make&rsquo;s <a href="https://en.wikipedia.org/wiki/Make_(software)#Suffix_rules">suffix rules</a> to run commands only on image files. I find the shell script to be more readable.</p>
<h3 id="using-dockerized-htmlproofer">Using Dockerized HTMLProofer</h3>
<p>HTMLProofer is installed with <code>gem</code>, and uses Ruby and <a href="https://nokogiri.org/tutorials/ensuring_well_formed_markup.html">Nokogiri</a>, which adds up to a lot of installation time for a CI workflow. Thankfully, <a href="https://github.com/18F">18F</a> has a <a href="https://github.com/18F/html-proofer-docker">Dockerized version</a> that is much faster to implement. Its usage requires starting the container with the built site directory <a href="https://docs.docker.com/storage/volumes/#start-a-container-with-a-volume">mounted as a data volume</a>, which is easily achieved by appending to the <code>docker run</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker run -v /absolute/path/to/site/:/mounted-site 18fgsa/html-proofer /mounted-site
</span></span></code></pre></div><p>In my Makefile, I specify the absolute site path using the <a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables">default environment variable</a> <code>GITHUB_WORKSPACE</code>. I&rsquo;ll dive into this and other GitHub Actions features in the next post.</p>
<p>In the meantime, happy Making!</p>
]]></content></entry><entry><title type="html">How to quickly batch resize, compress, and convert images with a Bash one-liner</title><link href="https://victoria.dev/archive/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/"/><id>https://victoria.dev/archive/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/</id><author><name>Victoria Drake</name></author><published>2019-10-14T08:27:49-04:00</published><updated>2019-10-14T08:27:49-04:00</updated><content type="html"><![CDATA[<p>Part of my Hugo site continuous deployment workflow is the processing of 210 images, at time of writing.</p>
<p>Here&rsquo;s my one-liner:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find public/ -not -path <span style="color:#e6db74">&#34;*/static/*&#34;</span> <span style="color:#ae81ff">\(</span> -name <span style="color:#e6db74">&#39;*.png&#39;</span> -o -name <span style="color:#e6db74">&#39;*.jpg&#39;</span> -o -name <span style="color:#e6db74">&#39;*.jpeg&#39;</span> <span style="color:#ae81ff">\)</span> -print0 | xargs -0 -P8 -n2 mogrify -strip -thumbnail <span style="color:#e6db74">&#39;1000&gt;&#39;</span> -format jpg
</span></span></code></pre></div><p>I use <code>find</code> to target only certain image file formats in certain directories. With <a href="https://www.imagemagick.org/script/mogrify.php"><code>mogrify</code>, part of ImageMagick</a>, I resize only the images that are larger than a certain dimension, compress them, and strip the metadata. I tack on the <code>format</code> flag to create jpg copies of the images.</p>
<p>Here&rsquo;s the one-liner again (broken up for better reading):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># Look in the public/ directory</span>
</span></span><span style="display:flex;"><span>find public/ <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#75715e"># Ignore directories called &#34;static&#34; regardless of location</span>
</span></span><span style="display:flex;"><span>-not -path <span style="color:#e6db74">&#34;*/static/*&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#75715e"># Print the file paths of all files ending with any of these extensions</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">\(</span> -name <span style="color:#e6db74">&#39;*.png&#39;</span> -o -name <span style="color:#e6db74">&#39;*.jpg&#39;</span> -o -name <span style="color:#e6db74">&#39;*.jpeg&#39;</span> <span style="color:#ae81ff">\)</span> -print0 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#75715e"># Pipe the file paths to xargs and use 8 parallel workers to process 2 arguments</span>
</span></span><span style="display:flex;"><span>| xargs -0 -P8 -n2 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#75715e"># Tell mogrify to strip metadata, and...</span>
</span></span><span style="display:flex;"><span>mogrify -strip <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#75715e"># ...compress and resize any images larger than the target size (1000px in either dimension)</span>
</span></span><span style="display:flex;"><span>-thumbnail <span style="color:#e6db74">&#39;1000&gt;&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#75715e"># Convert the files to jpg format</span>
</span></span><span style="display:flex;"><span>-format jpg
</span></span></code></pre></div><p>That&rsquo;s it. That&rsquo;s the post.</p>
]]></content></entry><entry><title type="html">How to do twice as much with half the keystrokes using `.bashrc`</title><link href="https://victoria.dev/archive/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/"/><id>https://victoria.dev/archive/how-to-do-twice-as-much-with-half-the-keystrokes-using-.bashrc/</id><author><name>Victoria Drake</name></author><published>2019-08-21T09:17:02-04:00</published><updated>2019-08-21T09:17:02-04:00</updated><content type="html"><![CDATA[<p>In my <a href="/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/">recent post about setting up Ubuntu with Bash scripts</a>, I briefly alluded to the magic of <code>.bashrc</code>. This didn&rsquo;t really do it justice, so here&rsquo;s a quick post that offers a bit more detail about what the Bash configuration file can do.</p>
<p>My current configuration hugely improves my workflow, and saves me well over 50% of the keystrokes I would have to employ without it! Let&rsquo;s look at some examples of aliases, functions, and prompt configurations that can improve our workflow by helping us be more efficient with fewer key presses.</p>
<h2 id="bash-aliases">Bash aliases</h2>
<p>A smartly written <code>.bashrc</code> can save a whole lot of keystrokes. You can take advantage of this in the literal sense by using <a href="https://www.gnu.org/software/bash/manual/html_node/Aliases.html">bash aliases</a>, or strings that expand to larger commands. For an indicative example, here is a Bash alias for copying files in the terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Always copy contents of directories (r)ecursively and explain (v) what was done</span>
</span></span><span style="display:flex;"><span>alias cp<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;cp -rv&#39;</span>
</span></span></code></pre></div><p>The <code>alias</code> command defines the string you&rsquo;ll type, followed by what that string will expand to. You can override existing commands like <code>cp</code> above. On its own, the <code>cp</code> command will only copy files, not directories, and succeeds silently. With this alias, you need not remember to pass those two flags, nor <code>cd</code> or <code>ls</code> the location of our copied file to confirm that it&rsquo;s there! Now, just those two key presses (for <code>c</code> and <code>d</code>) will do all of that for us.</p>
<p>Here are a few more <code>.bashrc</code> aliases for passing flags with common functions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># List contents with colors for file types, (A)lmost all hidden files (without . and ..), in (C)olumns, with class indicators (F)</span>
</span></span><span style="display:flex;"><span>alias ls<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls --color=auto -ACF&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List contents with colors for file types, (a)ll hidden entries (including . and ..), use (l)ong listing format, with class indicators (F)</span>
</span></span><span style="display:flex;"><span>alias ll<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ls --color=auto -alF&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Explain (v) what was done when moving a file</span>
</span></span><span style="display:flex;"><span>alias mv<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;mv -v&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create any non-existent (p)arent directories and explain (v) what was done</span>
</span></span><span style="display:flex;"><span>alias mkdir<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;mkdir -pv&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Always try to (c)ontinue getting a partially-downloaded file</span>
</span></span><span style="display:flex;"><span>alias wget<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;wget -c&#39;</span>
</span></span></code></pre></div><p>Aliases come in handy when you want to avoid typing long commands, too. Here are a few I use when working with Python environments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>alias pym<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;python3 manage.py&#39;</span>
</span></span><span style="display:flex;"><span>alias mkenv<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;python3 -m venv env&#39;</span>
</span></span><span style="display:flex;"><span>alias startenv<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;source env/bin/activate &amp;&amp; which python3&#39;</span>
</span></span><span style="display:flex;"><span>alias stopenv<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;deactivate&#39;</span>
</span></span></code></pre></div><p>For further inspiration on ways Bash aliases can save time, I highly recommend <a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-useful-bash-aliases-and-functions">the examples in this article</a>.</p>
<h2 id="bash-functions">Bash functions</h2>
<p>One downside of the aliases above is that they&rsquo;re rather static - they&rsquo;ll always expand to exactly the text declared. For a Bash alias that takes arguments, you&rsquo;ll need to create a function. You can do this like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Show contents of the directory after changing to it</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> cd <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    builtin cd <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    ls -ACF
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>I can&rsquo;t begin to tally how many times I&rsquo;ve typed <code>cd</code> and then <code>ls</code> immediately after to see the contents of the directory I&rsquo;m now in. With this function set up, it all happens with just those two letters! The function takes the first argument, <code>$1</code>, as the location to change directory to, then prints the contents of that directory in nicely formatted columns with file type indicators. The <code>builtin</code> part is necessary to get Bash to allow us to override this default command.</p>
<p>Bash functions are very useful when it comes to downloading or upgrading software, too.</p>
<h3 id="bash-function-for-downloading-extended-hugo">Bash function for downloading extended Hugo</h3>
<p>Thanks to the static site generator Hugo&rsquo;s excellent ship frequency, I previously spent at least a few minutes every couple weeks <a href="https://github.com/gohugoio/hugo/releases">downloading the new extended version</a>. With a Bash function, I only need to pass in the version number, and the upgrade happens in a few seconds.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Hugo install or upgrade</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> gethugo <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    wget -q -P tmp/ https://github.com/gohugoio/hugo/releases/download/v<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>/hugo_extended_<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>_Linux-64bit.tar.gz
</span></span><span style="display:flex;"><span>    tar xf tmp/hugo_extended_<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>_Linux-64bit.tar.gz -C tmp/
</span></span><span style="display:flex;"><span>    sudo mv -f tmp/hugo /usr/local/bin/
</span></span><span style="display:flex;"><span>    rm -rf tmp/
</span></span><span style="display:flex;"><span>    hugo version
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The <code>$@</code> notation simply takes all the arguments given, replacing its spot in the function. To run the above function and download Hugo version 0.57.2, you use the command <code>gethugo 0.57.2</code>.</p>
<h3 id="bash-function-for-downloading-a-specific-go-version">Bash function for downloading a specific Go version</h3>
<p>I&rsquo;ve got one for <a href="https://golang.org/">Golang</a>, too:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> getgolang <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    sudo rm -rf /usr/local/go
</span></span><span style="display:flex;"><span>    wget -q -P tmp/ https://dl.google.com/go/go<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>.linux-amd64.tar.gz
</span></span><span style="display:flex;"><span>    sudo tar -C /usr/local -xzf tmp/go<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>.linux-amd64.tar.gz
</span></span><span style="display:flex;"><span>    rm -rf tmp/
</span></span><span style="display:flex;"><span>    go version
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="bash-function-for-adding-a-gitlab-remote">Bash function for adding a GitLab remote</h3>
<p>Or how about a function that adds a remote origin URL for GitLab to the current repository?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> glab <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    git remote set-url origin --add git@gitlab.com:<span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>/<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PWD##*/<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>.git
</span></span><span style="display:flex;"><span>    git remote -v
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>With <code>glab username</code>, you can create a new <code>origin</code> URL for the current Git repository with our <code>username</code> on GitLab.com. Pushing to a new remote URL <a href="/posts/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/#a-bash-one-liner-to-create-and-push-many-repositories-on-gitlab">automatically creates a new private GitLab repository</a>, so this is a useful shortcut for creating backups!</p>
<p>Bash functions are really only limited by the possibilities of scripting, of which there are, practically, few limits. If there&rsquo;s anything you do on a frequent basis that requires typing a few lines into a terminal, you can probably create a Bash function for it!</p>
<h2 id="bash-prompt">Bash prompt</h2>
<p>Besides directory contents, it&rsquo;s also useful to see the full path of the directory we&rsquo;re in. The Bash prompt can show us this path, along with other useful information like our current Git branch. To make it more readable, you can define colours for each part of the prompt. Here&rsquo;s how you can set up our prompt in <code>.bashrc</code> to accomplish this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Colour codes are cumbersome, so let&#39;s name them</span>
</span></span><span style="display:flex;"><span>txtcyn<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\e[0;96m\]&#39;</span> <span style="color:#75715e"># Cyan</span>
</span></span><span style="display:flex;"><span>txtpur<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\e[0;35m\]&#39;</span> <span style="color:#75715e"># Purple</span>
</span></span><span style="display:flex;"><span>txtwht<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\e[0;37m\]&#39;</span> <span style="color:#75715e"># White</span>
</span></span><span style="display:flex;"><span>txtrst<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;\[\e[0m\]&#39;</span>    <span style="color:#75715e"># Text Reset</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Which (C)olour for what part of the prompt?</span>
</span></span><span style="display:flex;"><span>pathC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>txtcyn<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>gitC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>txtpur<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>pointerC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>txtwht<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>normalC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>txtrst<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the name of our branch and put parenthesis around it</span>
</span></span><span style="display:flex;"><span>gitBranch<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    git branch 2&gt; /dev/null | sed -e <span style="color:#e6db74">&#39;/^[^*]/d&#39;</span> -e <span style="color:#e6db74">&#39;s/* \(.*\)/(\1)/&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Build the prompt</span>
</span></span><span style="display:flex;"><span>export PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>pathC<span style="color:#e6db74">}</span><span style="color:#e6db74">\w </span><span style="color:#e6db74">${</span>gitC<span style="color:#e6db74">}</span><span style="color:#e6db74">\$(gitBranch) </span><span style="color:#e6db74">${</span>pointerC<span style="color:#e6db74">}</span><span style="color:#e6db74">\$</span><span style="color:#e6db74">${</span>normalC<span style="color:#e6db74">}</span><span style="color:#e6db74"> &#34;</span>
</span></span></code></pre></div><p>Result:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>~/github/myrepo <span style="color:#f92672">(</span>master<span style="color:#f92672">)</span> $
</span></span></code></pre></div><p>Naming the colours helps to easily identify where one colour starts and stops, and where the next one begins. The prompt that you see in our terminal is defined by the string following <code>export PS1</code>, with each component of the prompt set with an <a href="https://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html">escape sequence</a>. Let&rsquo;s break that down:</p>
<ul>
<li><code>\w</code> displays the current working directory,</li>
<li><code>\$(gitBranch)</code> calls the <code>gitBranch</code> function defined above, which displays the current Git branch,</li>
<li><code>\$</code> will display a &ldquo;$&rdquo; if you are a normal user or in normal user mode, and a &ldquo;#&rdquo; if you are root.</li>
</ul>
<p>The <a href="https://www.gnu.org/software/bash/manual/html_node/Controlling-the-Prompt.html">full list of Bash escape sequences</a> can help us display many more bits of information, including even the time and date! Bash prompts are highly customizable and individual, so feel free to set it up any way you please.</p>
<p>Here are a few options that put information front and centre and can help us to work more efficiently.</p>
<h3 id="for-the-procrastination-averse">For the procrastination-averse</h3>
<p>Username and current time with seconds, in 24-hour HH:MM:SS format:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>userC<span style="color:#e6db74">}</span><span style="color:#e6db74">\u </span><span style="color:#e6db74">${</span>normalC<span style="color:#e6db74">}</span><span style="color:#e6db74">at \t &gt;&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user at 09:35:55 &gt;
</span></span></code></pre></div><h3 id="for-those-who-always-like-to-know-where-they-stand">For those who always like to know where they stand</h3>
<p>Full file path on a separate line, and username:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>pathC<span style="color:#e6db74">}</span><span style="color:#e6db74">\w</span><span style="color:#e6db74">${</span>normalC<span style="color:#e6db74">}</span><span style="color:#e6db74">\n\u:&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>~/github/myrepo
</span></span><span style="display:flex;"><span>user:
</span></span></code></pre></div><h3 id="for-the-minimalist">For the minimalist</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export PS1<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&gt;&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&gt;
</span></span></code></pre></div><p>We can build many practical prompts with just the basic escape sequences; once you start to integrate functions with prompts, as in the Git branch example, things can get really complicated. Whether this amount of complication is an addition or a detriment to your productivity, only you can know for sure!</p>
<p>Many fancy Bash prompts are possible with programs readily available with a quick search. I&rsquo;ve intentionally not provided samples here because, well, if you can tend to get as excited about this stuff as I can, it might be a couple hours before you get back to what you were doing before you started reading this post, and I just can&rsquo;t have that on my conscience. 🥺</p>
<p>We&rsquo;ve hopefully struck a nice balance now between time invested and usefulness gained from our Bash configuration file! I hope you use your newly-recovered keystroke capacity for good.</p>
]]></content></entry><entry><title type="html">How to set up a fresh Ubuntu desktop using only dotfiles and bash scripts</title><link href="https://victoria.dev/archive/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/"/><id>https://victoria.dev/archive/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/</id><author><name>Victoria Drake</name></author><published>2019-08-19T07:58:18-04:00</published><updated>2019-08-19T07:58:18-04:00</updated><content type="html"><![CDATA[<p>One of my most favorite things about open source files on GitHub is the ability to see how others do (what some people might call) mundane things, like set up their <code>.bashrc</code> and other dotfiles. While I&rsquo;m not as enthusiastic about ricing as I was when I first came to the Linux side, I still get pretty excited when I find a config setting that makes things prettier and faster, and thus, better.</p>
<p>I recently came across a few such things, particularly in <a href="https://github.com/tomnomnom">Tom Hudson&rsquo;s</a> dotfiles. Tom seems to like to script things, and some of those things include automatically setting up symlinks, and installing Ubuntu repository applications and other programs. This got me thinking. Could I automate the set up of a new machine to replicate my current one?</p>
<p>Being someone generally inclined to take things apart in order to see how they work, I know I&rsquo;ve messed up my laptop on occasion. (Usually when I&rsquo;m away from home, and my backup hard drive isn&rsquo;t.) On those rare but really inconvenient situations when my computer becomes a shell of its former self, (ba-dum-ching) it&rsquo;d be quite nice to have a fast, simple way of putting Humpty Dumpty back together again, just the way I like.</p>
<p>In contrast to creating a <a href="https://askubuntu.com/questions/19901/how-to-make-a-disk-image-and-restore-from-it-later">disk image and restoring it later</a>, a collection of bash scripts is easier to create, maintain, and move around. They require no special utilities, only an external transportation method. It&rsquo;s like passing along the recipe, instead of the whole bundt cake. (Mmm, cake.)</p>
<p>Additionally, functionality like this would be super useful when setting up a virtual machine, or VM, or even just a virtual private server, or VPS. (Both of which, now that I write this, would probably make more forgiving targets for my more destructive experiments&hellip; live and learn!)</p>
<p>Well, after some grepping and Googling and digging around, I now have a suite of scripts that can do this:</p>
<video controls="controls" poster="cover.jpg">
    <source src="setup.mp4" type="video/mp4" />
</video>
<p>This is the tail end of a test run of the set up scripts on a fresh Ubuntu desktop, loaded off a bootable USB. It had all my programs and settings restored in under three minutes!</p>
<p>This post will cover how to achieve the automatic set up of a computer running Ubuntu Desktop using bash scripts. This exact process was last used on Ubuntu 19.10; see my <a href="https://github.com/victoriadrake/dotfiles">dotfiles master branch</a> for the latest configuration. The majority of the information covered is applicable to all the Linux desktop flavours, though some syntax may differ. The bash scripts cover three main areas: linking dotfiles, installing software from Ubuntu and elsewhere, and setting up the desktop environment. We&rsquo;ll cover each of these areas and go over the important bits so that you can begin to craft your own scripts.</p>
<h2 id="dotfiles">Dotfiles</h2>
<p>Dotfiles are what most Linux enthusiasts call configuration files. They typically live in the user&rsquo;s home directory (denoted in bash scripts with the <a href="https://www.tldp.org/LDP/abs/html/internal.html#BUILTINREF">builtin</a> variable <code>$HOME</code>) and control the appearance and behavior of all kinds of programs. The file names begin with <code>.</code>, which denotes hidden files in Linux (hence &ldquo;dot&rdquo; files). Here are some common dotfiles and ways in which they&rsquo;re useful.</p>
<h3 id="bashrc"><code>.bashrc</code></h3>
<p>The <code>.bashrc</code> file is a list of commands executed at startup by interactive, non-login shells. <a href="https://www.tldp.org/LDP/abs/html/intandnonint.html">Interactive vs non-interactive shells</a> can be a little confusing, but aren&rsquo;t necessary for us to worry about here. For our purposes, any time you open a new terminal, see a prompt, and can type commands into it, your <code>.bashrc</code> was executed.</p>
<p>Lines in this file can help improve your workflow by creating aliases that reduce keystrokes, or by displaying a helpful prompt with useful information. It can even run user-created programs, like <a href="https://github.com/victoriadrake/eddie-terminal">Eddie</a>. For more ideas, you can have a look at <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/.bashrc">my <code>.bashrc</code> file on GitHub</a>.</p>
<h3 id="vimrc"><code>.vimrc</code></h3>
<p>The <code>.vimrc</code> dotfile configures the champion of all text editors, <a href="https://www.vim.org/about.php">Vim</a>. (If you haven&rsquo;t yet wielded the powers of the keyboard shortcuts, I highly recommend <a href="https://vim-adventures.com/">a fun game to learn Vim with</a>.)</p>
<p>In <code>.vimrc</code>, we can set editor preferences such as display settings, colours, and custom keyboard shortcuts. You can take a look at <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/.vimrc">my <code>.vimrc</code> on GitHub</a>.</p>
<p>Other dotfiles may be useful depending on the programs you use, such as <code>.gitconfig</code> or <code>.tmux.conf</code>. Exploring dotfiles on GitHub is a great way to get a sense of what&rsquo;s available and useful to you!</p>
<h2 id="linking-dotfiles">Linking dotfiles</h2>
<p>We can use a script to create symbolic links, or <a href="https://en.wikipedia.org/wiki/Symbolic_link#POSIX_and_Unix-like_operating_systems">symlinks</a> for all our dotfiles. This allows us to keep all the files in a central repository, where they can easily be managed, while also providing a sort of placeholder in the spot that our programs expect the configuration file to be found. This is typically, but not always, the user home directory. For example, since I store my dotfiles on GitHub, I keep them in a directory with a path like <code>~/github/dotfiles/</code> while the files themselves are symlinked, resulting in a path like <code>~/.vimrc</code>.</p>
<p>To programmatically check for and handle any existing files and symlinks, then create new ones, we can use <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/scripts/symlink.sh">this elegant shell script</a>. I compliment it only because I blatantly stole the core of it from <a href="https://github.com/tomnomnom/dotfiles/blob/master/setup.sh">Tom&rsquo;s setup script</a>, so I can&rsquo;t take the credit for how lovely it is.</p>
<p>The <code>symlink.sh</code> script works by attempting to create symlinks for each dotfile in our <code>$HOME</code>. It first checks to see if a symlink already exists, or if a regular file or directory with the same name exists. In the former case, the symlink is removed and remade; in the latter, the file or directory is renamed, then the symlink is made.</p>
<h2 id="installing-software">Installing software</h2>
<p>One of the beautiful things about exploring shell scripts is discovering how much can be achieved using only the command line. As someone whose first exposure to computers was through a graphical operating system, I find working in the terminal to be refreshingly fast.</p>
<p>With Ubuntu, most programs we likely require are available through the default Ubuntu software repositories. We typically search for these with the command <code>apt search &lt;program&gt;</code> and install them with <code>sudo apt install &lt;program&gt;</code>. Some software we&rsquo;d like may not be in the default repositories, or may not be offered there in the most current version. In these cases, we can still install these programs in Ubuntu using a <a href="https://en.wikipedia.org/wiki/Ubuntu#Package_Archives">PPA, or Personal Package Archive</a>. We&rsquo;ll just have to be careful that the PPAs we choose are from the official sources.</p>
<p>If a program we&rsquo;d like doesn&rsquo;t appear in the default repositories or doesn&rsquo;t seem to have a PPA, we may still be able to install it via command line. A quick search for &ldquo;<program> installation command line&rdquo; should get some answers.</p>
<p>Since bash scripts are just a collection of commands that we could run individually in the terminal, creating a script to install all our desired programs is as straightforward as putting all the commands into a script file. I chose to organize my installation scripts between the default repositories, which are installed by <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/scripts/aptinstall.sh">my <code>aptinstall.sh</code> script</a>, and programs that involve external sources, handled with <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/scripts/programs.sh">my <code>programs.sh</code> script</a>.</p>
<h2 id="setting-up-the-desktop-environment">Setting up the desktop environment</h2>
<p>On the recent occasions when I&rsquo;ve gotten a fresh desktop (intentionally or otherwise) I always seem to forget how long it takes to remember, find, and then change all the desktop environment settings. Keyboard shortcuts, workspaces, sound settings, night mode&hellip; it adds up!</p>
<p>Thankfully, all these settings have to be stored somewhere in a non-graphical format, which means that if we can discover how that&rsquo;s done, we can likely find a way to easily manipulate the settings with a bash script. Lo and behold the terminal command, <code>gsettings list-recursively</code>.</p>
<p>There are a heck of a lot of settings for GNOME desktop environment. We can make the list easier to scroll through (if, like me, you&rsquo;re sometimes the type of person to say &ldquo;Just let me look at everything and figure out what I want!&rdquo;) by piping to <code>less</code>: <code>gsettings list-recursively | less</code>. Alternatively, if we have an inkling as to what we might be looking for, we can use <code>grep</code>: <code>gsettings list-recursively | grep 'keyboard'</code>.</p>
<p>We can manipulate our settings with the <code>gsettings set</code> command. It can sometimes be difficult to find the syntax for the setting we want, so when we&rsquo;re first building our script, I recommend using the GUI to make the changes, then finding the <code>gsettings</code> line we changed and recording its value.</p>
<p>For some inspiration, you can view <a href="https://github.com/victoriadrake/dotfiles/blob/ubuntu-19.10/scripts/desktop.sh">my <code>desktop.sh</code> settings script on GitHub</a>.</p>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>Having modular scripts (one for symlinks, two for installing programs, another for desktop settings) is useful for both keeping things organized and for being able to run some but not all of the automated set up. For instance, if I were to set up a VPS in which I only use the command line, I wouldn&rsquo;t need to bother with installing graphical programs or desktop settings.</p>
<p>In cases where I do want to run all the scripts, however, doing so one-by-one is a little tedious. Thankfully, since bash scripts can themselves be run by terminal commands, we can simply write another master script to run them all!</p>
<p>Here&rsquo;s my master script to handle the set up of a new Ubuntu desktop machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>./symlink.sh
</span></span><span style="display:flex;"><span>./aptinstall.sh
</span></span><span style="display:flex;"><span>./programs.sh
</span></span><span style="display:flex;"><span>./desktop.sh
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Get all upgrades</span>
</span></span><span style="display:flex;"><span>sudo apt upgrade -y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## See our bash changes</span>
</span></span><span style="display:flex;"><span>source ~/.bashrc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Fun hello</span>
</span></span><span style="display:flex;"><span>figlet <span style="color:#e6db74">&#34;... and we&#39;re back!&#34;</span> | lolcat
</span></span></code></pre></div><p>I threw in the upgrade line for good measure. It will make sure that the programs installed on our fresh desktop have the latest updates. Now a simple, single bash command will take care of everything!</p>
<p>You may have noticed that, while our desktop now looks and runs familiarly, these scripts don&rsquo;t cover one very important area: our files. Hopefully, you have a back up method for those that involves some form of reliable external hardware. If not, and if you tend to put your work in external repository hosts like GitHub or GitLab, I do have a way to <a href="/posts/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/">automatically clone and back up your GitHub repositories with bash one-liners</a>.</p>
<p>Relying on external repository hosts doesn&rsquo;t offer 100% coverage, however. Files that you wouldn&rsquo;t put in an externally hosted repository (private or otherwise) consequently can&rsquo;t be pulled. Git ignored objects that can&rsquo;t be generated from included files, like private keys and secrets, will not be recreated. Those files, however, are likely small enough that you could fit a whole bunch on a couple encrypted USB flash drives (and if you don&rsquo;t have private key backups, maybe you ought to do that first?).</p>
<p>That said, I hope this post has given you at least some inspiration as to how dotfiles and bash scripts can help to automate setting up a fresh desktop. If you come up with some settings you find useful, please help others discover them by sharing your dotfiles, too!</p>
]]></content></entry><entry><title type="html">How to write Bash one-liners for cloning and managing GitHub and GitLab repositories</title><link href="https://victoria.dev/posts/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/"/><id>https://victoria.dev/posts/how-to-write-bash-one-liners-for-cloning-and-managing-github-and-gitlab-repositories/</id><author><name>Victoria Drake</name></author><published>2019-08-06T10:55:19-04:00</published><updated>2019-08-06T10:55:19-04:00</updated><content type="html"><![CDATA[<p>Few things are more satisfying to me than one elegant line of Bash that automates hours of tedious work. As part of some recent explorations into <a href="/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/">automatically re-creating my laptop with Bash scripts</a>, I wanted to find a way to easily clone my GitHub-hosted repositories to a new machine. After a bit of digging around, I wrote a one-liner that did just that. Then, in the spirit of not putting all our eggs in the same basket, I wrote another one-liner to automatically create and push to GitLab-hosted backups as well. Here they are.</p>
<h2 id="a-bash-one-liner-to-clone-all-your-github-repositories">A Bash one-liner to clone all your GitHub repositories</h2>
<p>Caveat: you&rsquo;ll need a list of the GitHub repositories you want to clone. The good thing about that is it gives you full agency to choose just the repositories you want on your machine, instead of going in whole-hog.</p>
<p>You can easily clone GitHub repositories without entering your password each time by using HTTPS with your <a href="https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git">15-minute cached credentials</a> or, my preferred method, by <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">connecting to GitHub with SSH</a>. For brevity I&rsquo;ll assume we&rsquo;re going with the latter, and our SSH keys are set up.</p>
<p>Given a list of GitHub URLs in the file <code>gh-repos.txt</code>, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>git@github.com:username/first-repository.git
</span></span><span style="display:flex;"><span>git@github.com:username/second-repository.git
</span></span><span style="display:flex;"><span>git@github.com:username/third-repository.git
</span></span></code></pre></div><p>We run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>xargs -n1 git clone &lt; gh-repos.txt
</span></span></code></pre></div><p>This clones all the repositories on the list into the current folder. This same one-liner works for GitLab repositories as well, if you substitute the appropriate URLs.</p>
<h3 id="whats-going-on-here">What&rsquo;s going on here</h3>
<p>There are two halves to this one-liner: the input, counterintuitively on the right side, and the part that makes stuff happen, on the left. We could make the order of these parts more intuitive (maybe?) by writing the same command like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&lt;gh-repos.txt xargs -n1 git clone
</span></span></code></pre></div><p>To run a command for each line of our input, <code>gh-repos.txt</code>, we use <code>xargs -n1</code>. The tool <code>xargs</code> reads items from input and executes any commands it finds (it will <code>echo</code> if it doesn&rsquo;t find any). By default, it assumes that items are separated by spaces; new lines also works and makes our list easier to read. The flag <code>-n1</code> tells <code>xargs</code> to use <code>1</code> argument, or in our case, one line, per command. We build our command with <code>git clone</code>, which <code>xargs</code> then executes for each line. Ta-da.</p>
<h2 id="a-bash-one-liner-to-create-and-push-many-repositories-on-gitlab">A Bash one-liner to create and push many repositories on GitLab</h2>
<p>GitLab, unlike GitHub, lets us do this nifty thing where we don&rsquo;t have to use the website to make a new repository first. We can <a href="https://docs.gitlab.com/ee/user/project/working_with_projects.html#create-a-new-project-with-git-push">create a new GitLab repository from our terminal</a>. The newly created repository defaults to being set as Private, so if we want to make it Public on GitLab, we&rsquo;ll have to do that manually later.</p>
<p>The GitLab docs tell us to push to create a new project using <code>git push --set-upstream</code>, but I don&rsquo;t find this to be very convenient for using GitLab as a backup. As I work with my repositories in the future, I&rsquo;d like to run one command that pushes to both GitHub <em>and</em> GitLab without additional effort on my part.</p>
<p>To make this Bash one-liner work, we&rsquo;ll also need a list of repository URLs for GitLab (ones that don&rsquo;t exist yet). We can easily do this by copying our GitHub repository list, opening it up with Vim, and doing a <a href="https://vim.fandom.com/wiki/Search_and_replace">search-and-replace</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cp gh-repos.txt gl-repos.txt
</span></span><span style="display:flex;"><span>vim gl-repos.txt
</span></span><span style="display:flex;"><span>:%s/<span style="color:#ae81ff">\&lt;</span>github<span style="color:#ae81ff">\&gt;</span>/gitlab/g
</span></span><span style="display:flex;"><span>:wq
</span></span></code></pre></div><p>This produces <code>gl-repos.txt</code>, which looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>git@gitlab.com:username/first-repository.git
</span></span><span style="display:flex;"><span>git@gitlab.com:username/second-repository.git
</span></span><span style="display:flex;"><span>git@gitlab.com:username/third-repository.git
</span></span></code></pre></div><p>We can create these repositories on GitLab, add the URLs as remotes, and push our code to the new repositories by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk -F<span style="color:#e6db74">&#39;\/|(\.git)&#39;</span> <span style="color:#e6db74">&#39;{system(&#34;cd ~/FULL/PATH/&#34; $2 &#34; &amp;&amp; git remote set-url origin --add &#34; $0 &#34; &amp;&amp; git push&#34;)}&#39;</span> gl-repos.txt
</span></span></code></pre></div><p>Hang tight and I&rsquo;ll explain it; for now, take note that <code>~/FULL/PATH/</code> should be the full path to the directory containing our GitHub repositories.</p>
<p>We do have to make note of a couple assumptions:</p>
<ol>
<li>The name of the directory on your local machine that contains the repository is the same as the name of the repository in the URL (this will be the case if it was cloned with the one-liner above);</li>
<li>Each repository is currently checked out to the branch you want pushed, ie. <code>master</code>.</li>
</ol>
<p>The one-liner could be expanded to handle these assumptions, but it is the humble opinion of the author that at that point, we really ought to be writing a Bash script.</p>
<h3 id="whats-going-on-here-1">What&rsquo;s going on here</h3>
<p>Our Bash one-liner uses each line (or URL) in the <code>gl-repos.txt</code> file as input. With <code>awk</code>, it splits off the name of the directory containing the repository on our local machine, and uses these pieces of information to build our larger command. If we were to <code>print</code> the output of <code>awk</code>, we&rsquo;d see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~/FULL/PATH/first-repository <span style="color:#f92672">&amp;&amp;</span> git remote set-url origin --add git@gitlab.com:username/first-repository.git <span style="color:#f92672">&amp;&amp;</span> git push
</span></span><span style="display:flex;"><span>cd ~/FULL/PATH/second-repository <span style="color:#f92672">&amp;&amp;</span> git remote set-url origin --add git@gitlab.com:username/second-repository.git <span style="color:#f92672">&amp;&amp;</span> git push
</span></span><span style="display:flex;"><span>cd ~/FULL/PATH/third-repository <span style="color:#f92672">&amp;&amp;</span> git remote set-url origin --add git@gitlab.com:username/third-repository.git <span style="color:#f92672">&amp;&amp;</span> git push
</span></span></code></pre></div><p>Let&rsquo;s look at how we build this command.</p>
<h4 id="splitting-strings-with-awk">Splitting strings with <code>awk</code></h4>
<p>The tool <code>awk</code> can split input based on <a href="https://www.gnu.org/software/gawk/manual/html_node/Command-Line-Field-Separator.html">field separators</a>. The default separator is a whitespace character, but we can change this by passing the <code>-F</code> flag. Besides single characters, we can also use a <a href="https://www.gnu.org/software/gawk/manual/html_node/Regexp-Field-Splitting.html#Regexp-Field-Splitting">regular expression field separator</a>. Since our repository URLs have a set format, we can grab the repository names by asking for the substring between the slash character <code>/</code> and the end of the URL, <code>.git</code>.</p>
<p>One way to accomplish this is with our regex <code>\/|(\.git)</code>:</p>
<ul>
<li><code>\/</code> is an escaped <code>/</code> character;</li>
<li><code>|</code> means &ldquo;or&rdquo;, telling awk to match either expression;</li>
<li><code>(\.git)</code> is the capture group at the end of our URL that matches &ldquo;.git&rdquo;, with an escaped <code>.</code> character. This is a bit of a cheat, as &ldquo;.git&rdquo; isn&rsquo;t strictly splitting anything (there&rsquo;s nothing on the other side) but it&rsquo;s an easy way for us to take this bit off.</li>
</ul>
<p>Once we&rsquo;ve told <code>awk</code> where to split, we can grab the right substring with the <a href="https://www.gnu.org/software/gawk/manual/html_node/Fields.html#index-_0024-_0028dollar-sign_0029_002c-_0024-field-operator">field operator</a>. We refer to our fields with a <code>$</code> character, then by the field&rsquo;s column number. In our example, we want the second field, <code>$2</code>. Here&rsquo;s what all the substrings look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>1: git@gitlab.com:username
</span></span><span style="display:flex;"><span>2: first-repository
</span></span></code></pre></div><p>To use the whole string, or in our case, the whole URL, we use the field operator <code>$0</code>. To write the command, we just substitute the field operators for the repository name and URL. Running this with <code>print</code> as we&rsquo;re building it can help to make sure we&rsquo;ve got all the spaces right.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk -F<span style="color:#e6db74">&#39;\/|(\.git)&#39;</span> <span style="color:#e6db74">&#39;{print &#34;cd ~/FULL/PATH/&#34; $2 &#34; &amp;&amp; git remote set-url origin --add &#34; $0 &#34; &amp;&amp; git push&#34;}&#39;</span> gl-repos.txt
</span></span></code></pre></div><h4 id="running-the-command">Running the command</h4>
<p>We build our command inside the parenthesis of <code>system()</code>. By using this as the output of <code>awk</code>, each command will run as soon as it is built and output. The <code>system()</code> function creates a <a href="https://en.wikipedia.org/wiki/Child_process">child process</a> that executes our command, then returns once the command is completed. In plain English, this lets us perform the Git commands on each repository, one-by-one, without breaking from our main process in which <code>awk</code> is doing things with our input file. Here&rsquo;s our final command again, all put together.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk -F<span style="color:#e6db74">&#39;\/|(\.git)&#39;</span> <span style="color:#e6db74">&#39;{system(&#34;cd ~/FULL/PATH/&#34; $2 &#34; &amp;&amp; git remote set-url origin --add &#34; $0 &#34; &amp;&amp; git push&#34;)}&#39;</span> gl-repos.txt
</span></span></code></pre></div><h4 id="using-our-backups">Using our backups</h4>
<p>By adding the GitLab URLs as remotes, we&rsquo;ve simplified the process of pushing to both externally hosted repositories. If we run <code>git remote -v</code> in one of our repository directories, we&rsquo;ll see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>origin  git@github.com:username/first-repository.git <span style="color:#f92672">(</span>fetch<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>origin  git@github.com:username/first-repository.git <span style="color:#f92672">(</span>push<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>origin  git@gitlab.com:username/first-repository.git <span style="color:#f92672">(</span>push<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Now, simply running <code>git push</code> without arguments will push the current branch to both remote repositories.</p>
<p>We should also note that <code>git pull</code> will generally only try to pull from the remote repository you originally cloned from (the URL marked <code>(fetch)</code> in our example above). Pulling from multiple Git repositories at the same time is possible, but complicated, and beyond the scope of this post. Here&rsquo;s an <a href="https://astrofloyd.wordpress.com/2015/05/05/git-pushing-to-and-pulling-from-multiple-remote-locations-remote-url-and-pushurl/">explanation of pushing and pulling to multiple remotes</a> to help get you started, if you&rsquo;re curious. The <a href="https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes">Git documentation on remotes</a> may also be helpful.</p>
<h2 id="to-elaborate-on-the-succinctness-of-bash-one-liners">To elaborate on the succinctness of Bash one-liners</h2>
<p>Bash one-liners, when understood, can be fun and handy shortcuts. At the very least, being aware of tools like <code>xargs</code> and <code>awk</code> can help to automate and alleviate a lot of tediousness in our work. However, there are some downsides.</p>
<p>In terms of an easy-to-understand, maintainable, and approachable tool, Bash one-liners suck. They&rsquo;re usually more complicated to write than a Bash script using <code>if</code> or <code>while</code> loops, and certainly more complicated to read. It&rsquo;s likely that when we write them, we&rsquo;ll miss a single quote or closing parenthesis somewhere; and as I hope this post demonstrates, they can take quite a bit of explaining, too. So why use them?</p>
<p>Imagine reading a recipe for baking a cake, step by step. You understand the methods and ingredients, and gather your supplies. Then, as you think about it, you begin to realize that if you just throw all the ingredients at the oven in precisely the right order, a cake will instantly materialize. You try it, and it works!</p>
<p>That would be pretty satisfying, wouldn&rsquo;t it?</p>
]]></content></entry><entry><title type="html">A quick guide to changing your GitHub username</title><link href="https://victoria.dev/posts/a-quick-guide-to-changing-your-github-username/"/><id>https://victoria.dev/posts/a-quick-guide-to-changing-your-github-username/</id><author><name>Victoria Drake</name></author><published>2019-07-28T15:19:13-04:00</published><updated>2019-07-28T15:19:13-04:00</updated><content type="html"><![CDATA[<p>This being the 2,38947234th and probably last time I&rsquo;ll change my username, (marriage is permanent, right?) I thought I&rsquo;d better write a quick post on how this transition can be achieved as smoothly as possible. You can read <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-user-account-settings/changing-your-github-username">official instructions on how to change your GitHub username</a> here, and they will tell you how to do it and what happens. The following is a quick guide to some things to consider <em>afterwards.</em></p>
<h2 id="where-to-make-changes">Where to make changes</h2>
<ol>
<li>Change username in <a href="https://github.com/settings/admin">GitHub account settings.</a></li>
<li>If using GitHub Pages, change name of your &ldquo;username.github.io&rdquo; repository.</li>
<li>If using other services that point to your &ldquo;username.github.io&rdquo; repository address, update them.</li>
<li>If using Netlify, you <em>may</em> want to sign in and reconnect your repositories. (Mine still worked, but due to a possibly unrelated issue, I&rsquo;m not positive.)</li>
<li>Sign in to Travis CI and other integrations (find them in your repository Settings tab -&gt; Integrations &amp; services). This will update your username there.</li>
<li>Update your local files and repository links with <em>very carefully executed</em> <code>find</code> and <code>sed</code> commands, and push back changes to GitHub.</li>
<li>Redeploy any websites you may have with your updated GitHub link.</li>
<li>Fix any links around the web to your profile, your repositories, or Gists you may have shared.</li>
</ol>
<h2 id="local-file-updates">Local file updates</h2>
<p>Here are some suggestions for strings to search and replace your username in.</p>
<ul>
<li><code>github.com/username</code> (References to your GitHub page in READMEs or in website copy)</li>
<li><code>username.github.io</code> (Links to your GitHub Page)</li>
<li><code>git@github.com:username</code> (Git config remote ssh urls)</li>
<li><code>travis-ci.com/username</code> (Travis badges in READMEs)</li>
<li><code>shields.io/github/.../username</code> (Shields badges in READMEs, types include <code>contributors</code>, <code>stars</code>, <code>tags</code>, and more)</li>
</ul>
<p>You can quickly identify where the above strings are located using this command for each string:</p>
<p><code>grep -rnw -e 'foobar'</code></p>
<p>This will recursively (<code>r</code>) search all files for strings matching the whole (<code>w</code>) pattern (<code>e</code>) provided and prefix results with the line numbers (<code>n</code>) so you can easily find them.</p>
<p>Using <code>find</code> and <code>sed</code> can make these changes much faster. See <a href="/posts/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/">this article on search and replace</a>.</p>
<p>Enjoy your new handle! (I hope it sticks.)</p>
]]></content></entry><entry><title type="html">Git commit practices your future self will thank you for</title><link href="https://victoria.dev/posts/git-commit-practices-your-future-self-will-thank-you-for/"/><id>https://victoria.dev/posts/git-commit-practices-your-future-self-will-thank-you-for/</id><author><name>Victoria Drake</name></author><published>2018-08-06T08:54:56-04:00</published><updated>2018-08-06T08:54:56-04:00</updated><content type="html"><![CDATA[<p>A history of clean commits can be evidence of a lot of things: attention to detail, good work ethic, and genuine investment in the project. What do your Git commits say about you?</p>
<p>Here&rsquo;s how you can create and maintain a clean and orderly Git commit history using <a href="#write-great-git-commit-messages-with-a-template">message templates</a>, <a href="#one-change-per-commit-how-to-squash-git-commits">learning how to squash commits</a>, <a href="#git-stash">using git stash</a>, and <a href="#tag-release-versions-using-annotated-git-tags">creating annotated commit tags</a>.</p>
<h2 id="what-it-means-to-commit-responsibly">What it means to commit responsibly</h2>
<p>Whether our code will be seen by the entire open source community or just future versions of ourselves, either one will be grateful if we commit responsibly today. Being responsible can mean a lot of things to different people, so I enlisted some of <code>mastodon.technology</code> (instance shut down since) and <a href="https://dev.to/victoria/what-does-it-mean-to-commit-responsibly-22mi">dev.to</a> to help round out my list. From those (really great) threads, I distilled these main points:</p>
<blockquote>
<p><strong>Committing responsibly</strong></p>
<ol>
<li>Provide and/or use tests to avoid committing bugs or broken builds</li>
<li>Write clean code that meets style specifications</li>
<li>Use descriptive commit messages that reference related discussion</li>
<li>Make only one change per commit and avoid including unrelated changes</li>
</ol></blockquote>
<p>Some of the above is achieved through maintaining a short feedback loop that helps you improve your code quality while staying accountable to yourself. <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/">I wrote another article</a> that discusses this in detail, especially the part about <a href="/blog/how-to-set-up-a-short-feedback-loop-as-a-solo-coder/#block-out-time-for-code-review">code review</a>. Other items on this list have to do specifically with making commits in Git. There are some features of Git that can benefit us in these areas, as can harnessing tools like Vim. I&rsquo;ll cover those topics here.</p>
<p>If the majority of your Git commits so far have been created with something like <code>git commit -m &quot;Bug fixes&quot;</code> then this is the article for you!</p>
<h2 id="write-great-git-commit-messages-with-a-template">Write great Git commit messages with a template</h2>
<p>I think <a href="https://github.com/torvalds/subsurface-for-dirk/commit/b6590150d68df528efd40c889ba6eea476b39873">Linus</a> would be very happy if we didn&rsquo;t use <code>git commit -m &quot;Fix bug&quot;</code> in a public repository ever again. As very well put in <a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">this classic post</a> and <a href="https://chris.beams.io/posts/git-commit/">the seven rules of a great Git commit message</a>:</p>
<blockquote>
<p>A properly formed Git commit subject line should always be able to complete the following sentence:</p>
<p>If applied, this commit will <em>your subject line here</em></p></blockquote>
<p><a href="http://who-t.blogspot.com/2009/12/on-commit-messages.html">This other classic post</a> also discusses three questions that the body of the commit message should answer:</p>
<blockquote>
<p>Why is it necessary?
How does it address the issue?
What effects does the patch have?</p></blockquote>
<p>This can be a lot to remember to cover, but there&rsquo;s a slick way to have these prompts at hand right when you need it. You can set up a commit message template by using the <code>commit.template</code> <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">configuration value</a>.</p>
<p>To set it, configure Git to use a template file (for example, <code>.gitmessage</code> in your home directory), then create the template file with Vim:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git config --global commit.template ~/.gitmessage
</span></span><span style="display:flex;"><span>vim ~/.gitmessage
</span></span></code></pre></div><p>When we run <code>git commit</code> without the <code>-m</code> message flag, the editor will open with our helpful template ready to go. Here&rsquo;s my commit message template:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>## If applied, this commit will...
</span></span><span style="display:flex;"><span>## [Add/Fix/Remove/Update/Refactor/Document] [issue #id] [summary]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>## Why is it necessary? (Bug fix, feature, improvements?)
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>## How does the change address the issue?
</span></span><span style="display:flex;"><span>-
</span></span><span style="display:flex;"><span>## What side effects does this change have?
</span></span><span style="display:flex;"><span>-
</span></span></code></pre></div><p>I&rsquo;m a fan of this format because commented lines are not included in the final message. I can simply fill in the blank lines with text and bullet points under the prompts, and it comes out looking something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>Fix #16 missing CSS variables
</span></span><span style="display:flex;"><span>- Fix for unstyled elements
</span></span><span style="display:flex;"><span>- Add background color, height for code blocks
</span></span><span style="display:flex;"><span>- Only affects highlight class
</span></span></code></pre></div><h3 id="reference-related-discussion">Reference related discussion</h3>
<p>Issue trackers in <a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue">GitHub</a> and <a href="https://confluence.atlassian.com/bitbucket/resolve-issues-automatically-when-users-push-code-221451126.html">Bitbucket</a> both recognize the keywords <code>close</code>, <code>fix</code>, and <code>resolve</code> followed immediately by the issue or pull request number. These keywords conveniently help us close the referenced issue or pull request, and this helps maintain a clear trail of changes. <a href="https://docs.gitlab.com/ee/user/project/issues/crosslinking_issues.html">GitLab</a>, and issue trackers like <a href="https://confluence.atlassian.com/jirasoftwarecloud/referencing-issues-in-your-development-work-777002789.html">Jira</a> offer similar functionalities.</p>
<h3 id="use-helpful-vim-settings-for-git-commit-messages">Use helpful Vim settings for git commit messages</h3>
<p>By adding a few lines to our Vim configuration, we can make writing great git commit messages easy. We can add these lines to <code>~/.vimrc</code> to turn on syntax highlighting in general, and spell check and text wrapping for commit messages in particular:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vimrc" data-lang="vimrc"><span style="display:flex;"><span><span style="color:#75715e">&#34; Filetype detection, plugins, and indent rules</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">filetype</span> <span style="color:#a6e22e">plugin</span> <span style="color:#a6e22e">indent</span> <span style="color:#a6e22e">on</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Syntax highlighting</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">syntax</span> <span style="color:#a6e22e">on</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">&#34; Spell check and line wrap just for git commit messages</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">Filetype</span> <span style="color:#a6e22e">gitcommit</span> <span style="color:#a6e22e">setlocal</span> <span style="color:#a6e22e">spell</span> <span style="color:#a6e22e">textwidth</span>=<span style="color:#ae81ff">72</span>
</span></span></code></pre></div><p>If you&rsquo;re curious, you can find my full <code>~/.vimrc</code> in my <a href="https://github.com/victoriadrake/dotfiles">dotfiles</a>.</p>
<p>Other editors have settings that can help us out as well. I came across <a href="https://dev.to/shreyasminocha/how-i-do-my-git-commits-34d">these for Sublime Text 3</a> and <a href="https://github.com/Microsoft/vscode-docs/blob/master/docs/getstarted/tips-and-tricks.md#language-specific-settings">language specific settings for VS Code</a>.</p>
<h2 id="one-change-per-commit-how-to-squash-git-commits">One change per commit: how to squash Git commits</h2>
<figure><img src="/posts/git-commit-practices-your-future-self-will-thank-you-for/git-commit-squash.png"
    alt="A doodle of squash"><figcaption>
      <p>Still life Git</p>
    </figcaption>
</figure>

<p>Let&rsquo;s get one thing out of the way first: rewriting Git history just for the sake of having a pretty tree, especially with public repositories, is generally not advisable. It&rsquo;s kind of like going back in time, where changes you make to your version of the project cause it to look completely different from a version that someone else forked from a point in history that you&rsquo;ve now erased - I mean, haven&rsquo;t you seen <em>Back to the Future Part II</em>? (If you&rsquo;d rather maintain that only one <em>Back to the Future</em> movie was ever made, thus sparing your future self from having to watch the sequels, I get it.)</p>
<p>Here&rsquo;s the main point. If you&rsquo;ve pushed messy commits to a public repository, I say go right ahead and leave them be, instead of complicating things further. (We all learn from our embarrassments, especially the public ones - I&rsquo;m looking at you, past-Vicky.) If your messy commits currently only exist on your local version, great! We can tidy them up into one clean, well-described commit that we&rsquo;ll be proud to push, and no one will be the wiser.</p>
<p>There are a couple different ways to squash commits, and choosing the appropriate one depends on what we need to achieve.</p>
<p>The following examples are illustrated using <code>git log --graph</code>, with some options for brevity. We can set a handy alias to see this log format in our terminal with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git config --global alias.plog <span style="color:#e6db74">&#34;log --graph --pretty=format:&#39;%h -%d %s %n&#39; --abbrev-commit --date=relative --branches&#34;</span>
</span></span></code></pre></div><p>Then we just do <code>git plog</code> to see the pretty log.</p>
<h3 id="method-1-one-commit-to-rule-the-master-branch">Method #1: one commit to rule the master branch</h3>
<p>This is appropriate when:</p>
<ul>
<li>We&rsquo;re committing directly to master</li>
<li>We don&rsquo;t intend to open a pull request to merge a feature</li>
<li>We don&rsquo;t want to preserve history of branches or changes we haven&rsquo;t yet pushed</li>
</ul>
<p>This method takes a Git tree that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>*   3e8fd79 - (HEAD -&gt; master) Fix a thing
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>*   4f0d387 - Tweak something
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>*   0a6b8b3 - Merge branch &#39;new-article&#39;
</span></span><span style="display:flex;"><span>|\
</span></span><span style="display:flex;"><span>| * 33b5509 - (new-article) Update article again again
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>| * 1782e63 - Update article again
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>| * 3c5b6a8 - Update article
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>* | f790737 - (master) Tweak unrelated article
</span></span><span style="display:flex;"><span>|/
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 65af7e7 Add social media link
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>And makes it look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 7f9a127 - (HEAD -&gt; master) Add new article
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>Here&rsquo;s how to do it - hold on to your hoverboards, it&rsquo;s super complicated:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git reset --soft origin/master
</span></span><span style="display:flex;"><span>git commit
</span></span></code></pre></div><p>Yup that&rsquo;s all. We can delete the unwanted branch with <code>git branch -D new-article</code>.</p>
<h3 id="method-2-not-that-much">Method #2: not <em>that</em> much</h3>
<p>This is appropriate when:</p>
<ul>
<li>We want to squash the last <em>x</em> commits but not <em>all</em> commits since <code>origin/master</code></li>
<li>We want to open a pull request to merge a branch</li>
</ul>
<p>This method takes a Git tree that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 13a070f - (HEAD -&gt; new-article) Finish new article
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 78e728a - Edit article draft
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* d62603c - Add example
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 1aeb20e - Update draft
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 5a8442a - Add new article draft
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>| * 65af7e7 - (master) Add social media link
</span></span><span style="display:flex;"><span>|/
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>And makes it look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 90da69a - (HEAD -&gt; new-article) Add new article
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>| * 65af7e7 - (master) Add social media link
</span></span><span style="display:flex;"><span>|/
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>To squash the last five commits on branch <code>new-article</code> into one, we use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git reset --soft HEAD~5
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;New message for the combined commit&#34;</span>
</span></span></code></pre></div><p>Where <code>--soft</code> leaves our files untouched and staged, and <code>5</code> can be thought of as &ldquo;the number of previous commits I want to combine.&rdquo;</p>
<p>We can then do <code>git merge master</code> and create our pull request.</p>
<h3 id="method-3-getting-picky">Method #3: getting picky</h3>
<p>Say we had a really confusing afternoon and our Git tree looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* dc89918 - (HEAD -&gt; master) Add link
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 9b6780f - Update image asset
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 6379956 - Fix CSS bug
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>*   16ee1f3 - Merge master into branch
</span></span><span style="display:flex;"><span>|\
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>| * ccec365 - Update list page
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>* | 033dee7 - Fix typo
</span></span><span style="display:flex;"><span>| |
</span></span><span style="display:flex;"><span>* | 90da69a - Add new article
</span></span><span style="display:flex;"><span>|/
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>We want to retain some of this history, but clean up the commits. We also want to change the messages for some of the commits. To achieve this, we&rsquo;ll use <code>git rebase</code>.</p>
<p>This is appropriate when:</p>
<ul>
<li>We want to squash only some commits</li>
<li>We want to edit previous commit messages</li>
<li>We want to delete or reorder specific commits</li>
</ul>
<p>Git <code>rebase</code> is a powerful tool, and handy once we&rsquo;ve got the hang of it. To change all the commits since <code>origin/master</code>, we do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git rebase -i origin/master
</span></span></code></pre></div><p>Or, we can do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git rebase -i 0e3fa32
</span></span></code></pre></div><p>Where the commit hash is the last commit we want to retain as-is.</p>
<p>The <code>-i</code> option lets us run the interactive rebase tool, which launches our editor with, essentially, a script for us to modify. We&rsquo;ll see a list of our commits in reverse order to the git log, with the oldest at the top:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>pick 90da69a Add new article
</span></span><span style="display:flex;"><span>pick 033dee7 Fix typo
</span></span><span style="display:flex;"><span>pick ccec365 Update list page
</span></span><span style="display:flex;"><span>pick 6379956 Fix CSS bug
</span></span><span style="display:flex;"><span>pick 9b6780f Update image asset
</span></span><span style="display:flex;"><span>pick dc89918 Add link
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># Rebase 0e3fa32..dc89918 onto 0e3fa32 (6 commands)
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># Commands:
</span></span><span style="display:flex;"><span># p, pick = use commit
</span></span><span style="display:flex;"><span># r, reword = use commit, but edit the commit message
</span></span><span style="display:flex;"><span># e, edit = use commit, but stop for amending
</span></span><span style="display:flex;"><span># s, squash = use commit, but meld into previous commit
</span></span><span style="display:flex;"><span># f, fixup = like &#34;squash&#34;, but discard this commit&#39;s log message
</span></span><span style="display:flex;"><span># x, exec = run command (the rest of the line) using shell
</span></span><span style="display:flex;"><span># d, drop = remove commit
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># These lines can be re-ordered; they are executed from top to bottom.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># If you remove a line here THAT COMMIT WILL BE LOST.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># However, if you remove everything, the rebase will be aborted.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># Note that empty commits are commented out
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span>~
</span></span></code></pre></div><p>The comments give us a handy guide as to what we&rsquo;re able to do. For now, let&rsquo;s squash the commits with small changes into the more significant commits. In our editor, we change the script to look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>pick 90da69a Add new article
</span></span><span style="display:flex;"><span>squash 033dee7 Fix typo
</span></span><span style="display:flex;"><span>pick ccec365 Update list page
</span></span><span style="display:flex;"><span>squash 6379956 Fix CSS bug
</span></span><span style="display:flex;"><span>squash 9b6780f Update image asset
</span></span><span style="display:flex;"><span>squash dc89918 Add link
</span></span></code></pre></div><p>Once we save the changes, the interactive tool continues to run. It will execute our instructions in sequence. In this case, we see the editor again with the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span># This is a combination of 2 commits.
</span></span><span style="display:flex;"><span># This is the 1st commit message:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Add new article
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># This is the commit message #2:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Fix typo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># Please enter the commit message for your changes. Lines starting
</span></span><span style="display:flex;"><span># with &#39;#&#39; will be ignored, and an empty message aborts the commit.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># interactive rebase in progress; onto 0e3fa32
</span></span><span style="display:flex;"><span># Last commands done (2 commands done):
</span></span><span style="display:flex;"><span>#    pick 90da69a Add new article
</span></span><span style="display:flex;"><span>#    squash 033dee7 Fix typo
</span></span><span style="display:flex;"><span># Next commands to do (4 remaining commands):
</span></span><span style="display:flex;"><span>#    pick ccec365 Update list page
</span></span><span style="display:flex;"><span>#    squash 6379956 Fix CSS bug
</span></span><span style="display:flex;"><span># You are currently rebasing branch &#39;master&#39; on &#39;0e3fa32&#39;.
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span># Changes to be committed:
</span></span><span style="display:flex;"><span>#       modified:   ...
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span>~
</span></span></code></pre></div><p>Here&rsquo;s our chance to create a new commit message for this first squash, if we want to. Once we save it, the interactive tool will go on to the next instructions. Unless&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>[detached HEAD 3cbad01] Add new article
</span></span><span style="display:flex;"><span> 1 file changed, 129 insertions(+), 19 deletions(-)
</span></span><span style="display:flex;"><span>Auto-merging content/dir/file.md
</span></span><span style="display:flex;"><span>CONFLICT (content): Merge conflict in content/dir/file.md
</span></span><span style="display:flex;"><span>error: could not apply ccec365... Update list page
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Resolve all conflicts manually, mark them as resolved with
</span></span><span style="display:flex;"><span>&#34;git add/rm &lt;conflicted_files&gt;&#34;, then run &#34;git rebase --continue&#34;.
</span></span><span style="display:flex;"><span>You can instead skip this commit: run &#34;git rebase --skip&#34;.
</span></span><span style="display:flex;"><span>To abort and get back to the state before &#34;git rebase&#34;, run &#34;git rebase --abort&#34;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Could not apply ccec365... Update list page
</span></span></code></pre></div><p>Again, the tool offers some very helpful instructions. Once we fix the merge conflict, we can resume the process with <code>git rebase --continue</code>. Our interactive rebase picks up where it left off.</p>
<p>Once all the squashing is done, our Git tree looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 3564b8c - (HEAD -&gt; master) Update list page
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 3cbad01 - Add new article
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 0e3fa32 - (origin/master, origin/HEAD) Update theme
</span></span></code></pre></div><p>Phew, much better.</p>
<h2 id="git-stash">Git stash</h2>
<p>If we&rsquo;re in the middle of some work and it&rsquo;s not a good time to commit, but we need to switch branches, <a href="https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning">stashing</a> can be a good option. Stashing lets us save our unfinished work without needing to create a half-assed commit. It&rsquo;s like that pile of paper on your desk representing all the stuff you&rsquo;ve been in the middle of doing since two weeks ago. Yup, that one.</p>
<p>It&rsquo;s as easy as typing <code>git stash</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Saved working directory and index state WIP on master: 3564b8c Update list page
</span></span></code></pre></div><p>The dirty work we&rsquo;re in the midst of is safely tucked away, and our working directory is clean - just as it was after our last commit. To see what&rsquo;s in our stash stack, we do <code>git stash list</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>stash@{0}: WIP on master: 3564b8c Update list page
</span></span><span style="display:flex;"><span>stash@{1}: WIP on master: 90da69a Add new article
</span></span><span style="display:flex;"><span>stash@{2}: WIP on cleanup: 0e3fa32 Update theme
</span></span></code></pre></div><p>To restore our work in progress, we use <code>git stash apply</code>. Git will try and apply our most recent stashed work. To apply an older stash, we use <code>git stash apply stash@{1}</code> where <code>1</code> is the stash to apply. If changes since stashing our work prevent the stash from reapplying cleanly, Git will give us a merge conflict to resolve.</p>
<p>Applying a stash doesn&rsquo;t remove it from our list. To remove a stash from our stack, we do <code>git stash drop stash@{0}</code> where <code>0</code> is the one we want to remove.</p>
<p>We can also use <code>git stash pop</code> to apply the most recent stash and then immediately remove it from the stack.</p>
<h2 id="tag-release-versions-using-annotated-git-tags">Tag release versions using annotated Git tags</h2>
<p>In the spirit of having a beautiful, clean Git history, there&rsquo;s one more thing we can do to help make our commit log inspire infinite joy in its viewers. If you&rsquo;ve never heard of <code>git tag</code>, your master branch history might look like this&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 0377782 - Update theme
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* ecf8128 - Add about page (#25)
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 33e432f - Fix #23 navigation bug
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 08b853b - Create blog section
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 63d18b4 - Add theme (#12)
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 233e23f - Add main content (#6)
</span></span></code></pre></div><p>Wouldn&rsquo;t it be nice if it looked like this instead?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>* 0377782 - (tag: v2.1.0) Update theme
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* ecf8128 - Add about page (#25)
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 33e432f - Fix #23 navigation bug
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 08b853b - (tag: v2.0.0) Create blog section
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 63d18b4 - Add theme (#12)
</span></span><span style="display:flex;"><span>|
</span></span><span style="display:flex;"><span>* 233e23f - (tag: v1.1.0) Add main content (#6)
</span></span></code></pre></div><p>We can tag Git commits with anything, but tags are especially helpful for semantic versioning of releases. Sites like <a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository#creating-a-release">GitHub</a> and <a href="https://docs.gitlab.com/ee/user/project/releases/">GitLab</a> have pages for repositories that list tags, letting viewers of our project browse the release versions. This can be helpful for public projects to differentiate major releases, updates with bug fixes, or beta versions.</p>
<p>There are two types of Git tags: lightweight and annotated. For adding a version tag to commits, we use annotated Git tags.</p>
<p>The <a href="https://git-scm.com/docs/git-tag">Git tag documentation</a> explains it this way:</p>
<blockquote>
<p>Tag objects (created with -a, -s, or -u) are called &ldquo;annotated&rdquo; tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature. Whereas a &ldquo;lightweight&rdquo; tag is simply a name for an object (usually a commit object).</p>
<p>Annotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for naming objects (like git describe) will ignore lightweight tags by default.</p></blockquote>
<p>We can think of lightweight tags as bookmarks, and annotated tags as signed releases.</p>
<p>For public repositories, annotated tags allow us to:</p>
<ul>
<li>See who tagged the commit, which may differ from the commit author</li>
<li>See all the tags with <code>git describe</code></li>
<li>Avoid conflicting tag names</li>
</ul>
<p>To create an annotated Git tag and attach it to our current (last) commit, we do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git tag -a v1.2.0 -m <span style="color:#e6db74">&#34;Clever release title&#34;</span>
</span></span></code></pre></div><p>This tags the commit on our local repository. To push all annotated tags to the remote, we do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git push --follow-tags
</span></span></code></pre></div><p>We can also set our Git configuration to push our annotated tags by default:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git config --global push.followTags true
</span></span></code></pre></div><p>If we then want to skip pushing tags this time, we pass <code>--no-follow-tags</code>.</p>
<h2 id="practice-responsible-commits">Practice responsible commits</h2>
<p>A little time invested in getting familiar with these tools and practices can make your commits even more useful and well-crafted. With a little practice, these processes will become second nature. You can make it even easier by creating a personal commit checklist on paper to keep handy while you work - or if that isn&rsquo;t fun enough, <a href="/blog/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/">make it an interactive pre-commit hook.</a></p>
<p>Creating clean, useful, and responsible Git commits says a lot about you. Especially in remote work, Git commits may be a primary way that people interact with you over projects. With a little practice and effort, you can make your commit habits an even better reflection of your best work - work that is evidently created with care and pride.</p>
<p>If you enjoyed this post, there&rsquo;s a lot more where it came from! I write about computing, cybersecurity, and leading great technical teams. <a href="https://victoria.dev">Subscribe on victoria.dev</a> to see new articles first, and check out the ones below!</p>
]]></content></entry><entry><title type="html">An automatic interactive pre-commit checklist, in the style of infomercials</title><link href="https://victoria.dev/archive/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/"/><id>https://victoria.dev/archive/an-automatic-interactive-pre-commit-checklist-in-the-style-of-infomercials/</id><author><name>Victoria Drake</name></author><published>2018-07-23T09:38:09-04:00</published><updated>2018-07-23T09:38:09-04:00</updated><content type="html"><![CDATA[<p>What&rsquo;s that, you say? You&rsquo;ve become tired of regular old boring <em>paper checklists?</em> Well, my friend, today is your lucky day! You, yes, <em>you,</em> can become the proud owner of a brand-spanking-new <em>automatic interactive pre-commit hook checklist!</em> You&rsquo;re gonna love this! Your life will be so much easier! Just wait until your friends see you.</p>
<h2 id="whats-a-pre-commit-hook">What&rsquo;s a pre-commit hook</h2>
<p>Did you know that nearly <em>1 out of 5 coders</em> are too embarrassed to ask this question? Don&rsquo;t worry, it&rsquo;s perfectly normal. In the next 60 seconds we&rsquo;ll tell you all you need to know to pre-commit with confidence.</p>
<p>A <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git hook</a> is a feature of Git that triggers custom scripts at useful moments. They can be used for all kinds of reasons to help you automate your work, and best of all, you already have them! In every repository that you initialize with <code>git init</code>, you&rsquo;ll have a set of example scripts living in <code>.git/hooks</code>. They all end with <code>.sample</code> and activating them is as easy as renaming the file to remove the <code>.sample</code> part.</p>
<p>Git hooks are not copied when a repository is cloned, so you can make them as personal as you like.</p>
<p>The useful moment in particular that we&rsquo;ll talk about today is the <em>pre-commit</em>. This hook is run after you do <code>git commit</code>, and before you write a commit message. Exiting this hook with a non-zero status will abort the commit, which makes it extremely useful for last-minute quality checks. Or, a bit of fun. Why not both!</p>
<h2 id="how-do-i-get-a-pre-commit-checklist">How do I get a pre-commit checklist</h2>
<p>I only want the best for my family and my commits, and that&rsquo;s why I choose an interactive pre-commit checklist. Not only is it fun to use, it helps to keep my projects safe from unexpected off-spec mistakes!</p>
<p>It&rsquo;s so easy! I just write a bash script that can read user input, and plop it into <code>.git/hooks</code> as a file named <code>pre-commit</code>. Then I do <code>chmod +x .git/hooks/pre-commit</code> to make it executable, and I&rsquo;m done!</p>
<p>Oh look, here comes an example bash script now!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Would you like to play a game?&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Read user input, assign stdin to keyboard</span>
</span></span><span style="display:flex;"><span>exec &lt; /dev/tty
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -p <span style="color:#e6db74">&#34;Have you double checked that only relevant files were added? (Y/n) &#34;</span> yn; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $yn in
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Yy<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> break;;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Nn<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please ensure the right files were added!&#34;</span>; exit 1;;
</span></span><span style="display:flex;"><span>        * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please answer y (yes) or n (no):&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -p <span style="color:#e6db74">&#34;Has the documentation been updated? (Y/n) &#34;</span> yn; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $yn in
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Yy<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> break;;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Nn<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please add or update the docs!&#34;</span>; exit 1;;
</span></span><span style="display:flex;"><span>        * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please answer y (yes) or n (no):&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -p <span style="color:#e6db74">&#34;Do you know which issue or PR numbers to reference? (Y/n) &#34;</span> yn; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $yn in
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Yy<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> break;;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">[</span>Nn<span style="color:#f92672">]</span> <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Better go check those tracking numbers!&#34;</span>; exit 1;;
</span></span><span style="display:flex;"><span>        * <span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;Please answer y (yes) or n (no):&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exec &lt;&amp;-
</span></span></code></pre></div><h2 id="take-my-money">Take my money</h2>
<p>Don&rsquo;t delay! Take advantage <em>right now</em> of this generous <em>one-time offer!</em> An interactive pre-commit hook checklist can be yours, today, for the low, low price of&hellip; free? Wait, who wrote this script?</p>
]]></content></entry><entry><title type="html">Batch renaming images, including image resolution, with awk</title><link href="https://victoria.dev/archive/batch-renaming-images-including-image-resolution-with-awk/"/><id>https://victoria.dev/archive/batch-renaming-images-including-image-resolution-with-awk/</id><author><name>Victoria Drake</name></author><published>2017-11-20T13:59:30-05:00</published><updated>2017-11-20T13:59:30-05:00</updated><content type="html"><![CDATA[<p>The most recent item on my list of &ldquo;Geeky things I did that made me feel pretty awesome&rdquo; is an hour&rsquo;s adventure that culminated in this code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ file IMG* | awk <span style="color:#e6db74">&#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&#34;_&#34;substr($8,1, length($8)-1)}&#39;</span> | <span style="color:#66d9ef">while</span> read fn fr; <span style="color:#66d9ef">do</span> echo <span style="color:#66d9ef">$(</span>rename -v <span style="color:#e6db74">&#34;s/</span>$fn<span style="color:#e6db74">/img_</span>$fr<span style="color:#e6db74">/g&#34;</span> *<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>IMG_20170808_172653_425.jpg renamed as img_0_4032x3024.jpg
</span></span><span style="display:flex;"><span>IMG_20170808_173020_267.jpg renamed as img_1_3024x3506.jpg
</span></span><span style="display:flex;"><span>IMG_20170808_173130_616.jpg renamed as img_2_3024x3779.jpg
</span></span><span style="display:flex;"><span>IMG_20170808_173221_425.jpg renamed as img_3_3024x3780.jpg
</span></span><span style="display:flex;"><span>IMG_20170808_173417_059.jpg renamed as img_4_2956x2980.jpg
</span></span><span style="display:flex;"><span>IMG_20170808_173450_971.jpg renamed as img_5_3024x3024.jpg
</span></span><span style="display:flex;"><span>IMG_20170808_173536_034.jpg renamed as img_6_4032x3024.jpg
</span></span><span style="display:flex;"><span>IMG_20170808_173602_732.jpg renamed as img_7_1617x1617.jpg
</span></span><span style="display:flex;"><span>IMG_20170808_173645_339.jpg renamed as img_8_3024x3780.jpg
</span></span><span style="display:flex;"><span>IMG_20170909_170146_585.jpg renamed as img_9_3036x3036.jpg
</span></span><span style="display:flex;"><span>IMG_20170911_211522_543.jpg renamed as img_10_3036x3036.jpg
</span></span><span style="display:flex;"><span>IMG_20170913_071608_288.jpg renamed as img_11_2760x2760.jpg
</span></span><span style="display:flex;"><span>IMG_20170913_073205_522.jpg renamed as img_12_2738x2738.jpg
</span></span><span style="display:flex;"><span>// ... etc etc
</span></span></code></pre></div><p>The last item on the aforementioned list is &ldquo;TODO: come up with a shorter title for this list.&rdquo;</p>
<p>I previously wrote about the power of command line tools like <a href="/posts/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/">sed</a>. This post expands on how to string all this magical functionality into one big, long, rainbow-coloured, viscous stream of awesome.</p>
<h2 id="rename-files">Rename files</h2>
<p>The tool that actually handles the renaming of our files is, appropriately enough, <code>rename</code>. The syntax is: <code>rename -n &quot;s/original_filename/new_filename/g&quot; *</code> where <code>-n</code> does a dry-run, and substituting <code>-v</code> would rename the files. The <code>s</code> indicates our substitution string, and <code>g</code> for &ldquo;global&rdquo; finds all occurrences of the string. The <code>*</code> matches zero or more occurrences of our search-and-replace parameters.</p>
<p>We&rsquo;ll come back to this later.</p>
<h2 id="get-file-information">Get file information</h2>
<p>When I run <code>$ file IMG_20170808_172653_425.jpg</code> in the image directory, I get this output:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>IMG_20170808_172653_425.jpg: JPEG image data, baseline, precision 8, 4032x3024, frames <span style="color:#ae81ff">3</span>
</span></span></code></pre></div><p>Since we can get the image resolution (&ldquo;4032x3024&rdquo; above), we know that we&rsquo;ll be able to use it in our new filename.</p>
<h2 id="isolate-the-information-we-want">Isolate the information we want</h2>
<p>I love <code>awk</code> for its simplicity. It takes lines of text and makes individual bits of information available to us with built in variables that we can then refer to as column numbers denoted by <code>$1</code>, <code>$2</code>, etc. By default, <code>awk</code> splits up columns on whitespace. To take the example above:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>|              1               |   2  |   3   |   4   |     5     |     6     | 7  |      8     |   9    | 10 |
</span></span><span style="display:flex;"><span>-------------------------------------------------------------------------------------------------------------
</span></span><span style="display:flex;"><span>| IMG_20170808_172653_425.jpg: | JPEG | image | data, | baseline, | precision | 8, | 4032x3024, | frames | 3  |
</span></span></code></pre></div><p>We can denote different values to use as a splitter with, for example, <code>-F','</code> if we wanted to use commas as the column divisions. For our current project, spaces are fine.</p>
<p>There are a couple issues we need to solve before we can plug the information into our new filenames. Column <code>$1</code> has the original filename we want, but there&rsquo;s an extra &ldquo;:&rdquo; character on the end. We don&rsquo;t need the &ldquo;.jpg&rdquo; either. Column <code>$8</code> has an extra &ldquo;,&rdquo; that we don&rsquo;t want as well. To get just to information we need, we&rsquo;ll take a substring of the column with <code>substr()</code>:</p>
<p><code>substr($1, 1, length($1)-5)</code> - This gives us the file name from the beginning of the string to the end of the string, minus 5 characters (&ldquo;length minus 5&rdquo;).
<code>substr($8,1, length($8)-1)</code> - This gives us the image size, without the extra comma (&ldquo;length minus 1&rdquo;).</p>
<h2 id="avoid-duplicate-file-names">Avoid duplicate file names</h2>
<p>To ensure that two images with the same resolutions don&rsquo;t create identical, competing file names, we&rsquo;ll append a unique incrementing number to the filename.</p>
<p><code>BEGIN{a=0}</code> - Using <code>BEGIN</code> tells <code>awk</code> to run the following code only once, at the (drumroll) beginning. Here, we&rsquo;re declaring the variable <code>a</code> to be <code>0</code>.
<code>a++</code> - Later in our code, at the appropriate spot for our file name, we call <code>a</code> and increment it.</p>
<p>When <code>awk</code> prints a string, it concatenates everything that isn&rsquo;t separated by a comma. <code>{print a b c}</code> would create &ldquo;abc&rdquo; and <code>{print a,b,c}</code> would create &ldquo;a b c&rdquo;, for example.</p>
<p>We can add additional characters to our file name, such as an underscore, by inserting it in quotations: <code>&quot;_&quot;</code>.</p>
<h2 id="string-it-all-together">String it all together</h2>
<p>To feed the output of one command into another command, we use &ldquo;pipe,&rdquo; written as <code>|</code>.</p>
<p>If we only used pipe in this instance, all our data from <code>file</code> and <code>awk</code> would get fed into <code>rename</code> all at once, making for one very, very long and probably non-compiling file name. To run the <code>rename</code> command line by line, we can use <code>while</code> and <code>read</code>. Similarly to <code>awk</code>, <code>read</code> takes input and splits it into variables we can assign and use. In our code, it takes the first bit of output from <code>awk</code> (the original file name) and assigns that the variable name <code>$fn</code>. It takes the second output (our incrementing number and the image resolution) and assigns that to <code>$fr</code>. The variable names are arbitrary; you can call them whatever you want.</p>
<p>To run our <code>rename</code> commands as if we&rsquo;d manually entered them in the terminal one by one, we can use <code>echo $(some command)</code>. Finally, <code>done</code> ends our <code>while</code> loop.</p>
<h2 id="bonus-round-rainbow-output">Bonus round: rainbow output</h2>
<p>I wasn&rsquo;t kidding with that <a href="https://github.com/tehmaze/lolcat">&ldquo;rainbow-coloured&rdquo; bit&hellip;</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>p install lolcat
</span></span></code></pre></div><p>Here&rsquo;s our full code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>le IMG* | awk <span style="color:#e6db74">&#39;BEGIN{a=0} {print substr($1, 1, length($1)-5),a++&#34;_&#34;substr($8,1, length($8)-1)}&#39;</span> | <span style="color:#66d9ef">while</span> read fn fs; <span style="color:#66d9ef">do</span> echo <span style="color:#66d9ef">$(</span>rename -v <span style="color:#e6db74">&#34;s/</span>$fn<span style="color:#e6db74">/img_</span>$fs<span style="color:#e6db74">/g&#34;</span> *<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">done</span> | lolcat
</span></span></code></pre></div><p>Enjoy!</p>
]]></content></entry><entry><title type="html">How to replace a string with sed in current and recursive subdirectories</title><link href="https://victoria.dev/posts/how-to-replace-a-string-with-sed-in-current-and-recursive-subdirectories/"/><id>https://victoria.dev/posts/how-to-replace-a-string-with-sed-in-current-and-recursive-subdirectories/</id><author><name>Victoria Drake</name></author><published>2017-05-06T20:04:53+08:00</published><updated>2020-11-22T20:04:53+08:00</updated><content type="html"><![CDATA[<p>Meet your new friend <code>sed</code>. This amazingly powerful terminal tool is here to be totally underused for things like finding and replacing strings in files.</p>
<h2 id="update-a-string-in-multiple-files-with-sed">Update a string in multiple files with <code>sed</code></h2>
<p>You&rsquo;ve got two levels of intensity to choose from:</p>
<ul>
<li><strong>Non-recursive:</strong> Just the files in my current directory.</li>
<li><strong>Recursive:</strong> This directory and all the subdirectories it contains, with <em>maximum prejudice.</em></li>
</ul>
<p>Here&rsquo;s how!</p>
<h2 id="current-directory-non-recursive">Current directory, non-recursive</h2>
<p><em>Non-recursive</em> means sed won&rsquo;t change files in any subdirectories of the current folder.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── index.html        # Change this file
</span></span><span style="display:flex;"><span>└── blog
</span></span><span style="display:flex;"><span>    ├── list.html     # Don&#39;t change
</span></span><span style="display:flex;"><span>    └── single.html   # these files
</span></span></code></pre></div><p>Run this command to search all the files in your current directory and replace a given string. For example, to replace all occurrences of &ldquo;foo&rdquo; with &ldquo;bar&rdquo;:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sed -i -- <span style="color:#e6db74">&#39;s/foo/bar/g&#39;</span> *
</span></span></code></pre></div><p>Here&rsquo;s what each component of the command does:</p>
<ul>
<li><code>-i</code> will change the original, and stands for &ldquo;in-place.&rdquo;</li>
<li><code>s</code> is for substitute, so we can find and replace.</li>
<li><code>foo</code> is the string we&rsquo;ll be taking away,</li>
<li><code>bar</code> is the string we&rsquo;ll use instead today.</li>
<li><code>g</code> as in &ldquo;global&rdquo; means &ldquo;all occurrences, please.&rdquo;</li>
<li><code>*</code> denotes all file types. (No more rhymes. What a tease.)</li>
</ul>
<p>You can limit the operation to one file type, such as <code>txt</code>, by using a matching pattern:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sed -i -- <span style="color:#e6db74">&#39;s/foo/bar/g&#39;</span> *.txt
</span></span></code></pre></div><h2 id="current-directory-and-subdirectories-recursive">Current directory and subdirectories, recursive</h2>
<p>You can supplement <code>sed</code> with <code>find</code> to expand your scope to all of the current folder&rsquo;s subdirectories. This will include any hidden files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find . -type f -exec sed -i <span style="color:#e6db74">&#39;s/foo/bar/g&#39;</span> <span style="color:#f92672">{}</span> +
</span></span></code></pre></div><p>To ignore hidden files (such as <code>.git</code>) you can pass the negation modifier <code>-not -path '*/\.*'</code>, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find . -type f -not -path <span style="color:#e6db74">&#39;*/\.*&#39;</span> -exec sed -i <span style="color:#e6db74">&#39;s/foo/bar/g&#39;</span> <span style="color:#f92672">{}</span> +
</span></span></code></pre></div><p>This will exclude any file that has the string <code>/.</code> in its path.</p>
<p>You can also limit this operation to file names that end in a certain extension, like Markdown:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find . -type f -name <span style="color:#e6db74">&#34;*.md&#34;</span> -exec sed -i <span style="color:#e6db74">&#39;s/foo/bar/g&#39;</span> <span style="color:#f92672">{}</span> +
</span></span></code></pre></div><h2 id="replacing-urls-change-the-separator">Replacing URLs: change the separator</h2>
<p>If you want to update a URL, the <code>/</code> separator in your strings will need escaping. It ends up looking like this&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find . -type f -exec sed -i <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">&#39;s/https:\/\/www.oldurl.com\/blog/https:\/\/www.newurl.com\/blog/g&#39;</span> <span style="color:#f92672">{}</span> +
</span></span></code></pre></div><p>You can avoid confusion and mistakes by changing the separator to any non-conflicting character. The character that follows the <code>s</code> will be treated as the separator. In this case, using a <code>,</code> or <code>_</code> would do. This doesn&rsquo;t require escaping and is much more readable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>find . -type f -exec sed -i <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">&#39;s_https://www.oldurl.com/blog_https://www.newurl.com/blog_g&#39;</span> <span style="color:#f92672">{}</span> +
</span></span></code></pre></div><p>I write about time-saving terminal tricks and how to improve productivity as a software developer. You can get these tips right in your inbox by signing up below!</p>
<div class="form-container centered" id="subscribe">
<iframe src="https://victoriadrake.substack.com/embed" width="100%" height="320" style="border:none;border-radius:10px;margin:0 auto;background:transparent !important;" frameborder="0" scrolling="no"></iframe>
</div>
]]></content></entry><entry><title type="html">How I created custom desktop notifications using terminal and cron</title><link href="https://victoria.dev/archive/how-i-created-custom-desktop-notifications-using-terminal-and-cron/"/><id>https://victoria.dev/archive/how-i-created-custom-desktop-notifications-using-terminal-and-cron/</id><author><name>Victoria Drake</name></author><published>2017-02-21T10:48:38+07:00</published><updated>2017-02-21T10:48:38+07:00</updated><content type="html"><![CDATA[<p>In my last post I talked about moving from Windows 10 to running i3 on Linux, built up from Debian Base System. Among other things, this change has taught me about the benefits of using basic tools and running a minimal, lightweight system. You can achieve a lot of functionality with just command line tools and simple utilities. One example I&rsquo;d like to illustrate in this post is setting up desktop notifications.</p>
<p>I use <a href="https://dunst-project.org/">dunst</a> for desktop notifications. It&rsquo;s a simple, lightweight tool that is easy to configure, doesn&rsquo;t have many dependencies, and can be used across various distributions.</p>
<h2 id="battery-statuslow-battery-notification">Battery status/low battery notification</h2>
<p>I was looking for a simple, versatile set up to create notifications for my battery status without having to rely on separate, standalone GUI apps or services. In my search I came across a simple one-line cron task that seemed to be the perfect fit. I adapted it to my purpose and it looks like this:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># m h  dom mon dow   command
*/5 * * * * acpi --battery | awk -F, &#39;/Discharging/ { if (int($2) &lt; 20) print }&#39; | xargs -ri env DISPLAY=:0 notify-send -u critical -i &#34;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&#34; -t 3000 &#34;{}\nBattery low!&#34;
</code></pre><blockquote>
<p><em>Psst&hellip; <a href="https://crontab.guru/">here&rsquo;s a great tool</a> for formatting your crontab times.</em></p></blockquote>
<p>There&rsquo;s a lot going on here, so let&rsquo;s break it down:
<code>*/5 * * * *</code>
Every five minutes, do the following.</p>
<p><code>acpi --battery</code>
Execute <code>acpi</code> and show battery information, which on its own returns something akin to:
<code>Battery 0: Discharging, 65%, 03:01:27 remaining</code></p>
<p>Pretty straightforward so far. At any point you could input <code>acpi --battery</code> in a terminal and receive the status output. Today&rsquo;s post, however, is about receiving this information passively in a desktop notification. So, moving on:</p>
<p><code>| awk -F, '/Discharging/ { if (int($2) &lt; 20) print }'</code>
Pipe (<code>|</code>) the result of the previous command to <code>awk</code>. (If you don&rsquo;t know what pipe does, here&rsquo;s <a href="http://superuser.com/questions/756158/what-does-the-linux-pipe-symbol-do">an answer from superuser.com</a> that explains it pretty well, I think.) <code>awk</code> can do a lot of things, but in this case, we&rsquo;re using it to examine the status of our battery. Let&rsquo;s zoom in on the <code>awk</code> command:</p>
<p><code>awk -F, '/Discharging/ { if (int($2) &lt; 20) print }'</code>
Basically, we&rsquo;re saying, &ldquo;Hey, awk, look at that input you just got and try to find the word &ldquo;discharging,&rdquo; then look to see if the number after the first comma is less than 20. If so, print the whole input.&rdquo;</p>
<p><code>| xargs -ri</code>
Pipe the result of the previous command to <code>xargs</code>, which takes it as its input and does more stuff with it. <code>-ri</code> is equivalent to <code>-r</code> (run the next command only if it receives arguments) and <code>-i</code> (look for &ldquo;{}&rdquo; and replace it with the input). So in this example, xargs serves as our gatekeeper and messenger for the next command.</p>
<p><code>env DISPLAY=:0</code>
Run the following utility in the specified display, in this case, the first display of the local machine.</p>
<p><code>notify-send -u critical -i &quot;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&quot; -t 3000 &quot;{}\nLow battery!&quot;</code>
Shows a desktop notification with <code>-u critical</code> (critical urgency), <code>-i</code> (the specified icon), <code>-t 3000</code> (display time/expires after 3000 milliseconds), and finally <code>{}</code> (the output of awk, replaced by xargs).</p>
<p>Not bad for a one-liner! I made a few modifications for different states of my battery. Here they all are in my crontab:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf"># m h  dom mon dow   command
*/5 * * * * acpi --battery | awk -F, &#39;/Discharging/ { if ( (int($2) &lt; 30) &amp;&amp; (int($2) &gt; 15) ) print }&#39; | xargs -ri env DISPLAY=:0 notify-send -a &#34;Battery status&#34; -u normal -i &#34;/usr/share/icons/Paper/16x16/status/xfce-battery-low.png&#34; -t 3000 &#34;{}\nBattery low!&#34;
*/5 * * * * acpi --battery | awk -F, &#39;/Discharging/ { if (int($2) &lt; 15) print }&#39; | xargs -ri env DISPLAY=:0 notify-send -a &#34;Battery status&#34; -u critical -i &#34;/usr/share/icons/Paper/16x16/status/xfce-battery-critical.png&#34; -t 3000 &#34;{}\nSeriously, plug me in.&#34;
*/60 * * * * acpi --battery | awk -F, &#39;/Discharging/ { if (int($2) &gt; 30) print }&#39; | xargs -ri env DISPLAY=:0 notify-send -a &#34;Battery status&#34; -u normal -i &#34;/usr/share/icons/Paper/16x16/status/xfce-battery-ok.png&#34; &#34;{}&#34;
*/60 * * * * acpi --battery | awk -F, &#39;/Charging/ { print }&#39; | xargs -ri env DISPLAY=:0 notify-send -a &#34;Battery status&#34; -u normal -i &#34;/usr/share/icons/Paper/16x16/status/xfce-battery-ok-charging.png&#34; &#34;{}&#34;
*/60 * * * * acpi --battery | awk -F, &#39;/Charging/ { if (int($2) == 100) print }&#39; | xargs -ri env DISPLAY=:0 notify-send -a &#34;Battery status&#34; -u normal -i &#34;/usr/share/icons/Paper/16x16/status/xfce-battery-full-charging.png&#34; &#34;Fully charged.&#34;
</code></pre><p>By the way, you can open your crontab in the editor of your choice by accessing it as root from the <code>/var/spool/cron/crontabs/</code> directory. It&rsquo;s generally best practice however to make changes to your crontab with the command <code>crontab -e</code>.</p>
<p>You can see that each notification makes use of the <code>{}</code> placeholder that tells xargs to put its input there - except for the last one. This is interesting because in this case, we&rsquo;re only using <code>xargs -ri</code> as a kind of switch to present the notification. The actual information that was the input for xargs is not needed in the output in order to create a notification.</p>
<h2 id="additional-notifications-with-command-line-tools">Additional notifications with command line tools</h2>
<p>With cron and just a few combinations of simple command line tools, you can create interesting and useful notifications. Consider the following:</p>
<h3 id="periodically-check-your-dhcp-address">Periodically check your dhcp address</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>*/60 * * * * journalctl | awk -F: <span style="color:#e6db74">&#39;/dhcp/ &amp;&amp; /address/ { print $5 }&#39;</span> | tail -1 | xargs -ri env DISPLAY<span style="color:#f92672">=</span>:0 notify-send -a <span style="color:#e6db74">&#34;dhcp address&#34;</span> -u normal <span style="color:#e6db74">&#34;{}&#34;</span>
</span></span></code></pre></div><p>Which does the following:
<code>*/60 * * * *</code>
Every 60 minutes.</p>
<p><code>journalctl</code>
Take the contents of your system log.</p>
<p><code>| tail -1'/dhcp/ &amp;&amp; /address/ { print $5 }'</code>
Find logs containing both &ldquo;dhcp&rdquo; and &ldquo;address&rdquo; and output the 5th portion as separated by &ldquo;:&rdquo; (the time field counts).</p>
<p><code>| tail -1</code>
Take the last line of the output.</p>
<p><code>| xargs -ri env DISPLAY=:0 notify-send -a &quot;dhcp address&quot; -u normal &quot;{}&quot;</code>
Create the desktop notification including the output.</p>
<h3 id="periodically-display-the-time-and-date">Periodically display the time and date</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>*/60 * * * * timedatectl status | awk -F<span style="color:#ae81ff">\n</span> <span style="color:#e6db74">&#39;/Local time/ { print }&#39;</span> | xargs -ri env DISPLAY<span style="color:#f92672">=</span>:0 notify-send -a <span style="color:#e6db74">&#34;Current Time&#34;</span> -u normal <span style="color:#e6db74">&#34;{}&#34;</span>
</span></span></code></pre></div><h3 id="system-log-activity">System log activity</h3>
<p>You can also search your system logs (try <code>journalctl</code>) for any number of things using awk, enabling you to get periodic notifications of virtually any logged events.</p>
<h2 id="experiment">Experiment</h2>
<p>As with all things, you are only limited by your imagination! I hope this post has given you some idea about the endless possibilities of these simple utilities. Thanks for reading!</p>
]]></content></entry></feed>