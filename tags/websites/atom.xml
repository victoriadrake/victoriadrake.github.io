<feed xmlns="http://www.w3.org/2005/Atom"><title>Websites on victoria.dev</title><link href="https://victoria.dev/tags/websites/feed.xml" rel="self"/><link href="https://victoria.dev/tags/websites/"/><updated>2024-05-05T00:00:00+00:00</updated><id>https://victoria.dev/tags/websites/</id><author><name>Victoria Drake</name><email>hello@victoria.dev</email></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">Post to your static website from your iPhone</title><link href="https://victoria.dev/posts/post-to-your-static-website-from-your-iphone/"/><id>https://victoria.dev/posts/post-to-your-static-website-from-your-iphone/</id><author><name>Victoria Drake</name></author><published>2024-05-05T00:00:00+00:00</published><updated>2024-05-05T00:00:00+00:00</updated><content type="html"><![CDATA[<p>I love websites. I love static sites in particular. But I know that sometimes it&rsquo;s just not practical to write and post only from your computer. With my hands full raising a family, I do a lot more development in stops and starts from my phone these days than I thought I ever would.</p>
<p>So I brought together everything that&rsquo;s great about Hugo plus everything that&rsquo;s great about sharing your 3AM thoughts with the world from your phone, thanks to Collected Notes. I put it in a new Hugo site template with a fancy new theme I call Quint.</p>
<p>You can deploy the Quint site template with one button (this button):</p>
<p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/victoriadrake/quint-demo"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify"></a></p>
<p>The Quint template can use the Collected Notes app as a CMS and also saves your posts to the site repository, for <a href="https://victoria.dev/posts/digital-resilience-redundancy-for-websites-and-communications/">redundancy</a>. It fetches new posts each time you build, and if you&rsquo;re deploying via Netlify or GitHub Actions, you can use a webhook to deploy the site whenever you make a new post with Collected Notes.</p>
<p>To set up your own site:</p>
<ol>
<li>Deploy the Quint template to Netlify with the button above, or clone the repo if you plan to use another deployment solution.</li>
<li>Sign up for <a href="https://collectednotes.com/">Collected Notes</a> if you haven&rsquo;t already (there&rsquo;s a free plan) and download the Collected Notes app on your iPhone.</li>
<li>Update the <code>utils/fetch-posts.js</code> file to use your Collected Notes site name.</li>
<li>Allow the GitHub Action to push changes back to your repository to save your posts. Under Settings &gt; Actions &gt; General &gt; Workflow permissions, choose Read and write permissions.</li>
</ol>
<p>Netlify will trigger a new build each time you push to your site repo, or, if you have a Collected Notes Premium subscription, you can set a <a href="https://docs.netlify.com/configure-builds/build-hooks/">Netlify Build Hook</a> URL in your Collected Notes site settings to automatically redeploy the site when you make a post or update an existing post.</p>
<p>I hope this template helps out busy people like you! I&rsquo;m using this solution myself, of course, to write the <a href="https://lightlylived.com/">next chapter of my one-bag era</a> &ndash; with my phone in one hand and a coffee in the other.</p>
]]></content></entry><entry><title type="html">Digital resilience: redundancy for websites and communications</title><link href="https://victoria.dev/posts/digital-resilience-redundancy-for-websites-and-communications/"/><id>https://victoria.dev/posts/digital-resilience-redundancy-for-websites-and-communications/</id><author><name>Victoria Drake</name></author><published>2021-02-22T04:00:43-05:00</published><updated>2021-02-22T04:00:43-05:00</updated><content type="html"><![CDATA[<p>When what seems like half the planet noped out of WhatsApp after its terms of service update, applications like <a href="https://signal.org/download/">Signal</a> (which I highly recommend) saw an unprecedented increase in user traffic. Signal had so many new users sign up that it overwhelmed their existing infrastructure and lead to a 24-hour-ish outage.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Signal is experiencing technical difficulties. We are working hard to restore service as quickly as possible.</p>&mdash; Signal (@signalapp) <a href="https://twitter.com/signalapp/status/1350118809860886528?ref_src=twsrc%5Etfw">January 15, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>The small team responded impressively quickly, especially given that a <a href="https://www.businessinsider.com/whatsapp-facebook-data-signal-download-telegram-encrypted-messaging-2021-1">4,200% spike</a> in new users was utterly implausible before it occurred.</p>
<p>The downside of so many people moving onto this fantastic application is that it caused a brief outage. If you rely solely on a certain application for your communications, brief outages can be debilitating. Even when it seems implausible that your favorite chat, email, or website service could just &ndash; <em>poof</em> &ndash; vanish overnight, recent events have proved it isn&rsquo;t impossible.</p>
<p>Have a backup plan. Have several. Here&rsquo;s how you can improve your digital resiliency for things like websites, messaging, and email.</p>
<h2 id="messaging">Messaging</h2>
<p>I recommend Signal because it is open source, end-to-end encrypted, cross-platform, and offers text, voice, video, and group chat. It&rsquo;s usually very reliable; however, strange things can happen.</p>
<p>It&rsquo;s important to set up a backup plan ahead of any service outages with the people you communicate with the most. Have an agreement for a secondary method of messaging &ndash; ideally another end-to-end encrypted service. Avoid falling back on insecure communications like SMS and social media messaging. Here&rsquo;s a short list for you to explore:</p>
<ul>
<li><a href="https://signal.org/">Signal</a></li>
<li><a href="https://wire.com/">Wire</a></li>
<li><a href="https://getsession.org/">Session</a></li>
</ul>
<p>If you&rsquo;re particularly technically inclined, you can <a href="/blog/create-a-self-hosted-chat-service-with-your-own-matrix-server/">set up your own self-hosted chat service with Matrix</a>.</p>
<p>Having a go-to plan B can help bring peace of mind and ensure you&rsquo;re still able to communicate when strange things happen.</p>
<h2 id="cloud-contacts">Cloud contacts</h2>
<p>Do you know the phone numbers of your closest contacts? While memorizing them might not be practical, storing them solely online is an unnecessary risk. Most services allow you to export your contacts to vCard or CSV format.</p>
<p>I recommend keeping your contacts locally on your device whenever you can. This ensures you still know how to contact people if your cloud provider is unavailable, or if you don&rsquo;t have Internet access.</p>
<p>Full analog redundancy is also possible here. Remember that paper stuff? Write down the phone numbers of your most important contacts so you can access them if your devices run out of battery or otherwise can&rsquo;t turn on (drop your phone much?).</p>
<h2 id="local-email-synchronization">Local email synchronization</h2>
<p>If your email service exists solely online, there&rsquo;s a big email-shaped hole in your life. If you can&rsquo;t log in to your email for any reason &ndash; an outage on their end, a billing error, or your Internet is down &ndash; you&rsquo;ll have no way to access your messages for however long your exile lasts. If you think about all the things you do via email in a day, I think the appropriate reaction to not having local copies is 🤦.</p>
<p>Download an open source email client like <a href="https://www.thunderbird.net/">Thunderbird</a>. Follow <a href="https://support.mozilla.org/en-US/products/thunderbird/download-install-and-migration">instructions to install Thunderbird</a> and set it up with your existing online email service. Your online service provider may have a help document that shows you how to set up Thunderbird.</p>
<p>You can maximize your privacy by <a href="https://support.mozilla.org/kb/thunderbird-telemetry">turning off Thunderbird&rsquo;s telemetry</a>.</p>
<p>To ensure that Thunderbird downloads your email messages and stores them locally on your machine:</p>
<ol>
<li>Click the &ldquo;hamburger&rdquo; overflow menu and go to <strong>Account Settings</strong></li>
<li>Choose <strong>Synchronization &amp; Storage</strong> in the sidebar</li>
<li>Ensure that under <strong>Message Synchronizing,</strong> the checkbox for <strong>Keep messages in all folders for this account on this computer</strong> is checked.</li>
</ol>
<p>You may need to visit each of your folders in order to trigger the initial download.</p>
<p>Some other settings you may want to update:</p>
<ol>
<li>Choose <strong>Composition &amp; Addressing</strong> and uncheck the box next to <strong>Compose messages in HTML format</strong> to send plaintext emails instead.</li>
<li>Under <strong>Return Receipts</strong> choose <strong>Global Preferences.</strong> Select the radio button for <strong>Never send a return receipt.</strong></li>
</ol>
<p>You don&rsquo;t need to start using Thunderbird for all your email tasks. Just make sure you open it up regularly so that your messages sync and download to your machine.</p>
<h2 id="websites">Websites</h2>
<p>I strongly believe you should have <a href="/posts/make-your-own-independent-website/">your own independent website</a> for reasons that go beyond redundancy. To truly make your site resilient, it&rsquo;s important to have your own domain.</p>
<p>If you know that my website is at the address <code>victoria.dev</code>, for example, it doesn&rsquo;t matter whether I&rsquo;m hosting it on GitHub Pages, AWS, Wordpress, or from a server in my basement. If my hosting provider becomes unavailable, my website won&rsquo;t go down with it. Getting back up and running would be as simple as updating my DNS configuration to point to a new host.</p>
<p>Price is hardly an excuse, either. You can buy a domain for <a href="https://www.jdoqocy.com/click-100268310-14326263" target="_blank" rel="noopener noreferrer">less than a cup of coffee</a>
 with my Namecheap affiliate link (thanks!). Namecheap also handles <a href="https://www.namecheap.com/support/knowledgebase/article.aspx/767/10/how-to-change-dns-for-a-domain/">your DNS settings</a>, so it&rsquo;s a one-stop shop.</p>
<p>With your own domain, you can build resiliency for your email address as well. Learn how to set up your custom domain with your email provider. If you need to switch providers in the future, your email address ports to the new service with you. Here are a few quick links for providers I&rsquo;d recommend:</p>
<ul>
<li><a href="https://proton.me/support/custom-domain">ProtonMail: How to use a custom domain with Proton Mail</a></li>
<li><a href="https://tutanota.com/howto/#custom-domain">Tutanota: Adding of custom email domains</a></li>
<li><a href="https://www.fastmail.help/hc/en-us/articles/360058753394-Custom-Domains-with-Fastmail">Fastmail: Custom Domains with Fastmail</a></li>
</ul>
<h2 id="build-your-digital-resiliency">Build your digital resiliency</h2>
<p>I hope you&rsquo;ve found this article useful on your path to building digital resiliency. If you&rsquo;re interested in more privacy topics, you might like to learn about great <a href="/blog/outsourcing-security-with-1password-authy-and-privacy.com/">apps for outsourcing security</a>.</p>
<p>If your threat model includes anonymity or censorship, building digital resiliency is just a first step. The rest is outside the scope of my blog, but here are a few great resources I&rsquo;ve come across:</p>
<ul>
<li><a href="https://www.torproject.org/">Tor Browser</a></li>
<li><a href="https://inteltechniques.com/index.html">IntelTechniques</a></li>
<li><a href="https://cantcancel.me/">Can&rsquo;t Cancel Me</a></li>
<li><a href="https://tails.boum.org/">Tails portable OS</a></li>
</ul>
]]></content></entry><entry><title type="html">Add search to Hugo static sites with Lunr</title><link href="https://victoria.dev/posts/add-search-to-hugo-static-sites-with-lunr/"/><id>https://victoria.dev/posts/add-search-to-hugo-static-sites-with-lunr/</id><author><name>Victoria Drake</name></author><published>2021-01-26T09:25:17-05:00</published><updated>2021-01-26T09:25:17-05:00</updated><content type="html"><![CDATA[<p>Yes, you <em>can</em> have an interactive search feature on your static site! No need for servers or paid subscriptions here. Thanks to the open source <a href="https://lunrjs.com/">Lunr</a> and the power of <a href="https://gohugo.io/">Hugo static site generator</a>, you can create a client-side search index with just a template and some JavaScript.</p>
<p>A number of my readers have been kind enough to tell me that you find my blog useful, but there&rsquo;s something that you don&rsquo;t know. Up until I recently implemented a search feature on <a href="/">victoria.dev</a>, I had been my own unhappiest user.</p>
<p>My blog exists for all to read, but it&rsquo;s also my own personal Internet brain. I frequently pull up a post I&rsquo;ve written when trying to re-discover some bit of knowledge that I may have had the foresight to record. Without a search, finding it again took a few clicks and more than a few guesses. Now, all my previous discoveries are conveniently at my fingertips, ready to be rolled into even more future work.</p>
<p>If you&rsquo;d like to make your own personal Internet brain more useful, here&rsquo;s how you can implement your own search feature on your static Hugo site.</p>
<h2 id="get-lunr">Get Lunr</h2>
<p>While you can <a href="https://lunrjs.com/guides/getting_started.html">install lunr.js</a> via npm or include it from a CDN, I chose to vendorize it to minimize network impact. This means I host it from my own site files by placing the library in Hugo&rsquo;s <code>static</code> directory.</p>
<p>You can save your visitors some bandwidth by minifying <code>lunr.js</code>, which I did just by <a href="https://github.com/olivernn/lunr.js">downloading lunr.js from source</a> and using the <a href="https://github.com/olback/es6-css-minify">JS &amp; CSS Minifier Visual Studio Code extension</a> on the file. That brought the size down roughly 60% from 97.5 KB to 39.35 KB.</p>
<p>Save this as <code>static/js/lunr.min.js</code>.</p>
<h2 id="create-a-search-form-partial">Create a search form partial</h2>
<p>To easily place your search form wherever you like on your site, create the form as a partial template at <code>layouts/partials/search-form.html</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">action</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{{ with .GetPage &#34;/search&#34; }}{{.Permalink}}{{end}}&#39;</span> <span style="color:#a6e22e">method</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;get&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">hidden</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-input&#34;</span>&gt;Search site&lt;/<span style="color:#f92672">label</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search-input&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;query&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Type here to search&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;search&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">form</span>&gt;
</span></span></code></pre></div><p>Include your search form in other templates with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{{ partial &#34;search-form.html&#34; . }}
</span></span></code></pre></div><h2 id="create-a-search-page">Create a search page</h2>
<p>For your search to be useful, you&rsquo;ll need a way to trigger one. You can create a (static!) <code>/search</code> page that responds to a GET request, runs your search, and displays results.</p>
<p>Here&rsquo;s how to create a Hugo template file for a search page and get it to render.</p>
<p>Create <code>layouts/search/list.html</code> with the following minimum markup, assuming you&rsquo;re <a href="https://gohugo.io/templates/base">inheriting from a base template</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{ define &#34;main&#34; }}
</span></span><span style="display:flex;"><span>{{ partial &#34;search-form.html&#34; . }}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;results&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        Enter a keyword above to search this site.
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>{{ end }}
</span></span></code></pre></div><p>In order to get Hugo to render the template, a matching content file must be available. Create <code>content/search/_index.md</code> to satisfy this requirement. The file just needs minimal <a href="https://gohugo.io/content-management/front-matter">front matter</a> to render:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: Search me!
</span></span><span style="display:flex;"><span>---
</span></span></code></pre></div><p>You can run <code>hugo serve</code> and navigate to <code>/search</code> to see if everything builds as expected.</p>
<p>A few libraries exist to help you build a search index and implement Lunr. You can find them <a href="https://gohugo.io/tools/search/">here on the Hugo site</a>. If you want to fully understand the process, however, you&rsquo;ll find it&rsquo;s not complicated do this without additional dependencies, thanks to the power of Hugo&rsquo;s static site processing.</p>
<h2 id="build-your-search-index">Build your search index</h2>
<p>Here&rsquo;s how to build an index for Lunr to search using Hugo&rsquo;s template rendering power. Use <code>range</code> to loop over the pages you want to make searchable, and capture your desired parameters in an array of documents. One way to do this is to create <code>layouts/partials/search-index.html</code> with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>window.<span style="color:#a6e22e">store</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// You can specify your blog section only:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    {{ <span style="color:#a6e22e">range</span> <span style="color:#a6e22e">where</span> .<span style="color:#a6e22e">Site</span>.<span style="color:#a6e22e">Pages</span> <span style="color:#e6db74">&#34;Section&#34;</span> <span style="color:#e6db74">&#34;posts&#34;</span> }}
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// For all pages in your site, use &#34;range .Site.Pages&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// You can use any unique identifier here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#34;{{ .Permalink }}&#34;</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// You can customize your searchable fields using any .Page parameters
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;title&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;{{ .Title  }}&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;tags&#34;</span><span style="color:#f92672">:</span> [{{ <span style="color:#a6e22e">range</span> .<span style="color:#a6e22e">Params</span>.<span style="color:#a6e22e">Tags</span> }}<span style="color:#e6db74">&#34;{{ . }}&#34;</span>,{{ <span style="color:#a6e22e">end</span> }}],
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;content&#34;</span><span style="color:#f92672">:</span> {{ .<span style="color:#a6e22e">Content</span> <span style="color:#f92672">|</span> <span style="color:#a6e22e">plainify</span> }}, <span style="color:#75715e">// Strip out HTML tags
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;url&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;{{ .Permalink }}&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {{ <span style="color:#a6e22e">end</span> }}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- Include Lunr and code for your search function,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">which you&#39;ll write in the next section --&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/lunr.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/js/search.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><p>When Hugo renders your site, it will build your search index in much the same way as <a href="https://gohugo.io/templates/lists#what-is-a-list-page-template">a List page</a> is built, creating a document for each page with its parameters.</p>
<p>The last piece of the puzzle is the code to handle the search process: taking the search query, getting Lunr to perform the search, and displaying the results.</p>
<h2 id="perform-the-search-and-show-results">Perform the search and show results</h2>
<p>Create <code>static/js/search.js</code> to hold the JavaScript that ties it all together. This file has three main tasks: get the search query, perform the search with Lunr, and display the results.</p>
<h3 id="get-query-parameters-with-javascript">Get query parameters with JavaScript</h3>
<p>This part&rsquo;s straightforward thanks to <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">URLSearchParams</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">params</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URLSearchParams</span>(window.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">search</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">query</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;q&#39;</span>)
</span></span></code></pre></div><h3 id="search-for-the-query-with-lunr">Search for the query with Lunr</h3>
<p>Define and configure an <a href="https://lunrjs.com/guides/getting_started.html#creating-an-index">index for Lunr</a>. This tells Lunr what you&rsquo;d like to search with, and you can optionally <code>boost</code> elements that are more important.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">idx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">lunr</span>(<span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Search these fields
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">ref</span>(<span style="color:#e6db74">&#39;id&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">field</span>(<span style="color:#e6db74">&#39;title&#39;</span>, {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">boost</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">15</span>
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">field</span>(<span style="color:#e6db74">&#39;tags&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">field</span>(<span style="color:#e6db74">&#39;content&#39;</span>, {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">boost</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Add the documents from your search index to
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// provide the data to idx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">in</span> window.<span style="color:#a6e22e">store</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">add</span>({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">id</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">key</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> window.<span style="color:#a6e22e">store</span>[<span style="color:#a6e22e">key</span>].<span style="color:#a6e22e">title</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">tags</span><span style="color:#f92672">:</span> window.<span style="color:#a6e22e">store</span>[<span style="color:#a6e22e">key</span>].<span style="color:#a6e22e">category</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">content</span><span style="color:#f92672">:</span> window.<span style="color:#a6e22e">store</span>[<span style="color:#a6e22e">key</span>].<span style="color:#a6e22e">content</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>You can then execute the search and store results with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">results</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">idx</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">query</span>)
</span></span></code></pre></div><h3 id="display-results">Display results</h3>
<p>You&rsquo;ll need a function that builds a list of results and displays them on your search page. Recall the <code>id</code> you gave your <code>ul</code> element in <code>layouts/search/list.html</code> and store it as a variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">searchResults</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;results&#39;</span>)
</span></span></code></pre></div><p>If a search results in some results (🥁), you can iterate over them and build a <code>&lt;li&gt;</code> element for each one.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">results</span>.<span style="color:#a6e22e">length</span>) { <span style="color:#75715e">// Length greater than 0 is truthy
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">resultList</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">results</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// Use the unique ref from the results list to get the full item
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#75715e">// so you can build its &lt;li&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">item</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">store</span>[<span style="color:#a6e22e">results</span>[<span style="color:#a6e22e">n</span>].<span style="color:#a6e22e">ref</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">resultList</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;&lt;li&gt;&lt;p&gt;&lt;a href=&#34;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">url</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;/a&gt;&lt;/p&gt;&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// Add a short clip of the content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#a6e22e">resultList</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;&lt;p&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">content</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">150</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;...&lt;/p&gt;&lt;/li&gt;&#39;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">searchResults</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">resultList</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>For each of your results, this produces a list item similar to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;.../blog/add-search-to-hugo-with-lunr/&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        Add search to Hugo static sites with Lunr
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;Yes, you can have an interactive search feature on your static site!...&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">li</span>&gt;
</span></span></code></pre></div><p>If there are no results, ham-handedly insert a message instead.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">searchResults</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;No results found.&#39;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="full-code-for-searchjs">Full code for search.js</h3>
<p>Here&rsquo;s what <code>static/js/search.js</code> could look like in full.</p>
<details>
<summary>search.js full code</summary>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"></code></pre></div></details>
<h2 id="make-it-go">Make it go</h2>
<p>You now have Lunr, the search index, and the code that displays results. Since these are all included in <code>layouts/partials/search-index.html</code>, add this partial on all pages with a search form. In your page footer, place:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{{ partial &#34;search-index.html&#34; . }}
</span></span></code></pre></div><p>You can see what this looks like when it&rsquo;s all put together by trying it out <a href="/blog">on my blog</a>.</p>
<h2 id="make-it-go-faster">Make it go faster</h2>
<p>Since your site is static, it&rsquo;s possible to <a href="https://lunrjs.com/guides/index_prebuilding.html">pre-build your search index</a> as a JSON data file for Lunr to load. This is where those <a href="https://gohugo.io/tools/search/">aforementioned libraries</a> may be helpful, since a JSON-formatted search index would need to be built outside of running <code>hugo</code> to generate your site.</p>
<p>You can maximize your search speed by minifying assets, and minimizing computationally expensive or blocking JavaScript in your code.</p>
<h2 id="static-sites-get-search-too">Static sites get search, too!</h2>
<p>I hope this helps you make your Internet brain more useful for yourself and others, too! Don&rsquo;t worry if you haven&rsquo;t got the time to implement a search feature today &ndash; you can find this tutorial again when you visit <a href="/blog">victoria.dev</a> and search for this post! 🥁</p>
]]></content></entry><entry><title type="html">Make your own independent website</title><link href="https://victoria.dev/posts/make-your-own-independent-website/"/><id>https://victoria.dev/posts/make-your-own-independent-website/</id><author><name>Victoria Drake</name></author><published>2021-01-16T08:41:27-05:00</published><updated>2021-01-16T08:41:27-05:00</updated><content type="html"><![CDATA[<p>The web that raised me was a digital playground in the truest sense. It was made up of HTML experiments frankensteined together by people still figuring it all out.</p>
<p>The beauty of not completely knowing what you&rsquo;re doing is a lack of premature judgement. Without a standard to rise to, you&rsquo;re free to go sideways. Explore. Try things that don&rsquo;t work, without any expectation they <em>will</em> work. An open world with a beginner&rsquo;s mindset.</p>
<p>The web that raised me was a little broken. Things didn&rsquo;t always display the way they were supposed to. That too is part of the beauty. It was just broken enough to make you think for yourself.</p>
<p>1991 was the year of the individual on the web, the <a href="https://en.wikipedia.org/wiki/History_of_the_World_Wide_Web" target="_blank" rel="noopener noreferrer">first year</a>
 any layperson could open a web browser and access the new hypermedia dimension. There were no go-to, search-suggested, centralized websites. There were newsgroups. You had what you made and what your meatspace contacts sent you. In 2021, I think we need a return to that level of individualism. We need to make 2021 the year of the independent web.</p>
<p>That&rsquo;s not to say I think the massive monopolistic platforms are going anywhere. Twitter, Facebook, mainstream &ldquo;news&rdquo; media sites &ndash; they&rsquo;re all a kind of utility now, like plumbing and electricity. They&rsquo;ll find their place in regulation and history. But they are not <em>your website.</em></p>
<p>Your website is the one you create. Where the content, top-to-bottom, is yours alone to shape and present as you please. Your website is your place of self-expression, without follower counts or statistics to game. Your website is for creation, not reaction.</p>
<p>It&rsquo;s all yours, but it doesn&rsquo;t have to seem lonely. Your site can interact with the entire online world through syndication and protocols made possible by this thing we call the Internet. See:</p>
<ul>
<li><a href="https://indieweb.org/POSSE" target="_blank" rel="noopener noreferrer">IndieWeb</a>
 for POSSE, an abbreviation for Publish (on your) Own Site, Syndicate Elsewhere</li>
<li><a href="https://www.w3.org/TR/2017/REC-webmention-20170112/" target="_blank" rel="noopener noreferrer">Webmention</a>
 and <a href="https://github.com/aaronpk/webmention.io" target="_blank" rel="noopener noreferrer">an easy way to implement them</a>
</li>
<li><a href="https://github.com/buckket/twtxt" target="_blank" rel="noopener noreferrer">twtxt</a>
 instances for a decentralized timeline experience</li>
<li><a href="https://neofeed.dev/" target="_blank" rel="noopener noreferrer">Neofeed</a>
, my personal timeline project made for <a href="https://neocities.org/" target="_blank" rel="noopener noreferrer">Neocities</a>
. (It&rsquo;s open source and <a href="https://github.com/victoriadrake/neocities-neofeed" target="_blank" rel="noopener noreferrer">you can help me extend it!</a>
)</li>
</ul>
<p>Your website is your beginning point. The one source of truth for your identity online, from which you can generate and distribute disposable copies to any platform you please. This is what it means to truly own your content. And on the Internet, your content is you.</p>
<p>This is my website. When I first created it, I did so for myself. I had no expectation of visitors. I just knew I&rsquo;d rather have these thoughts and things I&rsquo;ve learned here, out here, made indelible in the folds of the public Internet, instead of on some dark corner of my machine, to be lost forever once I am.</p>
<p>Make your own website. You&rsquo;ll grow your own sense of well-deserved accomplishment and contribute to your independence on the web. You&rsquo;ll learn by doing, by scratching your own itch.</p>
<p>Learn about web technologies. Use them as you would if you were a child holding a pencil or paintbrush for the first time. Experiment, with no expectations other than discovering what you can do to make it delight you.</p>
<hr>
<p>These sites and articles inspired this post and helped me implement webmentions!</p>
<ul>
<li><a href="https://dangillmor.com/2014/04/25/indie-web-important/" target="_blank" rel="noopener noreferrer">Why the Indie Web movement is so important, Dan Gillmor</a>
</li>
<li><a href="https://www.jvt.me/" target="_blank" rel="noopener noreferrer">Jamie Tanna</a>
</li>
<li><a href="https://mxb.dev/blog/" target="_blank" rel="noopener noreferrer">Max Böck</a>
</li>
<li><a href="https://paulrobertlloyd.com/" target="_blank" rel="noopener noreferrer">Paul Robert Lloyd</a>
</li>
<li><a href="https://adhoc.systems/notes" target="_blank" rel="noopener noreferrer">Zachary Dunn</a>
</li>
<li><a href="https://anaulin.org/blog/adding-webmentions/" target="_blank" rel="noopener noreferrer">Adding Webmentions to My Static Hugo Site, Ana Ulin</a>
</li>
<li><a href="https://keithjgrant.com/posts/2019/02/adding-webmention-support-to-a-static-site/" target="_blank" rel="noopener noreferrer">Adding Webmention Support to a Static Site, Keith J Grant</a>
</li>
<li><a href="https://webmention.rocks/" target="_blank" rel="noopener noreferrer">Webmention.rocks</a>
</li>
</ul>
]]></content></entry><entry><title type="html">Responsive pages and color themes with minimal CSS</title><link href="https://victoria.dev/archive/responsive-pages-and-color-themes-with-minimal-css/"/><id>https://victoria.dev/archive/responsive-pages-and-color-themes-with-minimal-css/</id><author><name>Victoria Drake</name></author><published>2020-11-17T06:04:58-05:00</published><updated>2020-11-17T06:04:58-05:00</updated><content type="html"><![CDATA[<p>Hello, do come in! If you&rsquo;re reading this on my website, you may notice I&rsquo;ve spruced up a bit. <a href="/">Victoria.dev</a> can now better respond to your devices and preferences!</p>
<p>Most modern devices and web browsers allow users to choose either a light or dark theme for the user interface. With <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">CSS media queries</a>, you can have your own website&rsquo;s styles change to match this user setting!</p>
<p>Media queries are also a common way to have elements on web pages change to suit different screen sizes. This is an especially powerful tool when combined with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">custom properties</a> set on the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:root">root element</a>.</p>
<p>Here&rsquo;s how to use CSS media queries and custom properties to improve your visitor&rsquo;s browsing experience with just a few lines of CSS.</p>
<h2 id="catering-to-color-preferences">Catering to color preferences</h2>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"><code>prefers-color-scheme</code> media feature</a> can be queried to serve up your user&rsquo;s color scheme of choice. The <code>light</code> option is the go-to version if no active preference is set, and it has <a href="https://caniuse.com/mdn-css_at-rules_media_prefers-color-scheme">decent support across modern browsers</a>.</p>
<p>Additionally, users reading on certain devices can also set light and dark color themes based on a schedule. For example, my phone uses light colors throughout its UI during the daytime, and dark colors at night. You can make your website follow suit!</p>
<p>Avoid repeating a lot of CSS by setting custom properties for your color themes on your <code>:root</code> pseudo-class. You can specify the themes available with the <a href="https://drafts.csswg.org/css-color-adjust/#color-scheme-prop"><code>color-scheme</code> property</a> (currently part of a <a href="https://drafts.csswg.org/css-color-adjust-1/">draft specification</a>, but I like to write my articles to age well). Create a version for each theme you wish to support. Here&rsquo;s a quick example you can build on:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>:<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>    color-scheme: light dark;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">prefers-color-scheme</span><span style="color:#f92672">:</span> <span style="color:#f92672">light</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --text-primary: <span style="color:#ae81ff">#24292e</span>;
</span></span><span style="display:flex;"><span>        --background: <span style="color:#66d9ef">white</span>;
</span></span><span style="display:flex;"><span>        --shadow: rgba(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0.15</span>) <span style="color:#ae81ff">0</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">prefers-color-scheme</span><span style="color:#f92672">:</span> <span style="color:#f92672">dark</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --text-primary: <span style="color:#66d9ef">white</span>;
</span></span><span style="display:flex;"><span>        --background: <span style="color:#ae81ff">#24292e</span>;
</span></span><span style="display:flex;"><span>        --shadow: rgba(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0.35</span>) <span style="color:#ae81ff">0</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see, you can use custom properties to set all kinds of values. To use these as variables with other CSS elements, use the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/var()"><code>var()</code> function</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">header</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span><span style="color:#66d9ef">text</span><span style="color:#f92672">-</span>primary);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>background);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">box-shadow</span>: <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>shadow);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this quick example, the <code>header</code> element will now display your user&rsquo;s preferred colors according to their browser settings!</p>
<p>Preferred color schemes are set by the user in different ways, depending on the browser. Here are a couple examples.</p>
<h3 id="firefox">Firefox</h3>
<p>You can test out <code>light</code> and <code>dark</code> modes in Firefox by typing <code>about:config</code> into the address bar. Accept the warning if it pops up, then type <code>ui.systemUsesDarkTheme</code> into the search.</p>
<p>Choose a <code>Number</code> value for the setting, then input a <code>1</code> for dark or <code>0</code> for light.</p>
<p><img src="firefox-theme-setting.png" alt="A screenshot of setting the color theme in Firefox"></p>
<h3 id="brave">Brave</h3>
<p>If you&rsquo;re using Brave, find color theme settings in <strong>Settings</strong> &gt; <strong>Appearance</strong> &gt; <strong>Brave colors</strong>.</p>
<p><img src="brave-settings.png" alt="A screenshot of setting the color theme in Brave"></p>
<h2 id="variable-scaling">Variable scaling</h2>
<p>You can also use a custom property to effortlessly adjust the size of text or other elements depending on your user&rsquo;s screen size. The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/width"><code>width</code> media feature</a> tests the width of the viewport. While <code>width: _px</code> will match an exact size, you can also use <code>min</code> and <code>max</code> to create ranges.</p>
<p>Query with <code>min-width: _px</code> to match anything over <code>_</code> pixels, and <code>max-width: _px</code> to match anything up to <code>_</code> pixels.</p>
<p>Use these queries to set a custom property on the <code>:root</code> to create a ratio:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">min-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">360px</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --scale: <span style="color:#ae81ff">0.8</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">min-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">768px</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --scale: <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">min-width</span><span style="color:#f92672">:</span> <span style="color:#f92672">1024px</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    :<span style="color:#a6e22e">root</span> {
</span></span><span style="display:flex;"><span>        --scale: <span style="color:#ae81ff">1.2</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then make an element responsive by using the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc()"><code>calc()</code> function</a>. Here are a few examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">h1</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">42</span><span style="color:#66d9ef">px</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">h2</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">26</span><span style="color:#66d9ef">px</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">img</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: calc(<span style="color:#ae81ff">200</span><span style="color:#66d9ef">px</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, multiplying an initial value by your <code>--scale</code> custom property allows the size of headings and images to magically adjust to your user&rsquo;s device width.</p>
<p>The relative unit <code>rem</code> will have a similar effect. You can use it to define sizes for elements relative to the font size declared at the root element.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">h1</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">5</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">h2</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">1.5</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">p</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: calc(<span style="color:#ae81ff">1</span><span style="color:#66d9ef">rem</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Of course, you can also multiply two custom properties. For example, setting the <code>--max-img</code> as a custom property on the <code>:root</code> can help to save you time later on by not having to update a pixel value in multiple places:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">img</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>: calc(<span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>max<span style="color:#f92672">-</span>img) <span style="color:#f92672">*</span> <span style="color:#a6e22e">var</span>(<span style="color:#f92672">--</span>scale));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="raise-your-responsiveness-game">Raise your responsiveness game</h2>
<p>Try out these easy wins for a website that caters to your visitor&rsquo;s devices and preferences. I&rsquo;ve put them to good use now on <a href="/">victoria.dev</a>. I invite you to <a href="/contact">let me know how you like it!</a></p>
]]></content></entry><entry><title type="html">Build your own serverless subscriber list with Go and AWS</title><link href="https://victoria.dev/archive/build-your-own-serverless-subscriber-list-with-go-and-aws/"/><id>https://victoria.dev/archive/build-your-own-serverless-subscriber-list-with-go-and-aws/</id><author><name>Victoria Drake</name></author><published>2020-11-10T04:52:50-05:00</published><updated>2020-11-10T04:52:50-05:00</updated><content type="html"><![CDATA[<p>You can now subscribe to my email list on <a href="/">victoria.dev</a>! Here&rsquo;s how I lovingly built a subscription sign up flow with email confirmation that doesn&rsquo;t suck. You can too.</p>
<h2 id="introducing-simple-subscribe">Introducing Simple Subscribe</h2>
<p>If you&rsquo;re interested in managing your own mailing list or newsletter, you can set up Simple Subscribe on your own AWS resources to collect email addresses. This open source API is written in Go, and runs on AWS Lambda. Visitors to your site can sign up to your list, which is stored in a DynamoDB table, ready to be queried or exported at your leisure.</p>
<p>When someone signs up, they&rsquo;ll receive an email asking them to confirm their subscription. This is sometimes called &ldquo;double opt-in,&rdquo; although I prefer the term &ldquo;verified.&rdquo; Simple Subscribe works on serverless infrastructure and uses an AWS Lambda to handle subscription, confirmation, and unsubscribe requests.</p>
<p>You can find the <a href="https://github.com/victoriadrake/simple-subscribe">Simple Subscribe project, with its fully open-source code, on GitHub</a>. I encourage you to pull up the code and follow along! In this post I&rsquo;ll share each build step, the thought process behind the API&rsquo;s single-responsibility functions, and security considerations for an AWS project like this one.</p>
<h2 id="building-a-verified-subscription-flow">Building a verified subscription flow</h2>
<p>A non-verified email sign up process is straightforward. Someone puts their email into a box on your website, then that email goes into your database. However, if I&rsquo;ve taught you anything about <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">not trusting user input</a>, the very idea of a non-verified sign up process should raise your hackles. Spam may be great when fried in a sandwich, but no fun when it&rsquo;s running up your AWS bill.</p>
<p>While you can use a strategy like a CAPTCHA or puzzle for is-it-a-human verification, these can create enough friction to turn away your potential subscribers. Instead, a confirmation email can help to ensure both address correctness and user sentience.</p>
<p>To build a subscription flow with email confirmation, create single-responsibility functions that satisfy each logical step. Those are:</p>
<ol>
<li>Accept an email address and record it.</li>
<li>Generate a token associated with that email address and record it.</li>
<li>Send a confirmation email to that email address with the token.</li>
<li>Accept a verification request that has both the email address and token.</li>
</ol>
<p>To achieve each of these goals, Simple Subscribe uses the <a href="https://docs.aws.amazon.com/sdk-for-go/api/">official AWS SDK for Go</a> to interact with DynamoDB and SES.</p>
<p>At each stage, consider what the data looks like and how you store it. This can help to handle conundrums like, &ldquo;What happens if someone tries to subscribe twice?&rdquo; or even <a href="/blog/if-you-want-to-build-a-treehouse-start-at-the-bottom/">threat-modeling</a> such as, &ldquo;What if someone subscribes with an email they don&rsquo;t own?&rdquo;</p>
<p>Ready? Let&rsquo;s break down each step and see how the magic happens.</p>
<h3 id="subscribing">Subscribing</h3>
<p>The subscription process begins with a humble web form, like the one on my site&rsquo;s main page. A form input with attributes <code>type=&quot;email&quot; required</code> helps with validation, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#Validation">thanks to the browser</a>. When submitted, the form sends a GET request to the Simple Subscribe subscription endpoint.</p>
<p>Simple Subscribe receives a GET request to this endpoint with a query string containing the intended subscriber&rsquo;s email. It then generates an <code>id</code> value and adds both <code>email</code> and <code>id</code> to your DynamoDB table.</p>
<p>The table item now looks like:</p>
<table>
  <thead>
      <tr>
          <th>email</th>
          <th>confirm</th>
          <th>id</th>
          <th>timestamp</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>subscriber@example.com</code></td>
          <td><em>false</em></td>
          <td><code>uuid-xxxxx</code></td>
          <td>2020-11-01 00:27:39</td>
      </tr>
  </tbody>
</table>
<p>The <code>confirm</code> column, which holds a boolean, indicates that the item is a subscription request that has not yet been confirmed. To verify an email address in the database, you&rsquo;ll need to find the correct item and change <code>confirm</code> to <code>true</code>.</p>
<p>As you work with your data, consider the goal of each manipulation and how you might compare an incoming request to existing data.</p>
<p>For example, if someone made a subsequent subscription request for the same email address, how would you handle it? You might say, &ldquo;Create a new line item with a new <code>id</code>,&rdquo; however, this might not be best strategy when your serverless application database is paid for by request volume.</p>
<p>Since <a href="https://aws.amazon.com/dynamodb/pricing/">DynamoDB Pricing</a> depends on how much data you read and write to your tables, it&rsquo;s advantageous to avoid piling on excess data.</p>
<p>With that in mind, it would be prudent to handle subscription requests for the same email by performing an update instead of adding a new line. Simple Subscribe actually uses the same function to either add or update a database item. This is typically referred to as, &ldquo;update or insert.&rdquo;</p>
<p>In a database like SQLite this is accomplished with the <a href="https://www.sqlite.org/lang_UPSERT.html">UPSERT syntax</a>. In the case of DynamoDB, you use an update operation. For the <a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/">Go SDK</a>, its syntax is <code>UpdateItem</code>.</p>
<p>When a duplicate subscription request is received, the database item is matched on the <code>email</code> only. If an existing line item is found, its <code>id</code> and <code>timestamp</code> are overridden, which updates the existing database record and avoids flooding your table with duplicate requests.</p>
<h3 id="verifying-email-addresses">Verifying email addresses</h3>
<p>After submitting the form, the intended subscriber then receives an email from SES containing a link. This link is built using the <code>email</code> and <code>id</code> from the table, and takes the format:</p>
<pre tabindex="0"><code class="language-url" data-lang="url">&lt;BASE_URL&gt;&lt;VERIFY_PATH&gt;/?email=subscriber@example.com&amp;id=uuid-xxxxx
</code></pre><p>In this set up, the <code>id</code> is a UUID that acts as a secret token. It provides an identifier that you can match that is sufficiently complex and hard to guess. This approach deters people from subscribing with email addresses they don&rsquo;t control.</p>
<p>Visiting the link sends a request to your verification endpoint with the <code>email</code> and <code>id</code> in the query string. This time, it&rsquo;s important to compare both the incoming <code>email</code> and <code>id</code> values to the database record. This verifies that the recipient of the confirmation email is initiating the request.</p>
<p>The verification endpoint ensures that these values match an item in your database, then performs another update operation to set <code>confirm</code> to <code>true</code>, and update the timestamp. The item now looks like:</p>
<table>
  <thead>
      <tr>
          <th>email</th>
          <th>confirm</th>
          <th>id</th>
          <th>timestamp</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>subscriber@example.com</code></td>
          <td><em>true</em></td>
          <td><code>uuid-xxxxx</code></td>
          <td>2020-11-01 00:37:39</td>
      </tr>
  </tbody>
</table>
<h3 id="querying-for-emails">Querying for emails</h3>
<p>You can now query your table to build your email list. Depending on your email sending solution, you might do this manually, with another Lambda, or even from the command line.</p>
<p>Since data for requested subscriptions (where <code>confirm</code> is <code>false</code>) is stored in the table alongside confirmed subscriptions, it&rsquo;s important to differentiate this data when querying for email addresses to send to. You&rsquo;ll want to ensure you only return emails where <code>confirm</code> is <code>true</code>.</p>
<h2 id="providing-unsubscribe-links">Providing unsubscribe links</h2>
<p>Similar to verifying an email address, Simple Subscribe uses <code>email</code> and <code>id</code> as arguments to the function that deletes an item from your DynamoDB table in order to unsubscribe an email address. To allow people to remove themselves from your list, you&rsquo;ll need to provide a URL in each email you send that includes their <code>email</code> and <code>id</code> as a query string to the unsubscribe endpoint. It would look something like:</p>
<pre tabindex="0"><code class="language-url" data-lang="url">&lt;BASE_URL&gt;&lt;UNSUBSCRIBE_PATH&gt;/?email=subscriber@example.com&amp;id=uuid-xxxxx
</code></pre><p>When the link is clicked, the query string is passed to the unsubscribe endpoint. If the provided <code>email</code> and <code>id</code> match a database item, that item will be deleted.</p>
<p>Proving a method for your subscribers to automatically remove themselves from your list, without any human intervention necessary, is part of an ethical and respectful philosophy towards handling the data that&rsquo;s been entrusted to you.</p>
<h2 id="caring-for-your-data">Caring for your data</h2>
<p>Once you decide to accept other people&rsquo;s data, it becomes your responsibility to care for it. This is applicable to everything you build. For Simple Subscribe, it means maintaining the security of your database, and periodically pruning your table.</p>
<p>In order to avoid retaining email addresses where <code>confirm</code> is <code>false</code> past a certain time frame, it would be a good idea to set up a cleaning function that runs on a regular schedule. This can be achieved manually, with an AWS Lambda function, or using the command line.</p>
<p>To clean up, find database items where <code>confirm</code> is <code>false</code> and <code>timestamp</code> is older than a particular point in time. Depending on your use case and request volumes, the frequency at which you choose to clean up will vary.</p>
<p>Also depending on your use case, you may wish to keep backups of your data. If you are particularly concerned about data integrity, you can explore <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/backuprestore_HowItWorks.html">On-Demand Backup</a> or <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html">Point-in-Time Recovery</a> for DynamoDB.</p>
<h2 id="build-your-independent-subscriber-base">Build your independent subscriber base</h2>
<p>Building your own subscriber list can be an empowering endeavor! Whether you intend to start a newsletter, send out notifications for new content, or want to create a community around your work, there&rsquo;s nothing more personal or direct than an email from me to you.</p>
<p>I encourage you to start building your subscriber base with Simple Subscribe today! Like most of my work, it&rsquo;s open source and free for your personal use. Dive into the code at <a href="https://github.com/victoriadrake/simple-subscribe">the GitHub repository</a> or learn more at <a href="https://simplesubscribe.org">SimpleSubscribe.org</a>.</p>
]]></content></entry><entry><title type="html">Hugo vs Jekyll: an epic battle of static site generator themes</title><link href="https://victoria.dev/archive/hugo-vs-jekyll-an-epic-battle-of-static-site-generator-themes/"/><id>https://victoria.dev/archive/hugo-vs-jekyll-an-epic-battle-of-static-site-generator-themes/</id><author><name>Victoria Drake</name></author><published>2020-04-27T06:34:41-04:00</published><updated>2020-04-27T06:34:41-04:00</updated><content type="html"><![CDATA[<p>I recently took on the task of creating a documentation site theme for two projects. Both projects needed the same basic features, but one uses Jekyll while the other uses Hugo.</p>
<p>In typical developer rationality, there was clearly only one option. I decided to create the same theme in both frameworks, and to give you, dear reader, a side-by-side comparison.</p>
<p>This post isn&rsquo;t a comprehensive theme-building guide, but intended to familiarize you with the process of building a theme in either generator. Here&rsquo;s what we&rsquo;ll cover:</p>
<ul>
<li><a href="#how-theme-files-are-organized">How theme files are organized</a></li>
<li><a href="#where-to-put-content">Where to put content</a></li>
<li><a href="#how-templating-works">How templating works</a></li>
<li><a href="#creating-a-top-level-menu-with-the-pages-object">Creating a top-level menu with the <code>pages</code> object</a></li>
<li><a href="#creating-a-menu-with-nested-links-from-a-data-list">Creating a menu with nested links from a data list</a></li>
<li><a href="#putting-the-template-together">Putting the template together</a></li>
<li><a href="#create-a-stylesheet">Create a stylesheet</a>
<ul>
<li><a href="#sass-and-css-in-jekyll">Sass and CSS in Jekyll</a></li>
<li><a href="#sass-and-hugo-pipes-in-hugo">Sass and Hugo Pipes in Hugo</a></li>
</ul>
</li>
<li><a href="#configure-and-deploy-to-github-pages">Configure and deploy to GitHub Pages</a>
<ul>
<li><a href="#configure-jekyll">Configure Jekyll</a></li>
<li><a href="#configure-hugo">Configure Hugo</a></li>
<li><a href="#deploy-to-github-pages">Deploy to GitHub Pages</a></li>
</ul>
</li>
<li><a href="#showtime">Showtime</a></li>
<li><a href="#wait-who-won">Wait who won</a></li>
</ul>
<p>Here&rsquo;s a crappy wireframe of the theme I&rsquo;m going to create.</p>
<p><img src="wireframe.jpg" alt="A sketch of the finished page"></p>
<p>If you&rsquo;re planning to build-along, it may be helpful to serve the theme locally as you build it; both generators offer this functionality. For Jekyll, run <code>jekyll serve</code>, and for Hugo, <code>hugo serve</code>.</p>
<p>There are two main elements: the main content area, and the all-important sidebar menu. To create them, you&rsquo;ll need template files that tell the site generator how to generate the HTML page. To organize theme template files in a sensible way, you first need to know what directory structure the site generator expects.</p>
<h2 id="how-theme-files-are-organized">How theme files are organized</h2>
<p>Jekyll supports gem-based themes, which users can install like any other Ruby gems. This method hides theme files in the gem, so for the purposes of this comparison, we aren&rsquo;t using gem-based themes.</p>
<p>When you run <code>jekyll new-theme &lt;name&gt;</code>, Jekyll will scaffold a new theme for you. Here&rsquo;s what those files look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── assets
</span></span><span style="display:flex;"><span>├── Gemfile
</span></span><span style="display:flex;"><span>├── _includes
</span></span><span style="display:flex;"><span>├── _layouts
</span></span><span style="display:flex;"><span>│   ├── default.html
</span></span><span style="display:flex;"><span>│   ├── page.html
</span></span><span style="display:flex;"><span>│   └── post.html
</span></span><span style="display:flex;"><span>├── LICENSE.txt
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── _sass
</span></span><span style="display:flex;"><span>└── &lt;name&gt;.gemspec
</span></span></code></pre></div><p>The directory names are appropriately descriptive. The <code>_includes</code> directory is for small bits of code that you reuse in different places, in much the same way you&rsquo;d put butter on everything. (Just me?) The <code>_layouts</code> directory contains templates for different types of pages on your site. The <code>_sass</code> folder is for <a href="https://sass-lang.com/documentation/syntax">Sass</a> files used to build your site&rsquo;s stylesheet.</p>
<p>You can scaffold a new Hugo theme by running <code>hugo new theme &lt;name&gt;</code>. It has these files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── archetypes
</span></span><span style="display:flex;"><span>│   └── default.md
</span></span><span style="display:flex;"><span>├── layouts
</span></span><span style="display:flex;"><span>│   ├── 404.html
</span></span><span style="display:flex;"><span>│   ├── _default
</span></span><span style="display:flex;"><span>│   │   ├── baseof.html
</span></span><span style="display:flex;"><span>│   │   ├── list.html
</span></span><span style="display:flex;"><span>│   │   └── single.html
</span></span><span style="display:flex;"><span>│   ├── index.html
</span></span><span style="display:flex;"><span>│   └── partials
</span></span><span style="display:flex;"><span>│       ├── footer.html
</span></span><span style="display:flex;"><span>│       ├── header.html
</span></span><span style="display:flex;"><span>│       └── head.html
</span></span><span style="display:flex;"><span>├── LICENSE
</span></span><span style="display:flex;"><span>├── static
</span></span><span style="display:flex;"><span>│   ├── css
</span></span><span style="display:flex;"><span>│   └── js
</span></span><span style="display:flex;"><span>└── theme.toml
</span></span></code></pre></div><p>You can see some similarities. Hugo&rsquo;s page template files are tucked into <code>layouts/</code>. Note that the <code>_default</code> page type has files for a <code>list.html</code> and a <code>single.html</code>. Unlike Jekyll, Hugo uses these specific file names to distinguish between <a href="https://gohugo.io/templates/lists/">list pages</a> (like a page with links to all your blog posts on it) and <a href="https://gohugo.io/templates/single-page-templates/">single pages</a> (like one of your blog posts). The <code>layouts/partials/</code> directory contains the buttery reusable bits, and stylesheet files have a spot picked out in <code>static/css/</code>.</p>
<p>These directory structures aren&rsquo;t set in stone, as both site generators allow some measure of customization. For example, Jekyll lets you define <a href="https://jekyllrb.com/docs/collections/">collections</a>, and Hugo makes use of <a href="https://gohugo.io/content-management/page-bundles/">page bundles</a>. These features let you organize your content multiple ways, but for now, lets look at where to put some simple pages.</p>
<h2 id="where-to-put-content">Where to put content</h2>
<p>To create a site menu that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>Introduction
</span></span><span style="display:flex;"><span>    Getting Started
</span></span><span style="display:flex;"><span>    Configuration
</span></span><span style="display:flex;"><span>    Deploying
</span></span><span style="display:flex;"><span>Advanced Usage
</span></span><span style="display:flex;"><span>    All Configuration Settings
</span></span><span style="display:flex;"><span>    Customizing
</span></span><span style="display:flex;"><span>    Help and Support
</span></span></code></pre></div><p>You&rsquo;ll need two sections (&ldquo;Introduction&rdquo; and &ldquo;Advanced Usage&rdquo;) containing their respective subsections.</p>
<p>Jekyll isn&rsquo;t strict with its content location. It expects pages in the root of your site, and will build whatever&rsquo;s there. Here&rsquo;s how you might organize these pages in your Jekyll site root:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── 404.html
</span></span><span style="display:flex;"><span>├── assets
</span></span><span style="display:flex;"><span>├── Gemfile
</span></span><span style="display:flex;"><span>├── _includes
</span></span><span style="display:flex;"><span>├── index.markdown
</span></span><span style="display:flex;"><span>├── intro
</span></span><span style="display:flex;"><span>│   ├── config.md
</span></span><span style="display:flex;"><span>│   ├── deploy.md
</span></span><span style="display:flex;"><span>│   ├── index.md
</span></span><span style="display:flex;"><span>│   └── quickstart.md
</span></span><span style="display:flex;"><span>├── _layouts
</span></span><span style="display:flex;"><span>│   ├── default.html
</span></span><span style="display:flex;"><span>│   ├── page.html
</span></span><span style="display:flex;"><span>│   └── post.html
</span></span><span style="display:flex;"><span>├── LICENSE.txt
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>├── _sass
</span></span><span style="display:flex;"><span>├── &lt;name&gt;.gemspec
</span></span><span style="display:flex;"><span>└── usage
</span></span><span style="display:flex;"><span>    ├── customizing.md
</span></span><span style="display:flex;"><span>    ├── index.md
</span></span><span style="display:flex;"><span>    ├── settings.md
</span></span><span style="display:flex;"><span>    └── support.md
</span></span></code></pre></div><p>You can change the location of the site source in your <a href="https://jekyllrb.com/docs/configuration/default/">Jekyll configuration</a>.</p>
<p>In Hugo, all rendered content is expected in the <code>content/</code> folder. This prevents Hugo from trying to render pages you don&rsquo;t want, such as <code>404.html</code>, as site content. Here&rsquo;s how you might organize your <code>content/</code> directory in Hugo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── _index.md
</span></span><span style="display:flex;"><span>├── intro
</span></span><span style="display:flex;"><span>│   ├── config.md
</span></span><span style="display:flex;"><span>│   ├── deploy.md
</span></span><span style="display:flex;"><span>│   ├── _index.md
</span></span><span style="display:flex;"><span>│   └── quickstart.md
</span></span><span style="display:flex;"><span>└── usage
</span></span><span style="display:flex;"><span>    ├── customizing.md
</span></span><span style="display:flex;"><span>    ├── _index.md
</span></span><span style="display:flex;"><span>    ├── settings.md
</span></span><span style="display:flex;"><span>    └── support.md
</span></span></code></pre></div><p>To Hugo, <code>_index.md</code> and <code>index.md</code> mean different things. It can be helpful to know what kind of <a href="https://gohugo.io/content-management/page-bundles/">Page Bundle</a> you want for each section: Leaf, which has no children, or Branch.</p>
<p>Now that you have some idea of where to put things, let&rsquo;s look at how to build a page template.</p>
<h2 id="how-templating-works">How templating works</h2>
<p>Jekyll page templates are built with the <a href="https://jekyllrb.com/docs/liquid/">Liquid templating language</a>. It uses braces to output variable content to a page, such as the page&rsquo;s title: <code>{{ page.title }}</code>.</p>
<p>Hugo&rsquo;s templates also use braces, but they&rsquo;re built with <a href="https://gohugo.io/templates/introduction/">Go Templates</a>. The syntax is similar, but different: <code>{{ .Title }}</code>.</p>
<p>Both Liquid and Go Templates can handle logic. Liquid uses <em>tags</em> syntax to denote logic operations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{% if user %}
</span></span><span style="display:flex;"><span>  Hello {{ user.name }}!
</span></span><span style="display:flex;"><span>{% endif %}
</span></span></code></pre></div><p>And Go Templates places its functions and arguments in its braces syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>{{ <span style="color:#66d9ef">if</span> .<span style="color:#a6e22e">User</span> }}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Hello</span> {{ .<span style="color:#a6e22e">User</span> }}!
</span></span><span style="display:flex;"><span>{{ <span style="color:#a6e22e">end</span> }}
</span></span></code></pre></div><p>Templating languages allow you to build one skeleton HTML page, then tell the site generator to put variable content in areas you define. Let&rsquo;s compare two possible <code>default</code> page templates for Jekyll and Hugo.</p>
<p>Jekyll&rsquo;s scaffold <code>default</code> theme is bare, so we&rsquo;ll look at their starter theme <a href="https://github.com/jekyll/minima">Minima</a>. Here&rsquo;s <code>_layouts/default.html</code> in Jekyll (Liquid):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ page.lang | default: site.lang | default: &#34;</span><span style="color:#a6e22e">en</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  {%- include head.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {%- include header.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">main</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page-content&#34;</span> <span style="color:#a6e22e">aria-label</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>      &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wrapper&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{ content }}
</span></span><span style="display:flex;"><span>      &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">main</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {%- include footer.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>Here&rsquo;s Hugo&rsquo;s scaffold theme <code>layouts/_default/baseof.html</code> (Go Templates):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>    {{- partial &#34;head.html&#34; . -}}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>        {{- partial &#34;header.html&#34; . -}}
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{- block &#34;main&#34; . }}{{- end }}
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        {{- partial &#34;footer.html&#34; . -}}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>Different syntax, same idea. Both templates pull in reusable bits for <code>head.html</code>, <code>header.html</code>, and <code>footer.html</code>. These show up on a lot of pages, so it makes sense not to have to repeat yourself. Both templates also have a spot for the main content, though the Jekyll template uses a variable (<code>{{ content }}</code>) while Hugo uses a block (<code>{{- block &quot;main&quot; . }}{{- end }}</code>). <a href="https://gohugo.io/templates/base/#readout">Blocks</a> are just another way Hugo lets you define reusable bits.</p>
<p>Now that you know how templating works, you can build the sidebar menu for the theme.</p>
<h2 id="creating-a-top-level-menu-with-the-pages-object">Creating a top-level menu with the <code>pages</code> object</h2>
<p>You can programmatically create a top-level menu from your pages. It will look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>Introduction
</span></span><span style="display:flex;"><span>Advanced Usage
</span></span></code></pre></div><p>Let&rsquo;s start with Jekyll. You can display links to site pages in your Liquid template by iterating through the <code>site.pages</code> object that Jekyll provides and building a list:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {% for page in site.pages %}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ page.url | absolute_url }}&#34;</span>&gt;{{ page.title }}&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    {% endfor %}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>This returns all of the site&rsquo;s pages, including all the ones that you might not want, like <code>404.html</code>. You can filter for the pages you actually want with a couple more tags, such as conditionally including pages if they have a <code>section: true</code> parameter set:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {% for page in site.pages %}
</span></span><span style="display:flex;"><span>    {%- if page.section -%}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ page.url | absolute_url }}&#34;</span>&gt;{{ page.title }}&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    {%- endif -%}
</span></span><span style="display:flex;"><span>    {% endfor %}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>You can achieve the same effect with slightly less code in Hugo. Loop through Hugo&rsquo;s <code>.Pages</code> object using Go Template&rsquo;s <a href="https://golang.org/pkg/text/template/#hdr-Actions"><code>range</code> action</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>{{ range .Pages }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{.Permalink}}&#34;</span>&gt;{{.Title}}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>{{ end }}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>This template uses the <code>.Pages</code> object to return all the top-level pages in <code>content/</code> of your Hugo site. Since Hugo uses a specific folder for the site content you want rendered, there&rsquo;s no additional filtering necessary to build a simple menu of site pages.</p>
<h2 id="creating-a-menu-with-nested-links-from-a-data-list">Creating a menu with nested links from a data list</h2>
<p>Both site generators can use a separately defined data list of links to render a menu in your template. This is more suitable for creating nested links, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>Introduction
</span></span><span style="display:flex;"><span>    Getting Started
</span></span><span style="display:flex;"><span>    Configuration
</span></span><span style="display:flex;"><span>    Deploying
</span></span><span style="display:flex;"><span>Advanced Usage
</span></span><span style="display:flex;"><span>    All Configuration Settings
</span></span><span style="display:flex;"><span>    Customizing
</span></span><span style="display:flex;"><span>    Help and Support
</span></span></code></pre></div><p>Jekyll supports <a href="https://jekyllrb.com/docs/datafiles/">data files</a> in a few formats, including YAML. Here&rsquo;s the definition for the menu above in <code>_data/menu.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">section</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Introduction</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">subsection</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Getting Started</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/quickstart</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Configuration</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/config</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Deploying</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/deploy</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Advanced Usage</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">subsection</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Customizing</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/customizing</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">All Configuration Settings</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/settings</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">page</span>: <span style="color:#ae81ff">Help and Support</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/support</span>
</span></span></code></pre></div><p>Here&rsquo;s how to render the data in the sidebar template:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{% for a in site.data.menu.section %}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ a.url }}&#34;</span>&gt;{{ a.page }}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {% for b in a.subsection %}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ b.url }}&#34;</span>&gt;{{ b.page }}&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    {% endfor %}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>{% endfor %}
</span></span></code></pre></div><p>This method allows you to build a custom menu, two nesting levels deep. The nesting levels are limited by the <code>for</code> loops in the template. For a recursive version that handles further levels of nesting, see <a href="https://jekyllrb.com/tutorials/navigation/#scenario-9-nested-tree-navigation-with-recursion">Nested tree navigation with recursion</a>.</p>
<p>Hugo does something similar with its <a href="https://gohugo.io/templates/menu-templates/#section-menu-for-lazy-bloggers">menu templates</a>. You can define menu links in your <a href="https://gohugo.io/getting-started/configuration/">Hugo site config</a>, and even add useful properties that Hugo understands, like weighting. Here&rsquo;s a definition of the menu above in <code>config.yaml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">sectionPagesMenu</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">menu</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">main</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">intro</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Introduction</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Getting Started</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">intro</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/quickstart/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Configuration</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">intro</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/config/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploying</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">intro</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/intro/deploy/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">identifier</span>: <span style="color:#ae81ff">usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Advanced Usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Customizing</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/customizing/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">All Configuration Settings</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/settings/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Help and Support</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parent</span>: <span style="color:#ae81ff">usage</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">/usage/support/</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">weight</span>: <span style="color:#ae81ff">3</span>
</span></span></code></pre></div><p>Hugo uses the <code>identifier</code>, which must match the section name, along with the <code>parent</code> variable to handle nesting. Here&rsquo;s how to render the menu in the sidebar template:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {{ range .Site.Menus.main }}
</span></span><span style="display:flex;"><span>    {{ if .HasChildren }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .URL }}&#34;</span>&gt;{{ .Name }}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">ul</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sub-menu&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{ range .Children }}
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .URL }}&#34;</span>&gt;{{ .Name }}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        {{ end }}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    {{ else }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ .URL }}&#34;</span>&gt;{{ .Name }}&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>    {{ end }}
</span></span><span style="display:flex;"><span>    {{ end }}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span></code></pre></div><p>The <code>range</code> function iterates over the menu data, and Hugo&rsquo;s <code>.Children</code> variable handles nested pages for you.</p>
<h2 id="putting-the-template-together">Putting the template together</h2>
<p>With your menu in your reusable sidebar bit (<code>_includes/sidebar.html</code> for Jekyll and <code>partials/sidebar.html</code> for Hugo), you can add it to the <code>default.html</code> template.</p>
<p>In Jekyll:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ page.lang | default: site.lang | default: &#34;</span><span style="color:#a6e22e">en</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{%- include head.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    {%- include sidebar.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {%- include header.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page-content&#34;</span> <span style="color:#a6e22e">aria-label</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{ content }}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {%- include footer.html -%}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>In Hugo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>{{- partial &#34;head.html&#34; . -}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    {{- partial &#34;sidebar.html&#34; . -}}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    {{- partial &#34;header.html&#34; . -}}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;page-content&#34;</span> <span style="color:#a6e22e">aria-label</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Content&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        {{- block &#34;main&#34; . }}{{- end }}
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    {{- partial &#34;footer.html&#34; . -}}
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>When the site is generated, each page will contain all the code from your <code>sidebar.html</code>.</p>
<h2 id="create-a-stylesheet">Create a stylesheet</h2>
<p>Both site generators accept Sass for creating CSS stylesheets. Jekyll <a href="https://jekyllrb.com/docs/assets/">has Sass processing built in</a>, and Hugo uses <a href="https://gohugo.io/hugo-pipes/transform-to-css/">Hugo Pipes</a>. Both options have some quirks.</p>
<h3 id="sass-and-css-in-jekyll">Sass and CSS in Jekyll</h3>
<p>To process a Sass file in Jekyll, create your style definitions in the <code>_sass</code> directory. For example, in a file at <code>_sass/style-definitions.scss</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span>$background-color<span style="color:#f92672">:</span> <span style="color:#ae81ff">#eef</span> <span style="color:#66d9ef">!default</span>;
</span></span><span style="display:flex;"><span>$text-color<span style="color:#f92672">:</span> <span style="color:#ae81ff">#111</span> <span style="color:#66d9ef">!default</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">background-color</span><span style="color:#f92672">:</span> $background-color;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">color</span><span style="color:#f92672">:</span> $text-color;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Jekyll won&rsquo;t generate this file directly, as it only processes files with front matter. To create the end-result filepath for your site&rsquo;s stylesheet, use a placeholder with empty front matter where you want the <code>.css</code> file to appear. For example, <code>assets/css/style.scss</code>. In this file, simply import your styles:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scss" data-lang="scss"><span style="display:flex;"><span><span style="color:#f92672">---</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">---</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">@</span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;style-definitions&#34;</span>;
</span></span></code></pre></div><p>This rather hackish configuration has an upside: you can use Liquid template tags and variables in your placeholder file. This is a nice way to allow users to set variables from the site <code>_config.yml</code>, for example.</p>
<p>The resulting CSS stylesheet in your generated site has the path <code>/assets/css/style.css</code>. You can link to it in your site&rsquo;s <code>head.html</code> using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ &#34;</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#a6e22e">assets</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#a6e22e">css</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#a6e22e">style</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#a6e22e">css</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#a6e22e">relative_url</span> <span style="color:#960050;background-color:#1e0010">}}&#34;</span> <span style="color:#a6e22e">media</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;screen&#34;</span>&gt;
</span></span></code></pre></div><h3 id="sass-and-hugo-pipes-in-hugo">Sass and Hugo Pipes in Hugo</h3>
<p>Hugo uses <a href="https://gohugo.io/hugo-pipes/transform-to-css/">Hugo Pipes</a> to process Sass to CSS. You can achieve this by using Hugo&rsquo;s asset processing function, <code>resources.ToCSS</code>, which expects a source in the <code>assets/</code> directory. It takes the SCSS file as an argument. With your style definitions in a Sass file at <code>assets/sass/style.scss</code>, here&rsquo;s how to get, process, and link your Sass in your theme&rsquo;s <code>head.html</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>{{ $style := resources.Get &#34;/sass/style.scss&#34; | resources.ToCSS }}
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{ $style.RelPermalink }}&#34;</span> <span style="color:#a6e22e">media</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;screen&#34;</span>&gt;
</span></span></code></pre></div><p>Hugo asset processing <a href="https://gohugo.io/troubleshooting/faq/#i-get-tocss--this-feature-is-not-available-in-your-current-hugo-version">requires extended Hugo</a>, which you may not have by default. You can get extended Hugo from the <a href="https://github.com/gohugoio/hugo/releases">releases page</a>.</p>
<h2 id="configure-and-deploy-to-github-pages">Configure and deploy to GitHub Pages</h2>
<p>Before your site generator can build your site, it needs a configuration file to set some necessary parameters. Configuration files live in the site root directory. Among other settings, you can declare the name of the theme to use when building the site.</p>
<h3 id="configure-jekyll">Configure Jekyll</h3>
<p>Here&rsquo;s a minimal <code>_config.yml</code> for Jekyll:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#ae81ff">Your awesome title</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">description</span>: <span style="color:#ae81ff">&gt;-</span> <span style="color:#75715e"># this means to ignore newlines until &#34;baseurl:&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">Write an awesome description for your new site here. You can edit this</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">line in _config.yml. It will appear in your document head meta (for</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">Google search results) and in your feed.xml site description.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">baseurl</span>: <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e"># the subpath of your site, e.g. /blog</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">url</span>: <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e"># the base hostname &amp; protocol for your site, e.g. http://example.com</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">theme</span>: <span style="color:#75715e"># for gem-based themes</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">remote_theme</span>: <span style="color:#75715e"># for themes hosted on GitHub, when used with GitHub Pages</span>
</span></span></code></pre></div><p>With <code>remote_theme</code>, any <a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll#adding-a-theme">Jekyll theme hosted on GitHub can be used</a> with sites hosted on GitHub Pages.</p>
<p>Jekyll has a <a href="https://jekyllrb.com/docs/configuration/default/">default configuration</a>, so any parameters added to your configuration file will override the defaults. Here are <a href="https://jekyllrb.com/docs/configuration/options/">additional configuration settings</a>.</p>
<h3 id="configure-hugo">Configure Hugo</h3>
<p>Here&rsquo;s a minimal example of Hugo&rsquo;s <code>config.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">baseURL</span>: <span style="color:#ae81ff">https://example.com/</span> <span style="color:#75715e"># The full domain your site will live at</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">languageCode</span>: <span style="color:#ae81ff">en-us</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#ae81ff">Hugo Docs Site</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">theme</span>: <span style="color:#75715e"># theme name</span>
</span></span></code></pre></div><p>Hugo makes no assumptions, so if a necessary parameter is missing, you&rsquo;ll see a warning when building or serving your site. Here are <a href="https://gohugo.io/getting-started/configuration/#all-configuration-settings">all configuration settings for Hugo</a>.</p>
<h3 id="deploy-to-github-pages">Deploy to GitHub Pages</h3>
<p>Both generators build your site with a command.</p>
<p>For Jekyll, use <code>jekyll build</code>. See <a href="https://jekyllrb.com/docs/configuration/options/#build-command-options">further build options here</a>.</p>
<p>For Hugo, use <code>hugo</code>. You can run <code>hugo help</code> or see <a href="https://gohugo.io/getting-started/usage/#test-installation">further build options here</a>.</p>
<p>You&rsquo;ll have to choose the source for your GitHub Pages site; once done, your site will update each time you push a new build. Of course, you can also automate your GitHub Pages build using GitHub Actions. Here&rsquo;s one for <a href="https://github.com/victoriadrake/hugo-latest-cd">building and deploying with Hugo</a>, and one for <a href="https://github.com/victoriadrake/jekyll-cd">building and deploying Jekyll</a>.</p>
<h2 id="showtime">Showtime</h2>
<p>All the substantial differences between these two generators are under the hood; all the same, let&rsquo;s take a look at the finished themes, in two color variations.</p>
<p>Here&rsquo;s Hugo:</p>
<p><img src="ogd_hugo.png" alt="OpenGitDocs theme for Hugo"></p>
<p>Here&rsquo;s Jekyll:</p>
<p><img src="ogd_jekyll.png" alt="OpenGitDocs theme for Jekyll"></p>
<p>Spiffy!</p>
<h2 id="wait-who-won">Wait who won</h2>
<p>🤷</p>
<p>Both Hugo and Jekyll have their quirks and conveniences.</p>
<p>From this developer&rsquo;s perspective, Jekyll is a workable choice for simple sites without complicated organizational needs. If you&rsquo;re looking to render some one-page posts in an <a href="https://jekyllrb.com/docs/themes/">available theme</a> and host with GitHub Pages, Jekyll will get you up and running fairly quickly.</p>
<p>Personally, I use Hugo. I like the organizational capabilities of its Page Bundles, and it&rsquo;s backed by a dedicated and conscientious team that really seems to strive to facilitate convenience for their users. This is evident in Hugo&rsquo;s many functions, and handy tricks like <a href="https://gohugo.io/content-management/image-processing/">Image Processing</a> and <a href="https://gohugo.io/content-management/shortcodes/">Shortcodes</a>. They seem to release new fixes and versions about as often as I make a new cup of coffee.</p>
<p>If you still can&rsquo;t decide, don&rsquo;t worry. Many themes are available for both Hugo and Jekyll! Start with one, switch later if you want. That&rsquo;s the benefit of having options.</p>
]]></content></entry><entry><title type="html">Publishing GitHub event data with GitHub Actions and Pages</title><link href="https://victoria.dev/archive/publishing-github-event-data-with-github-actions-and-pages/"/><id>https://victoria.dev/archive/publishing-github-event-data-with-github-actions-and-pages/</id><author><name>Victoria Drake</name></author><published>2019-11-04T09:13:23-04:00</published><updated>2019-11-04T09:13:23-04:00</updated><content type="html"><![CDATA[<p>Teams who work on GitHub rely on event data to collaborate. The data recorded as issues, pull requests, and comments, become vital to understanding the project.</p>
<p>With the general availability of GitHub Actions, we have a chance to programmatically access and preserve GitHub event data in our repository. Making the data part of the repository itself is a way of preserving it outside of GitHub, and also gives us the ability to feature the data on a front-facing website, such as with GitHub Pages, through an automated process that&rsquo;s part of our CI/CD pipeline.</p>
<p>And, if you&rsquo;re like me, you can turn <a href="https://github.com/victoriadrake/github-guestbook/issues/1">GitHub issue comments</a> into an <a href="https://github.com/victoriadrake/github-guestbook">awesome 90s guestbook page</a>.</p>
<p>No matter the usage, the principle concepts are the same. We can use Actions to access, preserve, and display GitHub event data - with just one workflow file. To illustrate the process, I&rsquo;ll take you through the <a href="https://github.com/victoriadrake/github-guestbook/blob/master/.github/workflows/publish-comments.yml">workflow code</a> that makes my guestbook shine on.</p>
<p>For an introductory look at GitHub Actions including how workflows are triggered, see <a href="/posts/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/">A lightweight, tool-agnostic CI/CD flow with GitHub Actions</a>.</p>
<h2 id="accessing-github-event-data">Accessing GitHub event data</h2>
<p>An Action workflow runs in an environment with some default environment variables. A lot of convenient information is available here, including event data. The most complete way to access the event data is using the <code>$GITHUB_EVENT_PATH</code> variable, the path of the file with the complete JSON event payload.</p>
<p>The expanded path looks like <code>/home/runner/work/_temp/_github_workflow/event.json</code> and its data corresponds to its webhook event. You  can find the documentation for webhook event data in GitHub REST API <a href="https://developer.github.com/webhooks/#events">Event Types and Payloads</a>. To make the JSON data available in the workflow environment, you can use a tool like <code>jq</code> to parse the event data and put it in an environment variable.</p>
<p>Below, I grab the comment ID from an <a href="https://developer.github.com/v3/activity/events/types/#issuecommentevent">issue comment event</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ID<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>jq <span style="color:#e6db74">&#39;.comment.id&#39;</span> $GITHUB_EVENT_PATH<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Most event data is also available via the <a href="https://docs.github.com/en/actions/learn-github-actions/contexts#github-context"><code>github.event</code> context variable</a> without needing to parse JSON. The fields are accessed using dot notation, as in the example below where I grab the same comment ID:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ID<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>{ github.event.comment.id <span style="color:#e6db74">}</span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>For my guestbook, I want to display entries with the user&rsquo;s handle, and the date and time. I can capture this event data like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>AUTHOR<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>{ github.event.comment.user.login <span style="color:#e6db74">}</span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>DATE<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>{ github.event.comment.created_at <span style="color:#e6db74">}</span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Shell variables are handy for accessing data, however, they&rsquo;re ephemeral. The workflow environment is created anew each run, and even shell variables set in one step do not persist to other steps. To persist the captured data, you have two options: use artifacts, or commit it to the repository.</p>
<h2 id="preserving-event-data-using-artifacts">Preserving event data: using artifacts</h2>
<p>Using artifacts, you can persist data between workflow jobs without committing it to your repository. This is handy when, for example, you wish to transform or incorporate the data before putting it somewhere more permanent.</p>
<p>Two actions assist with using artifacts: <code>upload-artifact</code> and <code>download-artifact</code>. You can use these actions to make files available to other jobs in the same workflow. For a full example, see <a href="https://docs.github.com/en/actions/advanced-guides/storing-workflow-data-as-artifacts#passing-data-between-jobs-in-a-workflow">passing data between jobs in a workflow</a>.</p>
<p>The <code>upload-artifact</code> action&rsquo;s <code>action.yml</code> contains an <a href="https://github.com/actions/upload-artifact/blob/master/action.yml">explanation</a> of the keywords. The uploaded files are saved in <code>.zip</code> format. Another job in the same workflow run can use the <code>download-artifact</code> action to utilize the data in another step.</p>
<p>You can also manually download the archive on the workflow run page, under the repository&rsquo;s Actions tab.</p>
<p>Persisting workflow data between jobs does not make any changes to the repository files, as the artifacts generated live only in the workflow environment. Personally, being comfortable working in a shell environment, I see a narrow use case for artifacts, though I&rsquo;d have been remiss not to mention them. Besides passing data between jobs, they could be useful for creating <code>.zip</code> format archives of, say, test output data. In the case of my guestbook example, I simply ran all the necessary steps in one job, negating any need for passing data between jobs.</p>
<h2 id="preserving-event-data-pushing-workflow-files-to-the-repository">Preserving event data: pushing workflow files to the repository</h2>
<p>To preserve data captured in the workflow in the repository itself, it is necessary to add and push this data to the Git repository. You can do this in the workflow by creating new files with the data, or by appending data to existing files, using shell commands.</p>
<h3 id="creating-files-in-the-workflow">Creating files in the workflow</h3>
<p>To work with the repository files in the workflow, use the <a href="https://github.com/actions/checkout"><code>checkout</code> action</a> to first get a copy to work with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span>- <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@master</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>To add comments to my guestbook, I turn the event data captured in shell variables into proper files, using substitutions in <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">shell parameter expansion</a> to sanitize user input and translate newlines to paragraphs. I wrote previously about <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">why user input should be treated carefully</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Turn comment into file</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ID=${{ github.event.comment.id }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    AUTHOR=${{ github.event.comment.user.login }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    DATE=${{ github.event.comment.created_at }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    COMMENT=$(echo &#34;${{ github.event.comment.body }}&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    NO_TAGS=${COMMENT//[&lt;&gt;]/\`}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    FOLDER=comments
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    printf &#39;%b\n&#39; &#34;&lt;div class=\&#34;comment\&#34;&gt;&lt;p&gt;${AUTHOR} says:&lt;/p&gt;&lt;p&gt;${NO_TAGS//$&#39;\n&#39;/\&lt;\/p\&gt;\&lt;p\&gt;}&lt;/p&gt;&lt;p&gt;${DATE}&lt;/p&gt;&lt;/div&gt;\r\n&#34; &gt; ${FOLDER}/${ID}.html</span>
</span></span></code></pre></div><p>By using <code>printf</code> and directing its output with <code>&gt;</code> to a new file, the event data is transformed into an HTML file, named with the comment ID number, that contains the captured event data. Formatted, it looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;comment&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;victoriadrake says:&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;This is a comment!&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">p</span>&gt;2019-11-04T00:28:36Z&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><p>When working with comments, one effect of naming files using the comment ID is that a new file with the same ID will overwrite the previous. This is handy for a guestbook, as it allows any edits to a comment to replace the original comment file.</p>
<p>If you&rsquo;re using a static site generator like Hugo, you could build a Markdown format file, stick it in your <code>content/</code> folder, and the regular site build will take care of the rest. In the case of my simplistic guestbook, I have an extra step to consolidate the individual comment files into a page. Each time it runs, it overwrites the existing <code>index.html</code> with the <code>header.html</code> portion (<code>&gt;</code>), then finds and appends (<code>&gt;&gt;</code>) all the comment files&rsquo; contents in descending order, and lastly appends the <code>footer.html</code> portion to end the page.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Assemble page</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    cat header.html &gt; index.html
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    find comments/ -name &#34;*.html&#34; | sort -r | xargs -I % cat % &gt;&gt; index.html
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    cat footer.html &gt;&gt; index.html</span>
</span></span></code></pre></div><h3 id="committing-changes-to-the-repository">Committing changes to the repository</h3>
<p>Since the <code>checkout</code> action is not quite the same as cloning the repository, at time of writing, there are some <a href="https://github.community/t5/GitHub-Actions/Checkout-Action-does-not-create-local-master-and-has-no-options/td-p/31575">issues</a> still to work around. A couple extra steps are necessary to <code>pull</code>, <code>checkout</code>, and successfully <code>push</code> changes back to the <code>master</code> branch, but this is pretty trivially done in the shell.</p>
<p>Below is the step that adds, commits, and pushes changes made by the workflow back to the repository&rsquo;s <code>master</code> branch.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push changes to repo</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    REMOTE=https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    git config user.email &#34;${{ github.actor }}@users.noreply.github.com&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    git config user.name &#34;${{ github.actor }}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    git pull ${REMOTE}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    git checkout master
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    git add .
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    git status
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    git commit -am &#34;Add new comment&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    git push ${REMOTE} master</span>
</span></span></code></pre></div><p>The remote, in fact, our repository, is specified using the <code>github.repository</code> context variable. For our workflow to be allowed to push to master, we give the remote URL using <a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication">the default <code>secrets.GITHUB_TOKEN</code> variable</a>.</p>
<p>Since the workflow environment is shiny and newborn, we need to configure Git. In the above example, I&rsquo;ve used the <code>github.actor</code> context variable to input the username of the account initiating the workflow. The email is similarly configured using the <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-email-preferences/setting-your-commit-email-address#setting-your-commit-email-address-on-github">default <code>noreply</code> GitHub email address</a>.</p>
<h2 id="displaying-event-data">Displaying event data</h2>
<p>If you&rsquo;re using GitHub Pages with the default <code>secrets.GITHUB_TOKEN</code> variable and without a site generator, pushing changes to the repository in the workflow will only update the repository files. The GitHub Pages build will fail with an error, &ldquo;Your site is having problems building: Page build failed.&rdquo;</p>
<p>To enable Actions to trigger a Pages site build, you&rsquo;ll need to create a Personal Access Token. This token can be <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">stored as a secret in the repository</a> settings and passed into the workflow in place of the default <code>secrets.GITHUB_TOKEN</code> variable. I wrote more about <a href="/posts/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/#environment-and-variables">Actions environment and variables in this post</a>.</p>
<p>With the use of a Personal Access Token, a push initiated by the Actions workflow will also update the Pages site. You can see it for yourself by <a href="https://github.com/victoriadrake/github-guestbook/issues/1">leaving a comment</a> in my guestbook! The comment creation event triggers the workflow, which then takes around 30 seconds to run and update the guestbook page.</p>
<p>Where a site build is necessary for changes to be published, such as when using Hugo, an Action can do this too. However, in order to avoid creating unintended loops, one Action workflow will not trigger another (<a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow">see what will</a>). Instead, it&rsquo;s extremely convenient to handle the process of <a href="/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/">building the site with a Makefile</a>, which any workflow can then run. Simply add running the Makefile as the final step in your workflow job, with the repository token where necessary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run Makefile</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">TOKEN</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">run</span>: <span style="color:#ae81ff">make all</span>
</span></span></code></pre></div><p>This ensures that the final step of your workflow builds and deploys the updated site.</p>
<h2 id="no-more-event-data-horizon">No more event data horizon</h2>
<p>GitHub Actions provides a neat way to capture and utilize event data so that it&rsquo;s not only available within GitHub. The possibilities are only as limited as your imagination! Here are a few ideas for things this lets us create:</p>
<ol>
<li>A public-facing issues board, where customers without GitHub accounts can view and give feedback on project issues.</li>
<li>An automatically-updating RSS feed of new issues, comments, or PRs for any repository.</li>
<li>A comments system for static sites, utilizing GitHub issue comments as an input method.</li>
<li>An awesome 90s guestbook page.</li>
</ol>
<p>Did I mention I made a 90s guestbook page? My inner-Geocities-nerd is a little excited.</p>
]]></content></entry><entry><title type="html">A lightweight, tool-agnostic CI/CD flow with GitHub Actions</title><link href="https://victoria.dev/posts/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/"/><id>https://victoria.dev/posts/a-lightweight-tool-agnostic-ci/cd-flow-with-github-actions/</id><author><name>Victoria Drake</name></author><published>2019-10-28T08:28:52-04:00</published><updated>2019-10-28T08:28:52-04:00</updated><content type="html"><![CDATA[<p>Agnostic tooling is the clever notion that you should be able to run your code in various environments. With many continuous integration and continuous development (CI/CD) apps available, agnostic tooling gives developers a big advantage: portability.</p>
<p>Of course, having your CI/CD work <em>everywhere</em> is a tall order. Popular <a href="https://github.com/marketplace/category/continuous-integration">CI apps for GitHub repositories</a> alone use a multitude of configuration languages spanning <a href="https://groovy-lang.org/syntax.html">Groovy</a>, <a href="https://yaml.org/">YAML</a>, <a href="https://github.com/toml-lang/toml">TOML</a>, <a href="https://json.org/">JSON</a>, and more&hellip; all with differing syntax, of course. Porting workflows from one tool to another is more than a one-cup-of-coffee process.</p>
<p>The introduction of <a href="https://github.com/features/actions">GitHub Actions</a> has the potential to add yet another tool to the mix; or, for the right set up, greatly simplify a CI/CD workflow.</p>
<p>Prior to this article, I accomplished my CD flow with several lashed-together apps. I used AWS Lambda to trigger site builds on a schedule. I had Netlify build on push triggers, as well as run image optimization, and then push my site to the public Pages repository. I used Travis CI in the public repository to test the HTML. All this worked in conjunction with GitHub Pages, which actually hosts the site.</p>
<p>I&rsquo;m now using the GitHub Actions beta to accomplish all the same tasks, with one <a href="/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/">portable Makefile</a> of build instructions, and without any other CI/CD apps.</p>
<h2 id="appreciating-the-shell">Appreciating the shell</h2>
<p>What do most CI/CD tools have in common? They run your workflow instructions in a shell environment! This is wonderful, because that means that most CI/CD tools can do anything that you can do in a terminal&hellip; and you can do pretty much <em>anything</em> in a terminal.</p>
<p>Especially for a contained use case like building my static site with a generator like Hugo, running it all in a shell is a no-brainer. To tell the magic box what to do, we just need to write instructions.</p>
<p>While a shell script is certainly the most portable option, I use the still-very-portable <a href="https://en.wikipedia.org/wiki/Make_(software)">Make</a> to write my process instructions. This provides me with some advantages over simple shell scripting, like the use of variables and <a href="https://en.wikipedia.org/wiki/Make_(software)#Macros">macros</a>, and the modularity of <a href="https://en.wikipedia.org/wiki/Makefile#Rules">rules</a>.</p>
<p>I got into the <a href="/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/">nitty-gritty of my Makefile in my last post</a>. Let&rsquo;s look at how to get GitHub Actions to run it.</p>
<h2 id="using-a-makefile-with-github-actions">Using a Makefile with GitHub Actions</h2>
<p>To our point on portability, my magic Makefile is stored right in the repository root. Since it&rsquo;s included with the code, I can run the Makefile locally on any system where I can clone the repository, provided I set the environment variables. Using GitHub Actions as my CI/CD tool is as straightforward as making Make go worky-worky.</p>
<p>I found the <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">GitHub Actions workflow syntax guide</a> to be pretty straightforward, though also lengthy on options. Here&rsquo;s the necessary set up for getting the Makefile to run.</p>
<p>The workflow file at <code>.github/workflows/make-master.yml</code> contains the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">make-master</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schedule</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#39;20 13 * * *&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@master</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run Makefile</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">TOKEN</span>: <span style="color:#ae81ff">${{ secrets.TOKEN }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">make all</span>
</span></span></code></pre></div><p>I&rsquo;ll explain the components that make this work.</p>
<h2 id="triggering-the-workflow">Triggering the workflow</h2>
<p>Actions support multiple <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">triggers for a workflow</a>. Using the <code>on</code> syntax, I&rsquo;ve defined two triggers for mine: a <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushbranchestagsbranches-ignoretags-ignore">push event</a> to the <code>master</code> branch only, and a <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule">scheduled</a> <code>cron</code> job.</p>
<p>Once the <code>make-master.yml</code> file is in your repository, either of your triggers will cause Actions to run your Makefile. To see how the last run went, you can also <a href="https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge">add a fun badge</a> to the README.</p>
<h3 id="one-hacky-thing">One hacky thing</h3>
<p>Because the Makefile runs on every push to <code>master</code>, I sometimes would get errors when the site build had no changes. When Git, via <a href="/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/">my Makefile</a>, attempted to commit to the Pages repository, no changes were detected and the commit would fail annoyingly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>nothing to commit, working tree clean
</span></span><span style="display:flex;"><span>On branch master
</span></span><span style="display:flex;"><span>Your branch is up to date with &#39;origin/master&#39;.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nothing to commit, working tree clean
</span></span><span style="display:flex;"><span>Makefile:62: recipe for target &#39;deploy&#39; failed
</span></span><span style="display:flex;"><span>make: *** [deploy] Error 1
</span></span><span style="display:flex;"><span>##[error]Process completed with exit code 2.
</span></span></code></pre></div><p>I came across some solutions that proposed using <code>diff</code> to check if a commit should be made, but this may not work for <a href="https://github.com/benmatselby/hugo-deploy-gh-pages/issues/4">reasons</a>. As a workaround, I simply added the <a href="https://gohugo.io/methods/time/utc/">current UTC time</a> to my index page so that every build would contain a change to be committed.</p>
<h2 id="environment-and-variables">Environment and variables</h2>
<p>You can define the <a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources">virtual environment</a> for your workflow to run in using the <code>runs-on</code> syntax. The <del>obvious best choice</del> one I chose is Ubuntu. Using <code>ubuntu-latest</code> gets me the most updated version, whatever that happens to be when you&rsquo;re reading this.</p>
<p>GitHub sets some <a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables">default environment variables</a> for workflows. The <a href="https://github.com/actions/checkout"><code>actions/checkout</code> action</a> with <code>fetch-depth: 1</code> creates a copy of just the most recent commit your repository in the <code>GITHUB_WORKSPACE</code> variable. This allows the workflow to access the Makefile at <code>GITHUB_WORKSPACE/Makefile</code>. Without using the checkout action, the Makefile won&rsquo;t be found, and I get an error that looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>make: *** No rule to make target &#39;all&#39;.  Stop.
</span></span><span style="display:flex;"><span>Running Makefile
</span></span><span style="display:flex;"><span>##[error]Process completed with exit code 2.
</span></span></code></pre></div><p>While there is a <a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication">default <code>GITHUB_TOKEN</code> secret</a>, this is not the one I used. The default is only locally scoped to the current repository. To be able to push to my separate GitHub Pages repository, I created a <a href="https://github.com/settings/tokens">personal access token</a> scoped to <code>public_repo</code> and pass it in as the <code>secrets.TOKEN</code> encrypted variable. For a step-by-step, see <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets">Creating and using encrypted secrets</a>.</p>
<h2 id="portable-tooling">Portable tooling</h2>
<p>The nice thing about using a simple Makefile to define the bulk of my CI/CD process is that it&rsquo;s completely portable. I can run a Makefile anywhere I have access to an environment, which is most CI/CD apps, virtual instances, and, of course, on my local machine.</p>
<p>One of the reasons I like GitHub Actions is that getting my Makefile to run was pretty straightforward. I think the syntax is well done - easy to read, and intuitive when it comes to finding an option you&rsquo;re looking for. For someone already using GitHub Pages, Actions provides a pretty seamless CD experience; and if that should ever change, I can run my Makefile elsewhere. ¯\_(ツ)_/¯</p>
]]></content></entry><entry><title type="html">A portable Makefile for continuous delivery with Hugo and GitHub Pages</title><link href="https://victoria.dev/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/"/><id>https://victoria.dev/posts/a-portable-makefile-for-continuous-delivery-with-hugo-and-github-pages/</id><author><name>Victoria Drake</name></author><published>2019-10-21T09:09:06-04:00</published><updated>2019-10-21T09:09:06-04:00</updated><content type="html"><![CDATA[<p>Fun fact: I first launched this GitHub Pages site 1,018 days ago.</p>
<p>Since then, we&rsquo;ve grown together. From early cringe-worthy commit messages, through eighty-six versions of <a href="https://gohugo.io/">Hugo</a>, and up until last week, a less-than-streamlined multi-app continuous integration and deployment (CI/CD) workflow.</p>
<p>If you know me at all, you know I love to automate things. I&rsquo;ve been using a combination of AWS Lambda, Netlify, and Travis CI to automatically build and publish this site. My workflow for the task includes:</p>
<ul>
<li>Build with <a href="https://gohugo.io/">Hugo</a> on push to master, and on a schedule (Netlify and Lambda);</li>
<li>Optimize and resize images (Netlify);</li>
<li>Test with <a href="https://github.com/gjtorikian/html-proofer">HTMLProofer</a> (Travis CI); and</li>
<li>Deploy to my <a href="/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/">separate, public, GitHub Pages repository</a> (Netlify).</li>
</ul>
<p>Thanks to the introduction of GitHub Actions, I&rsquo;m able to do all the above with just one portable <a href="https://en.wikipedia.org/wiki/Makefile">Makefile</a>.</p>
<p>Next week I&rsquo;ll cover my Actions set up; today, I&rsquo;ll take you through the nitty-gritty of my Makefile so you can write your own.</p>
<h2 id="makefile-portability">Makefile portability</h2>
<p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html">POSIX-standard-flavour Make</a> runs on every Unix-like system out there. <a href="https://en.wikipedia.org/wiki/Make_(software)#Derivatives">Make derivatives</a>, such as <a href="https://www.gnu.org/software/make/">GNU Make</a> and several flavours of BSD Make also run on Unix-like systems, though their particular use requires installing the respective program. To write a truly portable Makefile, mine follows the POSIX standard. (For a more thorough summation of POSIX-compatible Makefiles, I found this article helpful: <a href="https://nullprogram.com/blog/2017/08/20/">A Tutorial on Portable Makefiles</a>.) I run Ubuntu, so I&rsquo;ve tested the portability aspect using the BSD Make programs <code>bmake</code>, <code>pmake</code>, and <code>fmake</code>. Compatibility with non-Unix-like systems is a little more complicated, since shell commands differ. With derivatives such as Nmake, it&rsquo;s better to write a separate Makefile with appropriate Windows commands.</p>
<p>While much of my particular use case could be achieved with shell scripting, I find Make offers some worthwhile advantages. I enjoy the ease of using variables and <a href="https://en.wikipedia.org/wiki/Make_(software)#Macros">macros</a>, and the modularity of <a href="https://en.wikipedia.org/wiki/Makefile#Rules">rules</a> when it comes to organizing my steps.</p>
<p>The writing of rules mostly comes down to shell commands, which is the main reason Makefiles are as portable as they are. The best part is that you can do pretty much <em>anything</em> in a terminal, and certainly handle all the workflow steps listed above.</p>
<h2 id="my-continuous-deployment-makefile">My continuous deployment Makefile</h2>
<p>Here&rsquo;s the portable Makefile that handles my workflow. Yes, I put emojis in there. I&rsquo;m a monster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span><span style="color:#a6e22e">.POSIX</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>DESTDIR<span style="color:#f92672">=</span>public
</span></span><span style="display:flex;"><span>HUGO_VERSION<span style="color:#f92672">=</span>0.58.3
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>OPTIMIZE <span style="color:#f92672">=</span> find <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span> -not -path <span style="color:#e6db74">&#34;*/static/*&#34;</span> <span style="color:#ae81ff">\(</span> -name <span style="color:#e6db74">&#39;*.png&#39;</span> -o -name <span style="color:#e6db74">&#39;*.jpg&#39;</span> -o -name <span style="color:#e6db74">&#39;*.jpeg&#39;</span> <span style="color:#ae81ff">\)</span> -print0 | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#960050;background-color:#1e0010">xargs</span> <span style="color:#960050;background-color:#1e0010">-0</span> <span style="color:#960050;background-color:#1e0010">-P8</span> <span style="color:#960050;background-color:#1e0010">-n2</span> <span style="color:#960050;background-color:#1e0010">mogrify</span> <span style="color:#960050;background-color:#1e0010">-strip</span> <span style="color:#960050;background-color:#1e0010">-thumbnail</span> <span style="color:#e6db74">&#39;1000&gt;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> all
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">all</span><span style="color:#f92672">:</span> get_repository clean get build test deploy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> get_repository
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">get_repository</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🛎 Getting Pages repository&#34;</span>
</span></span><span style="display:flex;"><span> git clone https://github.com/victoriadrake/victoriadrake.github.io.git <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> clean
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🧹 Cleaning old build&#34;</span>
</span></span><span style="display:flex;"><span> cd <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span> <span style="color:#f92672">&amp;&amp;</span> rm -rf *
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> get
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">get</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;❓ Checking for hugo&#34;</span>
</span></span><span style="display:flex;"><span> @if ! <span style="color:#f92672">[</span> -x <span style="color:#e6db74">&#34;</span>$$<span style="color:#e6db74">(command -v hugo)&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  echo <span style="color:#e6db74">&#34;🤵 Getting Hugo&#34;</span>;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>     wget -q -P tmp/ https://github.com/gohugoio/hugo/releases/download/v<span style="color:#66d9ef">$(</span>HUGO_VERSION<span style="color:#66d9ef">)</span>/hugo_extended_<span style="color:#66d9ef">$(</span>HUGO_VERSION<span style="color:#66d9ef">)</span>_Linux-64bit.tar.gz;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  tar xf tmp/hugo_extended_<span style="color:#66d9ef">$(</span>HUGO_VERSION<span style="color:#66d9ef">)</span>_Linux-64bit.tar.gz -C tmp/;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  sudo mv -f tmp/hugo /usr/bin/;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  rm -rf tmp/;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  hugo version;<span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> build
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">build</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🍳 Generating site&#34;</span>
</span></span><span style="display:flex;"><span> hugo --gc --minify -d <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🧂 Optimizing images&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">$(</span>OPTIMIZE<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> test
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">test</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🍜 Testing HTML&#34;</span>
</span></span><span style="display:flex;"><span> docker run -v <span style="color:#66d9ef">$(</span>GITHUB_WORKSPACE<span style="color:#66d9ef">)</span>/<span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span>/:/mnt 18fgsa/html-proofer mnt --disable-external
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">.PHONY</span><span style="color:#f92672">:</span> deploy
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">deploy</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🎁 Preparing commit&#34;</span>
</span></span><span style="display:flex;"><span> @cd <span style="color:#66d9ef">$(</span>DESTDIR<span style="color:#66d9ef">)</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git config user.email <span style="color:#e6db74">&#34;hello@victoria.dev&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git config user.name <span style="color:#e6db74">&#34;Victoria via GitHub Actions&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git add . <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git status <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git commit -m <span style="color:#e6db74">&#34;🤖 CD bot is helping&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> git push -f -q https://<span style="color:#66d9ef">$(</span>TOKEN<span style="color:#66d9ef">)</span>@github.com/victoriadrake/victoriadrake.github.io.git master
</span></span><span style="display:flex;"><span> @echo <span style="color:#e6db74">&#34;🚀 Site is deployed!&#34;</span>
</span></span></code></pre></div><p>Sequentially, this workflow:</p>
<ol>
<li>Clones the public Pages repository;</li>
<li>Cleans (deletes) the previous build files;</li>
<li>Downloads and installs the specified version of Hugo, if Hugo is not already present;</li>
<li>Builds the site;</li>
<li>Optimizes images;</li>
<li>Tests the built site with HTMLProofer, and</li>
<li>Prepares a new commit and pushes to the public Pages repository.</li>
</ol>
<p>If you&rsquo;re familiar with command line, most of this may look familiar. Here are a couple bits that might warrant a little explanation.</p>
<h3 id="checking-if-a-program-is-already-installed">Checking if a program is already installed</h3>
<p>I think this bit is pretty tidy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ! <span style="color:#f92672">[</span> -x <span style="color:#e6db74">&#34;</span>$$<span style="color:#e6db74">(command -v hugo)&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>I use a negated <code>if</code> conditional in conjunction with <code>command -v</code> to check if an executable (<code>-x</code>) called <code>hugo</code> exists. If one is not present, the script gets the specified version of Hugo and installs it. <a href="https://stackoverflow.com/a/677212">This Stack Overflow answer</a> has a nice summation of why <code>command -v</code> is a more portable choice than <code>which</code>.</p>
<h3 id="image-optimization">Image optimization</h3>
<p>My Makefile uses <code>mogrify</code> to batch resize and compress images in particular folders. It finds them automatically using the file extension, and only modifies images that are larger than the target size of 1000px in any dimension. I wrote more about the <a href="/blog/how-to-quickly-batch-resize-compress-and-convert-images-with-a-bash-one-liner/">batch-processing one-liner in this post</a>.</p>
<p>There are a few different ways to achieve this same task, one of which, theoretically, is to take advantage of Make&rsquo;s <a href="https://en.wikipedia.org/wiki/Make_(software)#Suffix_rules">suffix rules</a> to run commands only on image files. I find the shell script to be more readable.</p>
<h3 id="using-dockerized-htmlproofer">Using Dockerized HTMLProofer</h3>
<p>HTMLProofer is installed with <code>gem</code>, and uses Ruby and <a href="https://nokogiri.org/tutorials/ensuring_well_formed_markup.html">Nokogiri</a>, which adds up to a lot of installation time for a CI workflow. Thankfully, <a href="https://github.com/18F">18F</a> has a <a href="https://github.com/18F/html-proofer-docker">Dockerized version</a> that is much faster to implement. Its usage requires starting the container with the built site directory <a href="https://docs.docker.com/storage/volumes/#start-a-container-with-a-volume">mounted as a data volume</a>, which is easily achieved by appending to the <code>docker run</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker run -v /absolute/path/to/site/:/mounted-site 18fgsa/html-proofer /mounted-site
</span></span></code></pre></div><p>In my Makefile, I specify the absolute site path using the <a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables">default environment variable</a> <code>GITHUB_WORKSPACE</code>. I&rsquo;ll dive into this and other GitHub Actions features in the next post.</p>
<p>In the meantime, happy Making!</p>
]]></content></entry><entry><title type="html">Migrating to the cloud but without screwing it up, or how to move house</title><link href="https://victoria.dev/archive/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/"/><id>https://victoria.dev/archive/migrating-to-the-cloud-but-without-screwing-it-up-or-how-to-move-house/</id><author><name>Victoria Drake</name></author><published>2019-09-23T08:03:12-04:00</published><updated>2019-09-23T08:03:12-04:00</updated><content type="html"><![CDATA[<p>For an application that&rsquo;s ready to scale, not using managed cloud architecture these days is like insisting on digging your own well for water. It&rsquo;s far more labour-intensive, requires buying all your own equipment, takes a lot more time, and there&rsquo;s a higher chance you&rsquo;re going to get it wrong because you don&rsquo;t personally have a whole lot of experience digging wells, anyway.</p>
<p>That said - let&rsquo;s just get this out of the way first - there is no cloud. It&rsquo;s just someone else&rsquo;s computer.</p>
<p>Of course, these days, cloud services go far beyond the utility we&rsquo;d expect from a single computer. Besides being able to quickly set up and utilize the kind of computing power that previously required a new office lease agreement to house, there are now a multitude of monitoring, management, and analysis tools at our giddy fingertips. While it&rsquo;s important to understand that the cloud isn&rsquo;t a better option in every case, for applications that can take advantage of it, we can do more, do it faster, and do it for less money than if we were to insist on building our own on-premises infrastructure.</p>
<p>That&rsquo;s all great, and easily said; moving to the cloud, however, can look from the outset like a pretty daunting task. How, exactly, do we go about shifting what may be years of on-premises data and built-up systems to <em>someone else&rsquo;s computer?</em> You know, without being able to see it, touch it, and without completely screwing up our stuff.</p>
<p>While it probably takes less work and money than setting up or maintaining the same architecture on-premise, it does take some work to move to the cloud initially. It&rsquo;s important that our application is prepared to migrate, and capable of using the benefits of cloud services once it gets there. To accomplish this, and a smooth transition, preparation is key. In fact, it&rsquo;s a whole lot like moving to a new house.</p>
<p>In this article, we&rsquo;ll take a high-level look at the general stages of taking an on-premise or self-hosted application and moving it to the cloud. This guide is meant to serve as a starting point for designing the appropriate process for your particular situation, and to enable you to better understand the cloud migration process. While cloud migration may not be the best choice for some applications - such as ones without scalable architecture or where very high computing resources are needed - a majority of modular and modern applications stand to benefit from a move to the cloud.</p>
<p>It&rsquo;s certainly possible, as I discovered at a recent event put on by <a href="https://aws.amazon.com/">Amazon Web Services</a> (AWS) Solutions Architects, to migrate smoothly and efficiently, with near-zero loss of availability to customers. I&rsquo;ll specifically reference some services provided by AWS, however, similar functionality can be found with other cloud providers. I&rsquo;ve found the offerings from AWS to be pleasantly modular in scope, which is why I use them myself and why they make good examples for discussing general concepts.</p>
<p>To have our move go as smoothly as possible, here are the things we&rsquo;ll want to consider:</p>
<ol>
<li>The type of move we&rsquo;re making;</li>
<li>The things we&rsquo;ll take, and the things we&rsquo;ll clean up;</li>
<li>How to choose the right type and size for the infrastructure we&rsquo;re moving into; and</li>
<li>How to do test runs to practice for the big day.</li>
</ol>
<h2 id="the-type-of-move-were-making">The type of move we&rsquo;re making</h2>
<p>While it&rsquo;s important to understand why we&rsquo;re moving our application to cloud services, we should also have an idea of what we&rsquo;d like it to look like when it gets there. There are three main ways to move to the cloud: re-host, re-platform, or re-factor.</p>
<h3 id="re-host">Re-host</h3>
<p>A re-host scenario is the the most straightforward type of move. It involves no change to the way our application is built or how it runs. For example, if we currently have Python code, use PostgreSQL, and serve our application with Apache, a re-host move would mean we use all the same components, combined in just the same way, only now they&rsquo;re in the cloud. It&rsquo;s a lot like moving into a new house that has the exact same floor plan as the current one. All the furniture goes into the same room it&rsquo;s in now, and it&rsquo;s going to feel pretty familiar when we get there.</p>
<p>The main draw of a re-host move is that it may offer the least amount of complication necessary in order to take advantage of going to the cloud. Scalable applications, for example, can gain the ability to automatically manage necessary application resources.</p>
<p>While re-hosting makes scaling more automatic, it&rsquo;s important to note that it won&rsquo;t in itself make an application scalable. If the application infrastructure is not organized in such a way that gives it the ability to scale, a re-factor may be necessary instead.</p>
<h3 id="re-platform">Re-platform</h3>
<p>If a component of our current application set up isn&rsquo;t working out well for us, we&rsquo;re probably going to want to re-platform. In this case, we&rsquo;re making a change to at least one component of our architecture; for example, switching our database from Oracle to MySQL on <a href="https://aws.amazon.com/rds/">Amazon Relational Database Service</a> (RDS).</p>
<p>Like moving from a small apartment in Tokyo to an equally small apartment in New York, a re-platform doesn&rsquo;t change the basic nature of our application, but does change its appearance and environment. In the database change example, we&rsquo;ll have all the same data, just organized or formatted a little differently. In most cases, we won&rsquo;t have to make these changes manually. A tool such as <a href="https://aws.amazon.com/dms/">Amazon Database Migration Service</a> (DMS) can help to seamlessly shift our data over to the new database.</p>
<p>We might re-platform in order to enable us to better meet a business demand in the future, such as scaling up, integrating with other technological components, or choosing a more modern technology stack.</p>
<h3 id="re-factor">Re-factor</h3>
<p>A move in which we re-factor our application is necessarily more complicated than our other options, however, it may provide the most overall benefit for companies or applications that have reason to make this type of move. As with code, refactoring is done when fundamental changes need to be made in order for our application to meet a business need. The specifics necessarily differ case-by-case, but typically involve changes to architectural components or how those components relate to one another. This type of move may also involve changing application code in order to optimize the application&rsquo;s performance in a cloud environment. We can think of it like moving out from our parent&rsquo;s basement in the suburbs and getting a nice townhouse in the city. There&rsquo;s no way we&rsquo;re taking that ancient hand-me-down sofa, so we&rsquo;ll need some new furniture, and for our neighbour&rsquo;s sake, probably window dressings.</p>
<p>Refactoring may enable us to modernize a dated application, or make it more efficient in general. With greater efficiency, we can better take advantage of services that cloud providers typically offer, like bursting resources or attaining deep analytical insight.</p>
<p>If a re-factor is necessary but time is scarce, it may be better to re-host or re-platform first, then re-factor later. That way, we&rsquo;ll have a job well done later instead of a hasty, botched migration (and more problems) sooner.</p>
<h2 id="what-to-take-and-what-to-clean-up">What to take, and what to clean up</h2>
<p>Over the years of living in one place, stuff tends to pile up unnoticed in nooks and crannies. When moving house, it&rsquo;s usually a great opportunity to sort everything out and decide what is useful enough to keep, and what should be discarded or given away. Moving to the cloud is a similarly great opportunity to do the same when it comes to our application.</p>
<p>While cloud storage is inexpensive nowadays, there may be some things that don&rsquo;t make sense to store any longer, or at least not keep stored with our primary application. If data cannot be discarded due to policy or regulations, we may choose a different storage class to house data that we don&rsquo;t expect to need anytime soon outside of our main application.</p>
<p>In the case of <a href="https://aws.amazon.com/s3/">Amazon&rsquo;s Simple Storage Service</a> (S3), we can choose to use different <a href="https://aws.amazon.com/s3/storage-classes/">storage classes</a> that accomplish this goal. While the data that our business relies on every day can take advantage of the Standard class 99.99% availability, data meant for long-term cold storage such as archival backups can be put into the Glacier class, which has longer retrieval time and lower cost.</p>
<h2 id="the-right-type-and-size">The right type and size</h2>
<p>Choosing the type and size of cloud infrastructure appropriate for our business is usually the part that can be the most confusing. How should we predict, in a new environment or for a growing company, the computing power we&rsquo;ll need?</p>
<p>Part of the beauty of not procuring hardware on our own is that won&rsquo;t have to make predictions like these. Using cloud storage and instances, expanding or scaling back resources can be done in a matter of minutes, sometimes seconds. With managed services, it can even be done automatically for us. With the proper support for scalability in our application, it&rsquo;s like having a magical house that instantly generates any type of room and amenity we need at that moment. The ability to continually ensure that we&rsquo;re using appropriate, cost-effective resources is at our fingertips, and often clearly visualized in charts and dashboards.</p>
<p>For applications new to the cloud, some leeway for experimentation may be necessary. While cloud services enables us to quickly spin up and try out different architectures, there&rsquo;s no guarantee that all of those set ups will work well for our application. For example, running a single instance may be <a href="http://einaregilsson.com/serverless-15-percent-slower-and-eight-times-more-expensive/">less expensive than going serverless</a>, but we&rsquo;d be hard pressed to know this until we tried it out.</p>
<p>As a starting point, we simply need enough storage and computing power to support the application as it is currently running, today. For example, in the case of storage, consider the size of the current database - the actual database data, not the total storage capacity of hardware on-premises. For a detailed cost exploration, AWS even offers a <a href="https://calculator.s3.amazonaws.com/index.html">Simple Monthly Calculator</a> with use case samples to help guide expectations.</p>
<h2 id="do-test-runs-before-the-big-day">Do test runs before the big day</h2>
<p>Running a trial cloud migration may be an odd concept, but it is an essential component to ensuring that the move goes as planned with minimal service interruption. Imagine the time and energy that would be saved in the moving house example if we could automate test runs! Invariably, some box or still-hung picture is forgotten and left out of the main truck, necessitating additional trips in other vehicles. With multiple chances to ensure we&rsquo;ve got it down pat, we minimize the possibility that our move causes any break in normal day-to-day business.</p>
<p>Generally, to do a test run, we create a duplicate version of our application. The more we can duplicate, the more thorough the test run will be, especially if our data is especially large. Though duplication may seem tedious, working with the actual components we intend to migrate is essential to ensuring the migration goes as planned. After all, if we only did a moving-house test run with one box, it wouldn&rsquo;t be very representative.</p>
<p>Test runs can help to validate our migration plan against any challenges we may encounter. These challenges might include:</p>
<ul>
<li>Downtime restrictions;</li>
<li>Encrypting data in transit and immediately when at rest on the target;</li>
<li>Schema conversion to a new target schema (the <a href="https://aws.amazon.com/dms/schema-conversion-tool/">AWS Schema Conversion Tool</a> can also help);</li>
<li>Access to databases, such as through firewalls or VPNs;</li>
<li>Developing a process to ensure that all the data successfully migrated, such as by using a hash function.</li>
</ul>
<p>Test runs also help to give us a more accurate picture of the overall time that a migration will take, as well as affording us the opportunity to fine-tune it. Factors that may affect the overall speed of a migration include:</p>
<ul>
<li>The sizes of the source and target instances;</li>
<li>Available bandwidth for moving data;</li>
<li>Schema configurations; and</li>
<li>Transaction pressure on the source, such as changes to the data and the volume of incoming transactions.</li>
</ul>
<p>Once the duplicate application has been migrated via one or more <a href="https://aws.amazon.com/cloud-data-migration/">options</a>, we test the heck out of the application that&rsquo;s now running in the cloud to ensure it performs as expected. Ideally, on the big day, we&rsquo;d follow this same general process to move up-to-date duplicate data, and then seamlessly point the &ldquo;real&rdquo; application or web address to the new location in the cloud. This means that our customers experience near-zero downtime; essentially, only the amount of time that the change in location-pointing would need to propagate to their device.</p>
<p>In the case of very large or complex applications with many components or many teams working together at the same time, a more gradual approach may be more appropriate than the &ldquo;Big Bang&rdquo; approach, and may help to mitigate risk of any interruptions. This means migrating in stages, component by component, and running tests between stages to ensure that all parts of the application are communicating with each other as expected.</p>
<h2 id="preparation-is-essential-to-a-smooth-migration">Preparation is essential to a smooth migration</h2>
<p>I hope this article has enabled a more practical understanding of how cloud migration can be achieved. With thorough preparation, it&rsquo;s possible to take advantage of all the cloud has to offer, with minimal hassle to get there.</p>
<p>My thanks to the AWS Solutions Architects who presented at Pop-Up Loft and shared their knowledge on these topics, in particular: Chandra Kapireddy, Stephen Moon, John Franklin, Michael Alpaugh, and Priyanka Mahankali.</p>
<p>One last nugget of wisdom, courtesy of John: &ldquo;Friends don&rsquo;t let friends use DMS to create schema objects.&rdquo;</p>
]]></content></entry><entry><title type="html">How users and applications stay safe on the Internet: it&amp;#39;s proxy servers all the way down</title><link href="https://victoria.dev/archive/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/"/><id>https://victoria.dev/archive/how-users-and-applications-stay-safe-on-the-internet-its-proxy-servers-all-the-way-down/</id><author><name>Victoria Drake</name></author><published>2019-09-16T09:35:28-04:00</published><updated>2019-09-16T09:35:28-04:00</updated><content type="html"><![CDATA[<p>Both Internet users and Internet-connected applications can benefit from investing in cybersecurity. One core aspect of online privacy is the use of a proxy server, though this basic building block may not be initially visible underneath its more recognizable forms. Proxy servers are a useful thing to know about nowadays, for developers, software product owners, as well as the average dog on the Internet. Let&rsquo;s explore what makes proxy servers an important piece of cybersecurity support.</p>
<blockquote>
<p>&ldquo;On the Internet, nobody knows you&rsquo;re a dog.&rdquo;</p></blockquote>
<p>When <a href="https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you%27re_a_dog">Peter Steiner&rsquo;s caption</a> was first published in The New Yorker in 1993, it reportedly went largely unnoticed. Only later did the ominous and slightly frightening allusion to online anonymity touch the public consciousness with the icy fingers of the unknown. As Internet usage became more popular, users became concerned that other people could represent themselves online in any manner they chose, without anyone else knowing who they truly were.</p>
<p>This, to make a gross understatement, is no longer the case. Thanks to <a href="https://support.mozilla.org/en-US/kb/enable-and-disable-cookies-website-preferences">tracking cookies</a>, <a href="https://robertheaton.com/2017/10/17/we-see-you-democratizing-de-anonymization/">browser fingerprinting</a>, <a href="https://www.privacypolicies.com/blog/isp-tracking-you/">Internet Service Providers (ISPs) selling our browsing logs to advertisers</a>, and our own inexplicable inclination to put our names and faces on social networks, online anonymity is out like last year&rsquo;s LaCroix flavours. While your next-door neighbor may not know how to find you online (well, except for through that location-based secondhand marketplace app you&rsquo;re using), you can be certain that at least one large advertising company has a series of zeroes and ones somewhere that represent you, the specific details of your market demographic, and all your online habits, including your preferred flavour of LaCroix.</p>
<p>There are ways to add <em>some</em> layers of obscurity, like using a corporate firewall that hides your IP, or <a href="https://www.torproject.org/">using Tor</a>. The underlying mechanism of both these methods is the same. Like being enshrouded in the layers of an onion, we&rsquo;re using one or more <a href="https://en.wikipedia.org/wiki/Proxy_server">proxy servers</a> to shield our slightly sulfuric selves from third-party tracking.</p>
<h2 id="whats-a-proxy-server-anyway">What&rsquo;s a proxy server, anyway</h2>
<p>A proxy, in the traditional English definition, is the &ldquo;authority or power to act for another.&rdquo; (<a href="https://www.merriam-webster.com/dictionary/proxy">Merriam-Webster</a>) A proxy server, in the computing context, is a server that acts on behalf of another server, or a user&rsquo;s machine.</p>
<p>By using a proxy to browse the Internet, for example, a user can defer being personally identifiable. All of the user&rsquo;s Internet traffic appears to come from the proxy server instead of their machine.</p>
<h2 id="proxy-servers-are-for-users">Proxy servers are for users</h2>
<p>There are a few ways that we, as the client, can use a proxy server to conceal our identity when we go online. It&rsquo;s important to know that these methods offer differing levels of anonymity, and that no single method will really provide <em>true</em> anonymity; if others are actively seeking to find you on the Internet, for whatever reason, further steps should be taken to make your activity truly difficult to identify. (Those steps are beyond the scope of this article, but you can get started with the <a href="https://ssd.eff.org/">Electronic Frontier Foundation&rsquo;s (EFF) Surveillance Self-Defense</a> resource.) For the average user, however, here is a small menu of options ranging from least to most anonymous.</p>
<h3 id="use-a-proxy-in-your-web-browser">Use a proxy in your web browser</h3>
<p>Certain web browsers, including Firefox and Safari on Mac, allow us to configure them to send our Internet traffic through a proxy server. The proxy server attempts to <a href="https://en.wikipedia.org/wiki/Anonymizer">anonymize</a> our requests by replacing our originating IP address with the proxy server&rsquo;s own IP. This provides us with some anonymity, as the website we&rsquo;re trying to reach will not see our originating IP address; however, the proxy server that we choose to use will know exactly who originated the request. This method also doesn&rsquo;t necessarily encrypt traffic, block cookies, or stop social media and cross-site trackers from following us around; on the upside, it&rsquo;s the method least likely to prevent websites that use cookies from functioning properly.</p>
<p><img src="browser-proxy.png" alt="A cartoon of a proxy server guarding a browser"></p>
<p>Public proxy servers are out there, and deciding whether or not we should use any one of them is on par with deciding whether we should eat a piece of candy handed to us by a smiling stranger. If your academic institution or company provides a proxy server address, it is (hopefully) a private server with some security in place. My preferred method, if we have a little time and a few monthly dollars to invest in our security, is to set up our own virtual instance with a company such as <a href="https://aws.amazon.com/ec2/">Amazon Web Services</a> or <a href="https://www.digitalocean.com/products/droplets/">Digital Ocean</a> and use this as our proxy server.</p>
<p>To use a proxy through our browser, we can <a href="https://support.mozilla.org/en-US/kb/connection-settings-firefox">edit our Connection Settings in Firefox</a>, or <a href="https://support.apple.com/guide/safari/set-up-a-proxy-server-ibrw1053/mac">set up a proxy server using Safari on Mac</a>.</p>
<p>In regards to choosing a browser, I would happily recommend <a href="https://www.mozilla.org/en-US/firefox/new/">Firefox</a> to any Internet user who wants to beef up the security of their browsing experience right out of the box. Mozilla has been a champion of privacy-first since I&rsquo;ve heard of them, and recently made some well-received changes to <a href="https://blog.mozilla.org/blog/2019/06/04/firefox-now-available-with-enhanced-tracking-protection-by-default/">Enhanced Tracking Protection in Firefox Browser</a> that blocks social media trackers, cross-site tracking cookies, fingerprinters, and cryptominers by default.</p>
<h3 id="use-a-vpn-on-your-device">Use a VPN on your device</h3>
<p>In order to take advantage of a proxy server for all our Internet usage instead of just through one browser, we can use a Virtual Private Network (VPN). A VPN is a service, usually paid, that sends our Internet traffic through their servers, thus acting as a proxy. A VPN can be used on our laptop as well as phone and tablet devices, and since it encompasses all our Internet traffic, it doesn&rsquo;t require much extra effort to use other than ensuring our device is connected. Using a VPN is an effective way to keep nosy ISPs from snooping on our requests.</p>
<p><img src="vpn.png" alt="A cartoon depicting a private VPN"></p>
<p>To use a paid, third-party VPN service, we&rsquo;d usually sign up on their website and download their app. It&rsquo;s important to keep in mind that whichever provider we choose, we&rsquo;re entrusting them with our data. VPN providers anonymize our activity from the Internet, but can themselves see all our requests. Providers vary in terms of their privacy policies and the data they choose to log, so a little research may be necessary to determine which, if any, we are comfortable trusting.</p>
<p>We can also roll our own VPN service by using a virtual instance and <a href="https://openvpn.net/">OpenVPN</a>. OpenVPN is an open source VPN protocol, and can be used with a few virtual instance providers, such as <a href="https://openvpn.net/amazon-cloud/">Amazon VPC</a>, <a href="https://openvpn.net/microsoft-azure/">Microsoft Azure</a>, <a href="https://openvpn.net/google-cloud-vpn/">Google Cloud</a>, and <a href="https://openvpn.net/digital-ocean-vpn/">Digital Ocean Droplets</a>. I previously wrote a tutorial on <a href="/blog/how-to-set-up-openvpn-on-aws-ec2-and-fix-dns-leaks-on-ubuntu-18.04-lts/">setting up your own personal VPN service with AWS</a> using an EC2 instance. I&rsquo;ve been running this solution personally for about a month, and it&rsquo;s cost me almost $4 USD in total, which is a price I&rsquo;m quite comfortable paying for some peace of mind.</p>
<h3 id="use-tor">Use Tor</h3>
<p>Tor takes the anonymity offered by a proxy server and compounds it by forwarding our requests through a <a href="https://en.wikipedia.org/wiki/Relay_network">relay network</a> of other servers, each called a &ldquo;node.&rdquo; Our traffic passes through three nodes on its way to a destination: the <em>guard</em>, <em>middle</em>, and <em>exit</em> nodes. At each step, the request is encrypted and anonymized such that the current node only knows where to send it, and nothing more about what the request contains. This separation of knowledge means that, of the options discussed, Tor provides the most complete version of anonymity. (For a more complete explanation, see <a href="https://robertheaton.com/2019/04/06/how-does-tor-work/">Robert Heaton&rsquo;s article on how Tor works</a>, which is so excellently done that I wish I&rsquo;d written it myself.)</p>
<p><img src="tor.png" alt="Tor onion holding a Free Hugs sign"></p>
<p>That said, this level of anonymity comes with its own cost. Not monetary, as <a href="https://www.torproject.org/download/">Tor Browser</a> is free to download and use. It is, however, slower than using a VPN or simple proxy server through a browser, due to the circuitous route our requests take.</p>
<h2 id="proxy-servers-are-for-servers-too">Proxy servers are for servers too</h2>
<p>We&rsquo;re now familiar with proxy servers in the context of protecting users as they surf the web, but proxies aren&rsquo;t just for clients. Websites and Internet-connected applications can use <a href="https://en.wikipedia.org/wiki/Reverse_proxy">reverse proxy servers</a> for obfuscation too. The &ldquo;reverse&rdquo; part just means that the proxy is acting on behalf of the server, instead of the client.</p>
<p>Why would a web server care about anonymity? Generally, they don&rsquo;t, at least not in the same way some users do. Web servers can benefit from using a proxy for a few different reasons; for example, they typically offer faster service to users by <a href="https://en.wikipedia.org/wiki/Web_cache">caching</a> or <a href="https://en.wikipedia.org/wiki/HTTP_compression">compressing</a> content to optimize delivery. From a cybersecurity perspective, however, a reverse proxy can improve an application&rsquo;s security posture by obfuscating the underlying infrastructure.</p>
<p><img src="syllables.png" alt="A cartoon making fun of the big words I used"></p>
<p>Basically, by placing another web server (the &ldquo;proxy&rdquo;) in front of the web server that directly accesses all the files and assets, we make it more difficult for an attacker to pinpoint our &ldquo;real&rdquo; web server and mess with our stuff. Like when you want to see the store manager and the clerk you&rsquo;re talking to says, &ldquo;I speak for the manager,&rdquo; and you&rsquo;re not really sure there even <em>is</em> a manager, anyway, but you successfully exchange the hot pink My Little Pony they sold you for a <em>fuchsia</em> one, thankyouverymuch, so now you&rsquo;re no longer concerned with who the manager is and whether or not they really exist, and if you passed them on the street you would not be able to stop them and call them out for passing off hot pink as fuchsia, and the manager is just fine with that.</p>
<p>Some common web servers can also act as reverse proxies, often with just a minimal and straightforward configuration change. While the best choice for your particular architecture is unknown to me, I will offer a couple common examples here.</p>
<h3 id="using-nginx-as-a-reverse-proxy">Using NGINX as a reverse proxy</h3>
<p>NGINX uses the <code>proxy_pass</code> directive in its <a href="https://docs.nginx.com/nginx/admin-guide/basic-functionality/managing-configuration-files/">configuration file</a> (<code>nginx.conf</code> by default) to turn itself into a reverse proxy server. The set up requires the following lines to be placed in the configuration file:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">location /requested/path/ {
    proxy_pass http://www.example.com/target/path/;
}
</code></pre><p>This specifies that all requests for the path <code>/requested/path/</code> are forwarded to <code>http://www.example.com/target/path/</code>. The target can be a domain name or an IP address, the latter with or without a port.</p>
<p>The full <a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/">guide to using NGINX as a reverse proxy</a> is part of the NGINX documentation.</p>
<h3 id="using-apache-httpd-as-a-reverse-proxy">Using Apache httpd as a reverse proxy</h3>
<p>Apache httpd similarly requires some straightforward configuration to act as a reverse proxy server. In the <a href="https://httpd.apache.org/docs/current/configuring.html">configuration file</a>, usually <code>httpd.conf</code>, set the following directives:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">ProxyPass &#34;/requested/path/&#34;  &#34;http://www.example.com/target/path/&#34;
ProxyPassReverse &#34;/requested/path/&#34;  &#34;http://www.example.com/target/path/&#34;
</code></pre><p>The <code>ProxyPass</code> directive ensures that all requests for the path <code>/requested/path/</code> are forwarded to <code>http://www.example.com/target/path/</code>. The <code>ProxyPassReverse</code> directive ensures that the headers sent by the web server are modified to point to the reverse proxy server instead.</p>
<p>The full <a href="https://httpd.apache.org/docs/2.4/howto/reverse_proxy.html">reverse proxy guide for Apache HTTP server</a> is available in their documentation.</p>
<h2 id="proxy-servers-most-of-the-way-down">Proxy servers <em>most of</em> the way down</h2>
<p>I concede that my title is a little facetious, as cybersecurity best practices aren&rsquo;t really some eternal infinite-regression mystery (though they may sometimes seem to be). Regardless, I hope this post has helped in your understanding of what proxy servers are, how they contribute to online anonymity for both clients and servers, and that they are an integral building block of cybersecurity practices.</p>
<p>If you&rsquo;d like to learn more about personal best practices for online security, I highly recommend exploring the articles and resources provided by <a href="https://www.eff.org/">EFF</a>. For a guide to securing web sites and applications, the <a href="https://github.com/OWASP/CheatSheetSeries">OWASP Cheat Sheet Series</a> is a fantastic resource.</p>
]]></content></entry><entry><title type="html">Hackers are Googling your plain text passwords: preventing sensitive data exposure</title><link href="https://victoria.dev/archive/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/"/><id>https://victoria.dev/archive/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/</id><author><name>Victoria Drake</name></author><published>2019-09-09T09:10:11-04:00</published><updated>2019-09-09T09:10:11-04:00</updated><content type="html"><![CDATA[<p>Last week, I wrote about <a href="/blog/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/">the importance of properly handling user input</a> in our websites and applications. I alluded to an overarching security lesson that I hope to make explicit today: the security of our software, application, and customer data is built from the ground up, long before the product goes live.</p>
<p>The <a href="https://owasp.org/www-project-top-ten/">OWASP Top 10</a> is a comprehensive guide to web application security risks. It is relied upon by technology professionals, corporations, and those interested in cybersecurity or information security. The most recent publication lists Sensitive Data Exposure as the third most critical web application security risk. Here&rsquo;s how the risk is described:</p>
<blockquote>
<p>Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.</p></blockquote>
<p>&ldquo;Sensitive Data Exposure&rdquo; is a sort of catch-all category for leaked data resulting from many sources, ranging from weak cryptographic algorithms to unenforced encryption. The simplest source of this security risk, however, takes far fewer syllables to describe: people.</p>
<p>The phrase &ldquo;an ounce of prevention is worth a pound of cure,&rdquo; applies to medicine as well as secure software development. In the world of the latter, this is referred to as &ldquo;pushing left,&rdquo; a rather unintuitive term for establishing security best practices earlier, rather than later, in the software development life cycle (SDLC). Establishing procedures &ldquo;to the left&rdquo; of the SDLC can help ensure that the people involved in creating a software product are properly taking care of sensitive data from day one.</p>
<p>Unfortunately, a good amount of security testing often seems to occur much farther to the right side of the SDLC; too late for some security issues, such as sensitive data leakage, to be prevented.</p>
<p>I&rsquo;m one of the authors contributing to the upcoming <a href="https://github.com/OWASP/OWASP-Testing-Guide-v5">OWASP Testing Guide</a> and recently expanded a section on search engine discovery reconnaissance, or what the kids these days call &ldquo;Google dorking.&rdquo; This is one method, and arguably the most accessible method, by which a security tester (or black hat hacker) could find exposed sensitive data on the Internet. Here&rsquo;s an excerpt from that section (currently a work in progress on GitHub, to be released in v5):</p>
<blockquote>
<h3 id="search-operators">Search Operators</h3>
<p>A search operator is a special keyword that extends the capabilities of regular search queries, and can help obtain more specific results. They generally take the form of <code>operator:query</code>. Here are some commonly supported search operators:</p>
<ul>
<li><code>site:</code> will limit the search to the provided URL.</li>
<li><code>inurl:</code> will only return results that include the keyword in the URL.</li>
<li><code>intitle:</code> will only return results that have the keyword in the page title.</li>
<li><code>intext:</code> or <code>inbody:</code> will only search for the keyword in the body of pages.</li>
<li><code>filetype:</code> will match only a specific filetype, i.e. png, or php.</li>
</ul>
<p>For example, to find the web content of owasp.org as indexed by a typical search engine, the syntax required is:</p>
<p><code>site:owasp.org</code></p>
<p>&hellip;
Searching with operators can be a very effective discovery reconnaissance technique when combined with the creativity of the tester. Operators can be chained to effectively discover specific kinds of sensitive files and information. This technique, called <a href="https://en.wikipedia.org/wiki/Google_hacking">Google hacking</a> or Google dorking, is also possible using other search engines, as long as the search operators are supported.</p>
<p>A database of dorks, such as <a href="https://www.exploit-db.com/google-hacking-database">Google Hacking Database</a>, is a useful resource that can help uncover specific information.</p></blockquote>
<p>Regularly reviewing search engine results can be a fruitful task for security testers. However, when a search for <code>site:myapp.com passwords</code> turns up no results, it may still be a little too early to break for lunch. Here are a couple other places a security tester might like to look for sensitive data exposed in the wild.</p>
<h2 id="pastebin">Pastebin</h2>
<p>The self-declared &ldquo;#1 paste tool since 2002,&rdquo; <a href="https://pastebin.com">Pastebin</a> allows users to temporarily store any kind of text. It&rsquo;s mostly used for sharing information with others, or retrieving your own &ldquo;paste&rdquo; on another machine, perhaps in another location. Pastebin makes it easy to share large amounts of complicated text, like error logs, source code, configuration files, tokens, api keys&hellip; what&rsquo;s that? Oh, yes, it&rsquo;s public by default.</p>
<p>Here are some screenshots of a little dorking I did for a public bug bounty program.</p>
<figure class="screenshot"><img src="/archive/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/pastebin_apikey.png"
    alt="A screenshot of exposed api key in Google search"><figcaption>
      <p>API keys in plain view.</p>
    </figcaption>
</figure>

<figure class="screenshot"><img src="/archive/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/pastebin_pass.png"
    alt="A screenshot of exposed username and password in Google search"><figcaption>
      <p>Log-in details out in the open.</p>
    </figcaption>
</figure>

<p>Thanks in part to the convenience of using Pastebin and similar websites, it would appear that some people fail to think twice before making sensitive data publicly available.</p>
<h3 id="but-why">But why</h3>
<p>Granted, non-technical employees with access to the application may not have an understanding of which items should or should not be freely shared. Someone unfamiliar with what encrypted data is or what it looks like may not realize the difference between an encrypted string and an unencrypted token made up of many random letters and numbers. Even technical staff can miss things, make mistakes, or act carelessly after a hard day at work. It may be easy to call this a training problem and move on; however, none of these rationalizations address the root cause of the issue.</p>
<p>When people turn to outside solutions for an issue they face, it&rsquo;s usually because they haven&rsquo;t been provided with an equally-appealing internal solution, or are unaware that one exists. Employees using pastes to share or move sensitive data do so because they don&rsquo;t have an easier, more convenient, and secure internal solution to use instead.</p>
<h3 id="mitigation">Mitigation</h3>
<p>Everyone involved in the creation and maintenance of a web application should be briefed on a few basic things in regards to sensitive data protection:</p>
<ol>
<li>what constitutes sensitive data,</li>
<li>the difference between plain text and encrypted data, and</li>
<li>how to properly transmit and store sensitive data.</li>
</ol>
<p>When it comes to third-party services, ensure people are aware that some transmission may not be encrypted, or may be publicly searchable. If there is no system currently in place for safely sharing and storing sensitive data internally, this is a good place to start. The security of application data is in the hands of everyone on the team, from administrative staff to C-level executives. Ensure people have the tools they need to work securely.</p>
<h2 id="public-repositories">Public repositories</h2>
<p>Developers are notorious for leaving sensitive information hanging out where it doesn&rsquo;t belong (yes, I&rsquo;ve done it too!). Without a strong push-left approach in place for handling tokens, secrets, and keys, these little gems can end up in full public view on sites like GitHub, GitLab, and Bitbucket (to name a few). <a href="https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf">A 2019 study</a> found that thousands of new, unique secrets are leaked every day on GitHub alone.</p>
<figure class="screenshot"><img src="/archive/hackers-are-googling-your-plain-text-passwords-preventing-sensitive-data-exposure/github_tok.png"
    alt="A screenshot of a Google search for tokens on GitHub">
</figure>

<p>GitHub has implemented measures like <a href="https://github.blog/2018-10-17-behind-the-scenes-of-github-token-scanning/">token scanning</a>, and GitLab 11.9 <a href="https://docs.gitlab.com/ee/user/application_security/secret_detection/">introduced secret detection</a>. While these tools aim to reduce the chances that a secret might accidentally be committed, to put it bluntly, it&rsquo;s really not their job. Secret scanning won&rsquo;t stop developers from committing the data in the first place.</p>
<h3 id="but-why-1">But why</h3>
<p>Without an obvious process in place for managing secrets, developers may tend too much towards their innate sense of just-get-it-done-ness. Sometimes this leads to the expedient but irresponsible practice of storing keys as unencrypted variables within the program, perhaps with the intention of it being temporary. Nonetheless, these variables inevitably fall from front of mind and end up in a commit.</p>
<h3 id="mitigation-1">Mitigation</h3>
<p>Having a strong push-left culture means ensuring that sensitive data is properly stored and can be securely retrieved long before anyone is ready to make a commit. Tools and strategies for doing so are readily available for those who seek them. Here are some examples of tools that can support a push-left approach:</p>
<ul>
<li>Use a management tool to store and control access to keys and secrets, such as <a href="https://aws.amazon.com/kms/">Amazon Key Management Service</a> or Microsoft&rsquo;s <a href="https://azure.microsoft.com/en-us/services/key-vault/">Azure Key Vault</a>.</li>
<li>Make use of encrypted environment variables in CI tools, such as <a href="https://www.netlify.com/docs/continuous-deployment/#environment-variables">Netlify&rsquo;s environment variables</a> or <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets">virtual environments in GitHub Actions</a>.</li>
<li>Craft a robust <code>.gitignore</code> file that everyone on the team can contribute to and use.</li>
</ul>
<p>We also need not rely entirely on the public repository to catch those mistakes that may still slip through. It&rsquo;s possible to set up Git pre-commit hooks that scan for committed secrets using <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expressions</a>. There are some open-source programs available for this, such as <a href="https://github.com/thoughtworks/talisman">Talisman from ThoughtWorks</a> and <a href="https://github.com/awslabs/git-secrets">git-secrets from AWS Labs</a>.</p>
<h2 id="pushing-left-to-prevent-sensitive-data-exposure">Pushing left to prevent sensitive data exposure</h2>
<p>A little perspective can go a long way in demonstrating why it&rsquo;s important to begin managing sensitive data even before any sensitive data exists. By establishing security best practices on the left of the SDLC, we give our people the best chance to increase the odds that any future dorking on our software product looks more like this.</p>
<p><img src="no_results.png#screenshot" alt="No results found in Google Search"></p>
<p>Another great resource for checking up on the security of our data is Troy Hunt&rsquo;s <a href="https://haveibeenpwned.com/">Have I Been Pwned</a>, a service that compares your data (such as your email) to data that has been leaked in previous data breaches.</p>
<p>To learn about more ways we can be proactive with our application security, the <a href="https://owasp.org/www-project-proactive-controls/">OWASP Proactive Controls</a> publication is a great resource. There&rsquo;s also more about creating a push-left approach to security in the upcoming <a href="https://github.com/OWASP/OWASP-Testing-Guide-v5">OWASP Testing Guide</a>. If these topics interest you, I encourage you to read, learn, and contribute so more people will make it harder for sensitive data to be found.</p>
]]></content></entry><entry><title type="html">SQL injection and XSS: what white hat hackers know about trusting user input</title><link href="https://victoria.dev/archive/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/"/><id>https://victoria.dev/archive/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/</id><author><name>Victoria Drake</name></author><published>2019-09-02T09:01:23-04:00</published><updated>2019-09-02T09:01:23-04:00</updated><content type="html"><![CDATA[<p>Software developers have a lot on their minds. There are are myriad of questions to ask when it comes to creating a website or application: <em>What technologies will we use? How will the architecture be set up? What functions do we need? What will the UI look like?</em> Especially in a software market where shipping new apps seems more like a race for reputation than a well-considered process, one of the most important questions often falls to the bottom of the &ldquo;Urgent&rdquo; column: how will our product be secured?</p>
<p>If you&rsquo;re using a robust, open-source framework for building your product (and if one is applicable and available, why wouldn&rsquo;t you?) then some basic security concerns, like CSRF tokens and password encryption, may already be handled for you. Still, fast-moving developers would be well served to brush up on their knowledge of common threats and pitfalls, if only to avoid some embarrass
ing rookie mistakes. Usually, the weakest point in the security of your software is <em>you.</em></p>
<p>I&rsquo;ve recently become more interested in information security in general, and practicing ethical hacking in particular. An ethical hacker, sometimes called &ldquo;white hat&rdquo; hacker, and sometimes just &ldquo;hacker,&rdquo; is someone who searches for possible security vulnerabilities and responsibly (privately) reports them to project owners. By contrast, a malicious or &ldquo;black hat&rdquo; hacker, also called a &ldquo;cracker,&rdquo; is someone who exploits these vulnerabilities for amusement or personal gain. Both white hat and black hat hackers might use the same tools and resources, and generally try to get into places they aren&rsquo;t supposed to be; however, white hats do this with permission, and with the intention of fortifying defences instead of destroying them. Black hats are the bad guys.</p>
<p>When it comes to learning how to find security vulnerabilities, it should come as no surprise that I&rsquo;ve been devouring whatever information I can get my hands on; this post is a distillation of some key areas that are specifically helpful to developers when handling user input. These lessons have been collectively gleaned from these excellent resources:</p>
<ul>
<li>The <a href="https://owasp.org/">Open Web Application Security Project</a> guides</li>
<li>The Hacker101 playlist from <a href="https://www.youtube.com/channel/UCsgzmECky2Q9lQMWzDwMhYw/">HackerOne&rsquo;s YouTube channel</a></li>
<li><a href="https://leanpub.com/web-hacking-101">Web Hacking 101</a> by Peter Yaworski</li>
<li><a href="https://brutelogic.com.br/blog/">Brute Logic&rsquo;s blog</a></li>
<li>The <a href="https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA">Computerphile</a> YouTube channel</li>
<li>Videos featuring Jason Haddix (<a href="https://github.com/jhaddix/">@jhaddix</a>) and Tom Hudson (<a href="https://github.com/tomnomnom/">@tomnomnom</a>) (two accomplished ethical hackers with different, but both effective, methodologies)</li>
</ul>
<p>You may be familiar with the catchphrase, &ldquo;sanitize your inputs!&rdquo; However, as I hope this post demonstrates, developing an application with robust security isn&rsquo;t quite so straightforward. I suggest an alternate phrase: pay attention to your inputs. Let&rsquo;s elaborate by examining the most common attacks that take advantage of vulnerabilities in this area: SQL injection and cross site scripting.</p>
<h2 id="sql-injection-attacks">SQL injection attacks</h2>
<p>If you&rsquo;re not yet familiar with SQL (Structured Query Language) injection attacks, or SQLi, here is a great <a href="https://www.youtube.com/watch?v=_jKylhJtPmI">explain-like-I&rsquo;m-five video on SQLi</a>. You may already know of this attack from <a href="https://xkcd.com/327/">xkcd&rsquo;s Little Bobby Tables</a>. Essentially, malicious actors may be able to send SQL commands that affect your application through some input on your site, like a search box that pulls results from your database. Sites coded in PHP can be especially susceptible to these, and a successful SQL attack can be devastating for software that relies on a database (as in, your Users table is now a pot of petunias).</p>
<figure class="center"><img src="/archive/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/sqli.png"
    alt="A monitor with an SQL Select command that gets all your base"><figcaption>
      <p>You have no chance to survive make your time.</p>
    </figcaption>
</figure>

<p>You can test your own site to see if you&rsquo;re susceptible to this kind of attack. (Please only test sites that you own, since running SQL injections where you don&rsquo;t have permission to be doing so is, possibly, illegal in your locality; and definitely, universally, not very funny.) The following payloads can be used to test inputs:</p>
<ul>
<li><code>' OR 1='1</code> evaluates to a constant true, and when successful, returns all rows in the table.</li>
<li><code>' AND 0='1</code> evaluates to a constant false, and when successful, returns no rows.</li>
</ul>
<p><a href="https://www.youtube.com/watch?v=ciNHn38EyRc">This video demonstrates the above tests</a>, and does a great job of showing how impactful an SQL injection attack can be.</p>
<p>Thankfully, there are ways to mitigate SQL injection attacks, and they all boil down to one basic concept: don&rsquo;t trust user input.</p>
<h2 id="sql-injection-mitigation">SQL injection mitigation</h2>
<p>In order to effectively mitigate SQL injections, developers must prevent users from being able to successfully submit raw SQL commands to any part of the site.</p>
<p>Some frameworks will do most of the heavy lifting for you. For example, Django implements the concept of <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">Object-Relational Mapping</a>, or ORM, with its use of <a href="https://docs.djangoproject.com/en/2.2/topics/db/queries/">QuerySets</a>. We can think of these as wrapper functions that help your application query the database using pre-defined methods that avoid the use of raw SQL.</p>
<p>Being able to use a framework, however, is never a guarantee. When dealing directly with a database, there are other methods we can use to safely abstract our SQL queries from user input, though they vary in efficacy. These are, by order of most to least preferred, and with links to relevant examples:</p>
<ol>
<li>Prepared statements with variable binding (or <a href="https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html">parameterized queries</a>),</li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-2-stored-procedures">Stored procedures</a>; and</li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-3-whitelist-input-validation">Whitelisting</a> or <a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html#defense-option-4-escaping-all-user-supplied-input">escaping</a> user input.</li>
</ol>
<p>If you want to implement the above techniques, the linked cheatsheets are a great starting point for digging deeper. Suffice to say, the use of these techniques to obtain data instead of using raw SQL queries helps to minimize the chances that SQL will be processed by any part of your application that takes input from users, thus mitigating SQL injection attacks.</p>
<p>The battle, however, is only half won&hellip;</p>
<h2 id="cross-site-scripting-xss-attacks">Cross Site Scripting (XSS) attacks</h2>
<p>If you&rsquo;re a malicious coder, JavaScript is pretty much your best friend. The right commands will do anything a legitimate user could do (and even some things they aren&rsquo;t supposed to be able to) on a web page, sometimes without any interaction on the part of an actual user. <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">Cross Site Scripting</a> attacks, or XSS, occur when JavaScript code is injected into a web page and changes that page&rsquo;s behavior. Its effects can range from prank nuisance occurrences to more severe authentication bypasses or credential stealing.</p>
<figure><img src="/archive/sql-injection-and-xss-what-white-hat-hackers-know-about-trusting-user-input/xss.png"
    alt="An HTML dance party with a little JS cutting in"><figcaption>
      <p>The annual DOM dance-off receives an unexpected guest);</p>
    </figcaption>
</figure>

<p>XSS can occur on the server or on the client side, and generally comes in three flavors: DOM (<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">Document Object Model</a>) based, stored, and reflected XSS. The differences amount to where the attack payload is injected into the application.</p>
<h3 id="dom-based-xss">DOM-based XSS</h3>
<p><a href="https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting">DOM-based XSS</a> occurs when a JavaScript payload affects the structure, behavior, or content of the web page the user has loaded in their browser. These are most commonly executed through modified URLs, such as in phishing.</p>
<p>To see how easy it would be for injected JavaScript to manipulate a page, we can create a working example with an HTML web page. Try creating a file on your local system called <code>xss-test.html</code> (or whatever you like) with the following HTML and JavaScript code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">title</span>&gt;My XSS Example&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">h1</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;greeting&#34;</span>&gt;Hello there!&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URLSearchParams</span>(document.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">search</span>).<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;name&#39;</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">name</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;null&#39;</span>) {
</span></span><span style="display:flex;"><span>                    document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;greeting&#39;</span>).<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Hello &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;!&#39;</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>This web page will display the title &ldquo;Hello there!&rdquo; unless it receives a <a href="https://en.wikipedia.org/wiki/Query_string">URL parameter from a query string</a> with a value for <code>name</code>. To see the script work, open the page in a browser with an appended URL parameter, like so:</p>
<p><code>file:///path/to/file/xss-test.html?name=Victoria</code></p>
<p>Fun, right? Our insecure (in the safety sense, not the emotional one) page takes the URL parameter value for <code>name</code> and displays it in the DOM. The page is expecting the value to be a nice friendly string, but what if we change it to something else? Since the page is owned by us and only exists on our local system, we can test it all we like. What happens if we change the <code>name</code> parameter to, say, <code>&lt;img+src+onerror=alert(&quot;pwned&quot;)&gt;</code>?</p>
<p><img src="pwned.png#screenshot" alt="A screenshot of the XSS page example"></p>
<p>This is just one example, largely based on one from <a href="https://brutelogic.com.br/blog/dom-based-xss-the-3-sinks/">Brute&rsquo;s post</a>, that demonstrates how an XSS attack could be executed. Funny pop-up alerts may be amusing, but JavaScript can do a lot of harm, including helping malicious attackers steal passwords and personal information.</p>
<h3 id="stored-and-reflected-xss">Stored and reflected XSS</h3>
<p><a href="https://en.wikipedia.org/wiki/Cross-site_scripting#Persistent_(or_stored)">Stored XSS</a> occurs when the attack payload is stored on the server, such as in a database. The attack affects a victim whenever that stored data is retrieved and rendered in the browser. For example, instead of using a URL query string, an attacker might update their profile page on a social site to include a hidden script in, say, their &ldquo;About Me&rdquo; section. The script, improperly stored on the site&rsquo;s server, would successfully execute at a later time when another user views the attacker&rsquo;s profile.</p>
<p>One of the most famous examples of this is the <a href="https://en.wikipedia.org/wiki/Samy_(computer_worm)">Samy worm</a> that all but took over MySpace in 2005. It propagated by sending HTTP requests that replicated it onto a victim&rsquo;s profile page whenever an infected profile was viewed. Within just 20 hours, it had spread to over a million users.</p>
<p><a href="https://en.wikipedia.org/wiki/Cross-site_scripting#Non-persistent_(reflected)">Reflected XSS</a> similarly occurs when the injected payload travels to the server, however, the malicious code does not end up stored in a database. It is instead immediately returned to the browser by the web application. An attack like this might be executed by luring the victim to click a malicious link that sends a request to the vulnerable website&rsquo;s server. The server would then send a response to the attacker as well as the victim, which may result in the attacker being able to obtain passwords, or perpetrate actions that appear to originate from the victim.</p>
<h2 id="xss-attack-mitigation">XSS attack mitigation</h2>
<p>In all of these cases, XSS attacks can be mitigated with two key strategies: validating form fields, and avoiding the direct injection of user input on the web page.</p>
<h3 id="validating-form-fields">Validating form fields</h3>
<p>Frameworks can again help us out when it comes to making sure that user-submitted forms are on the up-and-up. One example is <a href="https://docs.djangoproject.com/en/2.2/ref/forms/fields/#built-in-field-classes">Django&rsquo;s built-in <code>Field</code> classes</a>, which provide fields that validate to some commonly used types and also specify sane defaults. Django&rsquo;s <code>EmailField</code>, for instance, uses a set of rules to determine if the input provided is a valid email. If the submitted string has characters in it that are not typically present in email addresses, or if it doesn&rsquo;t imitate the common format of an email address, then Django won&rsquo;t consider the field valid and the form will not be submitted.</p>
<p>If relying on a framework isn&rsquo;t an option, we can implement our own input validation. This can be accomplished with a few different techniques, including <a href="https://en.wikipedia.org/wiki/Type_conversion">type conversion</a>, for example, ensuring that a number is of type <code>int()</code>; checking minimum and maximum range values for numbers and lengths for strings; using a pre-defined array of choices that avoids arbitrary input, for example, months of the year; and checking data against strict <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expressions</a>.</p>
<p>Thankfully, we needn&rsquo;t start from scratch. Open source resources are available to help, such as the <a href="https://owasp.org/www-community/OWASP_Validation_Regex_Repository">OWASP Validation Regex Repository</a>, which provides patterns to match against for some common forms of data. Many programming languages offer validation libraries specific to their syntax, and we can find <a href="https://github.com/search?q=validation+library">plenty of these on GitHub</a>. Additionally, the <a href="https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html">XSS Filter Evasion Cheat Sheet</a> has a couple suggestions for test payloads we can use to test our existing applications.</p>
<p>While it may seem tedious, properly implemented input validation can protect our application from being susceptible to XSS.</p>
<h3 id="avoiding-direct-injection">Avoiding direct injection</h3>
<p>Elements of an application that directly return user input to the browser may not, on a casual inspection, be obvious. We can determine areas of our application that may be at risk by exploring a few questions:</p>
<ul>
<li>How does data flow through our application?</li>
<li>What does a user expect to happen when they interact with this input?</li>
<li>Where on our page does data appear? Does it become embedded in a string or an attribute?</li>
</ul>
<p>Here are some sample payloads that we can play with in order to test inputs on our site (again, only our own site!) courtesy of <a href="https://www.hacker101.com/">Hacker101</a>. The successful execution of any of these samples can indicate a possible XSS vulnerability due to direct injection.</p>
<ul>
<li><code>&quot;&gt;&lt;h1&gt;test&lt;/h1&gt;</code></li>
<li><code>'+alert(1)+'</code></li>
<li><code>&quot;onmouserover=&quot;alert(1)</code></li>
<li><code>http://&quot;onmouseover=&quot;alert(1)</code></li>
</ul>
<p>As a general rule, if you are able to design around directly injecting input, do so. Alternatively, be sure to completely understand the effect of the methods you choose; for example, using <code>innerText</code> instead of <code>innerHTML</code> in JavaScript will ensure that content will be set as plain text instead of (potentially vulnerable) HTML.</p>
<h2 id="pay-attention-to-your-inputs">Pay attention to your inputs</h2>
<p>Software developers are at a marked disadvantage when it comes to competing with black hat, or malicious, hackers. For all the work we do to secure each and every input that could potentially compromise our application, an attacker need only find the one we missed. It&rsquo;s like installing deadbolts on all the doors, but leaving a window open!</p>
<p>By learning to think along the same lines as an attacker, however, we can better prepare our software to stand up against bad actors. Exciting as it may be to ship features as quickly as possible, we&rsquo;ll avoid racking up a lot of security debt if we take the time beforehand to think through our application&rsquo;s flow, follow the data, and pay attention to our inputs.</p>
]]></content></entry><entry><title type="html">A quick guide to changing your GitHub username</title><link href="https://victoria.dev/posts/a-quick-guide-to-changing-your-github-username/"/><id>https://victoria.dev/posts/a-quick-guide-to-changing-your-github-username/</id><author><name>Victoria Drake</name></author><published>2019-07-28T15:19:13-04:00</published><updated>2019-07-28T15:19:13-04:00</updated><content type="html"><![CDATA[<p>This being the 2,38947234th and probably last time I&rsquo;ll change my username, (marriage is permanent, right?) I thought I&rsquo;d better write a quick post on how this transition can be achieved as smoothly as possible. You can read <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-user-account-settings/changing-your-github-username">official instructions on how to change your GitHub username</a> here, and they will tell you how to do it and what happens. The following is a quick guide to some things to consider <em>afterwards.</em></p>
<h2 id="where-to-make-changes">Where to make changes</h2>
<ol>
<li>Change username in <a href="https://github.com/settings/admin">GitHub account settings.</a></li>
<li>If using GitHub Pages, change name of your &ldquo;username.github.io&rdquo; repository.</li>
<li>If using other services that point to your &ldquo;username.github.io&rdquo; repository address, update them.</li>
<li>If using Netlify, you <em>may</em> want to sign in and reconnect your repositories. (Mine still worked, but due to a possibly unrelated issue, I&rsquo;m not positive.)</li>
<li>Sign in to Travis CI and other integrations (find them in your repository Settings tab -&gt; Integrations &amp; services). This will update your username there.</li>
<li>Update your local files and repository links with <em>very carefully executed</em> <code>find</code> and <code>sed</code> commands, and push back changes to GitHub.</li>
<li>Redeploy any websites you may have with your updated GitHub link.</li>
<li>Fix any links around the web to your profile, your repositories, or Gists you may have shared.</li>
</ol>
<h2 id="local-file-updates">Local file updates</h2>
<p>Here are some suggestions for strings to search and replace your username in.</p>
<ul>
<li><code>github.com/username</code> (References to your GitHub page in READMEs or in website copy)</li>
<li><code>username.github.io</code> (Links to your GitHub Page)</li>
<li><code>git@github.com:username</code> (Git config remote ssh urls)</li>
<li><code>travis-ci.com/username</code> (Travis badges in READMEs)</li>
<li><code>shields.io/github/.../username</code> (Shields badges in READMEs, types include <code>contributors</code>, <code>stars</code>, <code>tags</code>, and more)</li>
</ul>
<p>You can quickly identify where the above strings are located using this command for each string:</p>
<p><code>grep -rnw -e 'foobar'</code></p>
<p>This will recursively (<code>r</code>) search all files for strings matching the whole (<code>w</code>) pattern (<code>e</code>) provided and prefix results with the line numbers (<code>n</code>) so you can easily find them.</p>
<p>Using <code>find</code> and <code>sed</code> can make these changes much faster. See <a href="/posts/how-to-replace-a-string-in-a-dozen-old-blog-posts-with-one-sed-terminal-command/">this article on search and replace</a>.</p>
<p>Enjoy your new handle! (I hope it sticks.)</p>
]]></content></entry><entry><title type="html">Moving to a new domain without breaking old links with AWS &amp;amp; Disqus</title><link href="https://victoria.dev/archive/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/"/><id>https://victoria.dev/archive/moving-to-a-new-domain-without-breaking-old-links-with-aws-disqus/</id><author><name>Victoria Drake</name></author><published>2018-01-10T08:56:20-05:00</published><updated>2018-01-10T08:56:20-05:00</updated><content type="html"><![CDATA[<p>I started blogging about my nomadic travels last year, and so far the habit has stuck. Like all side projects, I won&rsquo;t typically invest heavily in setting up web properties before I can be reasonably certain that such an investment is worth my time or enjoyment. In other words: don&rsquo;t buy the domain until you&rsquo;ve proven to yourself that you&rsquo;ll stick with it!</p>
<p>After some months of regular posting I felt I was ready to commit (short courtship, I know, but we&rsquo;re all adults here) and I bought a dedicated domain, <a href="https://heronebag.com">herOneBag.com</a>.</p>
<p>Up until recently, my #NomadLyfe blog was just a subdirectory of my main personal site. Now it&rsquo;s all grown up and ready to strike out into the world alone! Here&rsquo;s the setup for the site:</p>
<ul>
<li>Static site in Amazon Web Services S3 bucket</li>
<li>Route 53 handling the DNS</li>
<li>CloudFront for distribution and a custom SSL certificate</li>
<li>Disqus for comments</li>
</ul>
<p>If you&rsquo;d like a walk-through for how to set up a new domain with this structure, it&rsquo;s over here: <a href="https://victoria.dev/verbose/aws-static-site/">Hosting your static site with AWS S3, Route 53, and CloudFront</a>. In this post, I&rsquo;ll just detail how I managed to move my blog to the new site without breaking the old links or losing any comments.</p>
<h2 id="preserve-old-links-with-redirection-rules">Preserve old links with redirection rules</h2>
<p>I wanted to avoid breaking links that have been posted around the web by forwarding visitors to the new URL. The change looks like this:</p>
<p>Old URL: <code>https://victoria.dev/meta/5-bag-lessons/</code></p>
<p>New URL: <code>https://heronebag.com/blog/5-bag-lessons/</code></p>
<p>You can see that the domain name as well as the subdirectory have changed, but the slug for the blog post remains the same. (I love static sites.)</p>
<p>To redirect links from the old site, we&rsquo;ll need to set redirection rules in the old site&rsquo;s S3 bucket. AWS provides a way to set up a conditional redirect. This is set in the &ldquo;Redirection rules&rdquo; section of your S3 bucket&rsquo;s properties, under &ldquo;Static website hosting.&rdquo; You can <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects">find the documentation here.</a></p>
<p><img src="aws-redirect.png#screenshot" alt="Redirection rules placement"></p>
<p>There are a few examples given, but none that represent the redirect I want. In addition to changing the prefix of the object key, we&rsquo;re also changing the domain. The latter is achieved with the <code>&lt;HostName&gt;</code> tag.</p>
<p>To redirect requests for the old blog URL to the new top level domain, we&rsquo;ll use the code below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;RoutingRules&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;RoutingRule&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;Condition&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;KeyPrefixEquals&gt;</span>oldblog/<span style="color:#f92672">&lt;/KeyPrefixEquals&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/Condition&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;Redirect&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;HostName&gt;</span>newdomain.com<span style="color:#f92672">&lt;/HostName&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;ReplaceKeyPrefixWith&gt;</span>newblog/<span style="color:#f92672">&lt;/ReplaceKeyPrefixWith&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/Redirect&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/RoutingRule&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/RoutingRules&gt;</span>
</span></span></code></pre></div><p>This rule ensures that requests for <code>olddomain.com/oldblog/specific-blog-post</code> will redirect to <code>newdomain.com/newblog/specific-blog-post</code>.</p>
<h2 id="migrate-disqus-comments">Migrate Disqus comments</h2>
<p>Disqus provides a tool for migrating the comment threads from your old blog site to the new one. You can find it in your Disqus admin tools at <code>your-short-name.disqus.com/admin/discussions/migrate/</code>.</p>
<p>To migrate posts from the old blog address to the new one, we&rsquo;ll use the URL mapper tool. Click &ldquo;Start URL mapper,&rdquo; then &ldquo;you can download a CSV here.&rdquo;</p>
<p><img src="aws-disqus.png#screenshot" alt="URL mapping for Disqus."></p>
<p>Disqus has decent instructions for how this tool works, and you can <a href="https://help.disqus.com/customer/en/portal/articles/912757-url-mapper">read them here.</a> Basically, you&rsquo;ll input the new blog URLs into the second column of the CSV file you downloaded, then pass it back to Disqus to process. If you&rsquo;re using a program to edit the CSV, be sure to save the resulting file in CSV format.</p>
<p>Unless you have a bazillion URLs, the tool works pretty quickly, and you&rsquo;ll get an email when it&rsquo;s finished. Don&rsquo;t forget to update the name of your site in the Disqus admin, too.</p>
<h2 id="transfer-other-settings">Transfer other settings</h2>
<p>Update links in your social profiles and any other sites you may have around the web. If you&rsquo;re using other services attached to your website like Google Analytics or IFTTT, don&rsquo;t forget to update those details too!</p>
]]></content></entry><entry><title type="html">Hosting your static site with AWS S3, Route 53, and CloudFront</title><link href="https://victoria.dev/archive/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/"/><id>https://victoria.dev/archive/hosting-your-static-site-with-aws-s3-route-53-and-cloudfront/</id><author><name>Victoria Drake</name></author><published>2017-12-13T20:46:12-05:00</published><updated>2020-11-14T20:46:12-05:00</updated><content type="html"><![CDATA[<p>Some time ago I decided to stop freeloading on GitHub pages and move one of my sites to Amazon Web Services (AWS). It turns out that I&rsquo;m still mostly freeloading (yay free tier) so it amounted to a learning experience. Here are the components that let me host and serve the site at my custom domain with HTTPS.</p>
<ul>
<li>Static site in Amazon Web Services S3 bucket</li>
<li>Route 53 handling the DNS</li>
<li>CloudFront for distribution and a custom SSL certificate</li>
</ul>
<p>I set all that up most of a year ago. At the time, I found the AWS documentation to be rather fragmented and inconvenient to follow - it was hard to find what you were looking for without knowing what a specific setting might be called, or where it was, or if it existed at all. When I recently set up a new site and stumbled through this process again, I didn&rsquo;t find it any easier. Hopefully this post can help to collect the relevant information into a more easily followed process and serve as an accompanying guide to save future me (and you) some time.</p>
<p>Rather than replace existing documentation, this post is meant to supplement it. Think of me as your cool tech-savvy friend on the phone with you at 4am, troubleshooting your website. (Please don&rsquo;t actually call me at 4am.) I&rsquo;ll walk through the set up while providing links for the documentation that was ultimately helpful (mostly so I can find it again later&hellip;).</p>
<h2 id="hosting-a-static-site-with-amazon-s3-and-a-custom-domain">Hosting a static site with Amazon S3 and a custom domain</h2>
<p>If you&rsquo;re starting from scratch, you&rsquo;ll need an AWS account. It behooves you to get one, even if you don&rsquo;t like paying for services - there&rsquo;s a free tier that will cover most of the experimental stuff you&rsquo;re going to want to do in the first year, and even the things I do pay for cost me less than a dollar a month. You can sign up at <a href="https://aws.amazon.com/free">https://aws.amazon.com/free</a>.</p>
<p>Getting your static site hosted and available at your custom domain is your first mission, should you choose to accept it. <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html">Your instructions are here.</a></p>
<p>Creating the buckets for site hosting on S3 is the most straightforward part of this process in my opinion, and the AWS documentation walkthrough covers what you&rsquo;ll need to do quite well. It gets a little unclear around <em>Step 3: Create and Configure Amazon Route 53 Hosted Zone</em>, so come back and read on once you&rsquo;ve reached that point. I&rsquo;ll make some tea in the meantime.</p>
<p>&hellip; 🎶 🎵</p>
<p>Ready? Cool. See, I&rsquo;m here for you.</p>
<h2 id="set-up-route-53">Set up Route 53</h2>
<p>The majority of the work in this section amounts to creating the correct record sets for your custom domain. If you&rsquo;re already familiar with how record sets work, the documentation is a bit of a slog. Here&rsquo;s how it should look when you&rsquo;re finished:</p>
<p><img src="aws-recordsets.png#screenshot" alt="Route 53 record sets."></p>
<p>The &ldquo;NS&rdquo; and &ldquo;SOA&rdquo; records are created automatically for you. The only records you need to create are the &ldquo;A&rdquo; records.</p>
<p>Hop over to Route 53 and follow <a href="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html">this walkthrough</a> to create a &ldquo;hosted zone.&rdquo; The value of the <strong>NS</strong> (Name Servers) records are what you&rsquo;ll have to provide to your domain name registrar. Your registrar is wherever you bought your custom domain, such as this super subtle <a href="https://www.jdoqocy.com/ds70r09608OQPPRVXSQPOQSRVVVVX" target="_top">Namecheap.com affiliate link</a>
 right here. (Thanks for your support! 😊)</p>
<p>If you created two buckets in the first section (one for <code>yourdomain.com</code> and one for <code>www.yourdomain.com</code>), you&rsquo;ll need two separate A records in Route 53. Initially, these have the value of the endpoints for your matching S3 buckets (looks like <code>s3-website.us-east-2.amazonaws.com</code>). Later, you&rsquo;ll change them to your CloudFront domain name.</p>
<p>If you went with Namecheap as your registrar, <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html#root-domain-walkthrough-update-ns-record">Step 4</a> looks like this:</p>
<p><img src="aws-namecheapdns.png#screenshot" alt="Namecheap&rsquo;s Custom DNS settings."></p>
<p>Waiting is the hardest part&hellip; I&rsquo;ve gotten into the habit of working on another project or setting up the DNS change before going to bed so that changes have time to propagate without me feeling like I need to fiddle with it. ^^;</p>
<p>When the transfer&rsquo;s ready, you&rsquo;ll see your site at <code>http://yourdomain.com</code>. Next, you&rsquo;ll want to set up CloudFront so that becomes <code>https://yourdomain.com</code>.</p>
<h2 id="set-up-cloudfront-and-ssl">Set up CloudFront and SSL</h2>
<p><a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-cloudfront-walkthrough.html">Here are the instructions for setting up CloudFront.</a> There are a few important points to make sure you don&rsquo;t miss on the &ldquo;Create Distribution&rdquo; page:</p>
<ul>
<li><strong>Origin Domain Name:</strong> Make sure to use your S3 bucket endpoint, and not select the bucket from the dropdown menu that appears.</li>
<li><strong>Viewer Protocol Policy:</strong> If you want requests for <code>http://yourdomain.com</code> to always result in <code>https://yourdomain.com</code>, choose &ldquo;Redirect HTTP to HTTPS.&rdquo;</li>
<li><strong>Alternate Domain Names:</strong> Enter <code>yourdomain.com</code> and <code>www.yourdomain.com</code> on separate lines.</li>
<li><strong>SSL Certificate:</strong> See below.</li>
<li><strong>Default Root Object:</strong> Enter the name of the html file that should be returned when your users go to <code>https://yourdomain.com</code>. This is usually &ldquo;index.html&rdquo;.</li>
</ul>
<h3 id="ssl-certificate">SSL Certificate</h3>
<p>To show your content with HTTPS at your custom domain, you&rsquo;ll need to choose &ldquo;Custom SSL Certificate.&rdquo; You can easily get an SSL Certificate with AWS Certificate Manager. Click on &ldquo;Request or Import a Certificate with ACM&rdquo; to get started in a new window.</p>
<p><a href="http://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request.html">Here are instructions for setting up a certificate.</a> I don&rsquo;t think they&rsquo;re very good, personally. Don&rsquo;t worry, I got you.</p>
<p>To account for &ldquo;<a href="https://www.yourdomain.com">www.yourdomain.com</a>&rdquo; as well as any subdomains, you&rsquo;ll want to add two domain names to the certificate, like so:</p>
<p><img src="aws-acmdomains.png#screenshot" alt="Adding domain names to ACM."></p>
<p>Click &ldquo;Next.&rdquo; You&rsquo;ll be asked to choose a validation method. Choose &ldquo;DNS validation&rdquo; and click &ldquo;Review.&rdquo; If everything is as it should be, click &ldquo;Confirm and request.&rdquo;</p>
<p>You&rsquo;ll see a page, &ldquo;Validation&rdquo; that looks like this. You&rsquo;ll have to click the little arrow next to both domain names to get the important information to show:</p>
<p><img src="aws-acmvalidation.png#screenshot" alt="Validation instructions for ACM."></p>
<p>Under both domain names, click the button for &ldquo;Create record in Route 53.&rdquo; This will automatically create a CNAME record set in Route 53 with the given values, which ACM will then check in order to validate that you own those domains. You could create the records manually, if you wanted to for some reason. I don&rsquo;t know, maybe you&rsquo;re killing time. ¯\_(ツ)_/¯</p>
<p>Click &ldquo;Continue.&rdquo; You&rsquo;ll see a console that looks like this:</p>
<p><img src="aws-acmcertificates.png#screenshot" alt="List of certificates you own."></p>
<p>It may take some time for the validation to complete, at which point the &ldquo;Pending validation&rdquo; status will change to &ldquo;Issued.&rdquo; Again with the waiting. You can close this window to return to the CloudFront set up. Once the certificate is validated, you&rsquo;ll see it in the dropdown menu under &ldquo;Custom SSL Certificate.&rdquo; You can click &ldquo;Create Distribution&rdquo; to finish setting up CloudFront.</p>
<p>In your CloudFront Distributions console, you&rsquo;ll see &ldquo;In Progress&rdquo; until AWS has done its thing. Once it&rsquo;s done, it&rsquo;ll change to &ldquo;Deployed.&rdquo;</p>
<h3 id="one-last-thing">One last thing</h3>
<p>Return to your <a href="https://console.aws.amazon.com/route53/">Route 53 console</a> and click on &ldquo;Hosted zones&rdquo; in the sidebar, then your domain name from the list. For both A records, change the &ldquo;Alias Target&rdquo; from the S3 endpoint to your CloudFront distribution domain, which should look something like <code>dj4p1rv6mvubz.cloudfront.net</code>. It appears in the dropdown after you clear the field.</p>
<h2 id="youre-done">You&rsquo;re done</h2>
<p>Well, usually. If you navigate to your new HTTPS domain and don&rsquo;t see your beautiful new site where it should be, here are some things you can do:</p>
<ol>
<li>Check S3 bucket policy - ensure that the bucket for <code>yourdomain.com</code> in the S3 console shows &ldquo;Public&rdquo; in the &ldquo;Access&rdquo; column.</li>
<li>Check S3 bucket index document - In the &ldquo;metadata&rdquo; tab for the bucket, then &ldquo;Static website hosting&rdquo;. Usually &ldquo;index.html&rdquo;.</li>
<li>Check CloudFront Origin - the &ldquo;Origin&rdquo; column in the CloudFront Console should show the S3 bucket&rsquo;s endpoint (<code>s3-website.us-east-2.amazonaws.com</code>), not the bucket name (<code>yourdomain.com.s3.amazonaws.com</code>).</li>
<li>Check CloudFront Default Root Object - clicking on the distribution name should take you to a details page that shows &ldquo;Default Root Object&rdquo; in the list with the value that you set, usually &ldquo;index.html&rdquo;.</li>
<li>Wait. Sometimes changes take up to 48hrs to propagate. ¯\_(ツ)_/¯</li>
</ol>
<p>I hope that helps you get set up with your new static site on AWS! If you found this post helpful, there&rsquo;s a lot more where this came from. You can <a href="/">subscribe to victoria.dev</a> to see new posts first!</p>
]]></content></entry><entry><title type="html">How I ditched WordPress and set up my custom domain HTTPS site for (almost) free</title><link href="https://victoria.dev/archive/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/"/><id>https://victoria.dev/archive/how-i-ditched-wordpress-and-set-up-my-custom-domain-https-site-for-almost-free/</id><author><name>Victoria Drake</name></author><published>2017-01-28T13:16:17+07:00</published><updated>2017-01-28T13:16:17+07:00</updated><content type="html"><![CDATA[<p>I got annoyed with WordPress.com. While using the service has its pros (like https and a mobile responsive website, and being very visual and beginner-friendly) it&rsquo;s limiting. For someone who&rsquo;s comfortable enough to be tweaking CSS but who&rsquo;s not interested in creating their own theme (or paying upwards of $50 for one), I felt I wasn&rsquo;t really the type of consumer WordPress.com was suited to.</p>
<p>To start with, if you want to remove WordPress advertising and use a custom domain name, it&rsquo;s a minimum of $3 per month. If, like me, the free themes provided aren&rsquo;t just what you&rsquo;re looking for, you&rsquo;re stuck with two choices: buy a theme for $50+, or pay $8.25 per month to do <em>some</em> css customization. I don&rsquo;t know about you, but I feel like there should be a hack for this.</p>
<h2 id="how-i-ditched-wordpress-and-got-everything-i-wanted-for-free">How I ditched WordPress and got everything I wanted for free</h2>
<p>Okay, <em>almost</em> free. You still have to pay <a href="https://www.tkqlhce.com/click-100268310-14326263">at least $0.99</a> for a domain name.</p>
<p>For those of you technical enough to skip reading a long post, the recipe is this:</p>
<ol>
<li>Buy a <a href="https://www.jdoqocy.com/ds70r09608OQPPRVXSQPOQSRVVVVX" target="_top">custom domain via this Namecheap affiliate link</a>
 (Thanks for your support! 😊)</li>
<li>Install <a href="https://www.gohugo.io/">Hugo</a>, my favorite static site generator</li>
<li>Host with <a href="https://pages.github.com/">GitHub Pages</a></li>
<li>Put your <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-alias-or-aname-record-with-your-dns-provider">custom domain to work with GitHub Pages</a></li>
<li><del>Use Cloudflare&rsquo;s free plan</del> <a href="#5-enforce-https-for-github-pages">Enforce HTTPS for GitHub Pages</a></li>
</ol>
<p>Let&rsquo;s do the nitty gritty:</p>
<h3 id="1-buy-a-custom-domain">1. Buy a custom domain</h3>
<p>This one&rsquo;s pretty simple. Head on over to <a href="https://www.jdoqocy.com/ds70r09608OQPPRVXSQPOQSRVVVVX" target="_top">Namecheap</a>
, <a href="https://www.gandi.net">Gandi</a>, or if you&rsquo;re rolling in dough, <a href="https://www.godaddy.com/">GoDaddy</a>. Find your perfect web address and buy it up.</p>
<p>If it&rsquo;s a personal domain like <em>yourname.com,</em> it&rsquo;s a pretty good idea to pay upfront for five years or even ten years, if you&rsquo;ve got the cash. It&rsquo;ll save you the trouble of remembering to renew, allow you to build your personal brand, and prevent someone else from buying up your URL.</p>
<p>If you&rsquo;re just trying out an idea, you can go with a one-year <a href="https://www.tkqlhce.com/click-100268310-14326263">$0.99 experiment</a>. Namecheap also gives you WhoisGuard (domain registration privacy) free for one year.</p>
<h3 id="2-install-hugo">2. Install Hugo</h3>
<p>I&rsquo;m a big fan of <a href="https://www.gohugo.io/">Hugo</a> so far. Admittedly, those who feel more comfortable with a visual, WYSIWYG editor may feel like a fish out of water at first. As long as you&rsquo;re not afraid of using command line, though, using Hugo is pretty straightforward. The fact that I have access to all my code is my favorite part. It&rsquo;s only as simple or complicated as I want it to be.</p>
<p>Hugo is open source and free. They&rsquo;ve got great documentation, and following their <a href="https://gohugo.io/overview/quickstart/">Quickstart guide</a> line-by-line will get you set up with your new site in minutes.</p>
<p>If you&rsquo;re not used to the idea of your site existing as files and folders, the basic premise is this: Hugo, along with the themes available, helps you to create all the pages and files that your site needs to run.</p>
<p>Blog posts can be written in Markdown and saved in your <code>/content/blog/</code> folder; preferences for your site and theme can be set in the <code>config.toml</code> file. After that, generating all your site&rsquo;s pages is as quick and easy as typing the command <code>hugo --theme=&lt;your theme&gt;</code>. You&rsquo;ll be able to see a live version of your site in your browser as you&rsquo;re editing it (go to <code>http://localhost:1313/</code> in your browser, as described in Step 5) so you&rsquo;re not flying blind.</p>
<h3 id="3-host-with-github-pages">3. Host with GitHub Pages</h3>
<p>If you read to Step 12 of Hugo&rsquo;s Quickstart Guide, you&rsquo;ll see that they even provided instructions for hosting your files on GitHub pages. If you&rsquo;re new to Git, you&rsquo;ll first need to <a href="https://github.com/">sign up at GitHub</a> and then <a href="https://docs.github.com/en/get-started/quickstart/set-up-git">set up Git</a>. GitHub is a very friendly resource, and you can find a multitude of code examples and guides in connection with it. The <a href="https://docs.github.com/en/get-started/quickstart/hello-world">Hello World Guide</a> will take you through all you need to know to use GitHub.com.</p>
<p>Once you&rsquo;re comfortable with the way GitHub works generally, setting up a site by following <a href="https://pages.github.com/">the guide on GitHub Pages</a> is no big deal. If you followed the Hugo Quickstart Guide up to Step 11, you&rsquo;ll want to jump to Step 12 after creating the repository on GitHub.</p>
<p>In case it&rsquo;s not clear, once you set up your new repository on GitHub called <em>yourusername</em>.github.io, grab the HTTPS link at the top. From there it&rsquo;s just a few simple commands to create the git repository for your site and push it to your new web address:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">## from yoursite/public folder:</span>
</span></span><span style="display:flex;"><span>$ git init
</span></span><span style="display:flex;"><span>$ git remote add origin &lt;paste that https url here!&gt;
</span></span><span style="display:flex;"><span>$ git add --all
</span></span><span style="display:flex;"><span>$ git commit -m <span style="color:#e6db74">&#34;Initial commit.&#34;</span>
</span></span><span style="display:flex;"><span>$ git push origin master
</span></span></code></pre></div><p>Have a little celebration - your site is already up at <code>https://yourusername.github.io</code>! Now for the pizza-de-resilience: the custom domain.</p>
<h3 id="4-point-your-custom-domain-to-github-pages">4. Point your custom domain to GitHub Pages</h3>
<p>To set up your site at apex (meaning <code>yourname.com</code> will replace <code>yourusername.github.io</code>), there&rsquo;s just four steps:</p>
<ol>
<li><a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">Add your domain to your GitHub Pages site repository</a></li>
<li>In your domain registrar&rsquo;s DNS settings, <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">create A records pointing to GitHub&rsquo;s IP addresses</a></li>
<li>In your domain registrar&rsquo;s DNS settings, create a CNAME record pointing to <code>yourusername.github.io</code></li>
<li>Make sure there&rsquo;s a CNAME file in the root directory of your GitHub repository containing <code>yourname.com</code> (your custom domain)</li>
</ol>
<h3 id="5-enforce-https-for-github-pages">5. Enforce HTTPS for GitHub Pages</h3>
<p><a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/">GitHub Pages supports HTTPS</a> through a partnership with <a href="https://letsencrypt.org/">Let&rsquo;s Encrypt</a>! This greatly simplifies the process of serving your site securely. Just look for this clever checkbox in the Settings of your site&rsquo;s GitHub repository.</p>
<p><img src="custom-domain-https.png#screenshot" alt="Enforce HTTPS checkbox"></p>
<p><em>Why do I need HTTPS anyway?</em> For one, it&rsquo;ll <a href="http://searchengineland.com/google-starts-giving-ranking-boost-secure-httpsssl-sites-199446/">give your site a little boost on Google</a>. More importantly, it&rsquo;s fundamental to your website security. You can <a href="/blog/what-is-tls-transport-layer-security-encryption-explained-in-plain-english/">learn more about HTTPS and TLS in this post</a>.</p>
<p>That&rsquo;s pretty much it! If you don&rsquo;t see changes right away, give all your services a lunch hour or so to propogate. Soon your site will be up and running at <code>https://yourname.com</code>.</p>
<p>Thanks for reading! If you found this post helpful, there&rsquo;s a lot more where this came from. You can <a href="/">subscribe to victoria.dev</a> to see new posts first!</p>
]]></content></entry></feed>